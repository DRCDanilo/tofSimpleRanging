
tofSimpleRanging.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001593c  08008588  08008588  00009588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dec4  0801dec4  0001f0ac  2**0
                  CONTENTS
  4 .ARM          00000008  0801dec4  0801dec4  0001eec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801decc  0801decc  0001f0ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801decc  0801decc  0001eecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ded0  0801ded0  0001eed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  0801ded4  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003054  200000ac  0801df80  0001f0ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003100  0801df80  0001f100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f0ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffa9  00000000  00000000  0001f0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc0  00000000  00000000  0002f085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00031d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b13  00000000  00000000  00032bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018601  00000000  00000000  000336d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013836  00000000  00000000  0004bcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc5c  00000000  00000000  0005f50a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004288  00000000  00000000  000ed1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000f1434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008570 	.word	0x08008570

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	08008570 	.word	0x08008570

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f003 fede 	bl	8004334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f808 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f872 	bl	8000664 <MX_GPIO_Init>
  MX_TOF_Init();
 8000580:	f006 fd0e 	bl	8006fa0 <MX_TOF_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TOF_Process();
 8000584:	f006 fd12 	bl	8006fac <MX_TOF_Process>
 8000588:	e7fc      	b.n	8000584 <main+0x14>
	...

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	@ 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	@ 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f007 fa22 	bl	80079e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b29      	ldr	r3, [pc, #164]	@ (800065c <SystemClock_Config+0xd0>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	4a28      	ldr	r2, [pc, #160]	@ (800065c <SystemClock_Config+0xd0>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c0:	4b26      	ldr	r3, [pc, #152]	@ (800065c <SystemClock_Config+0xd0>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b23      	ldr	r3, [pc, #140]	@ (8000660 <SystemClock_Config+0xd4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005d8:	4a21      	ldr	r2, [pc, #132]	@ (8000660 <SystemClock_Config+0xd4>)
 80005da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <SystemClock_Config+0xd4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000600:	2310      	movs	r3, #16
 8000602:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000604:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000608:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060a:	2304      	movs	r3, #4
 800060c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060e:	2307      	movs	r3, #7
 8000610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	4618      	mov	r0, r3
 8000618:	f005 fb7e 	bl	8005d18 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000622:	f000 f8bb 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000632:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2102      	movs	r1, #2
 8000642:	4618      	mov	r0, r3
 8000644:	f005 fde0 	bl	8006208 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800064e:	f000 f8a5 	bl	800079c <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	@ 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	@ 0x28
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	4b44      	ldr	r3, [pc, #272]	@ (8000790 <MX_GPIO_Init+0x12c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a43      	ldr	r2, [pc, #268]	@ (8000790 <MX_GPIO_Init+0x12c>)
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b41      	ldr	r3, [pc, #260]	@ (8000790 <MX_GPIO_Init+0x12c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b3d      	ldr	r3, [pc, #244]	@ (8000790 <MX_GPIO_Init+0x12c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a3c      	ldr	r2, [pc, #240]	@ (8000790 <MX_GPIO_Init+0x12c>)
 80006a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b3a      	ldr	r3, [pc, #232]	@ (8000790 <MX_GPIO_Init+0x12c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	4b36      	ldr	r3, [pc, #216]	@ (8000790 <MX_GPIO_Init+0x12c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a35      	ldr	r2, [pc, #212]	@ (8000790 <MX_GPIO_Init+0x12c>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b33      	ldr	r3, [pc, #204]	@ (8000790 <MX_GPIO_Init+0x12c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000790 <MX_GPIO_Init+0x12c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000790 <MX_GPIO_Init+0x12c>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b2c      	ldr	r3, [pc, #176]	@ (8000790 <MX_GPIO_Init+0x12c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2120      	movs	r1, #32
 80006ee:	4829      	ldr	r0, [pc, #164]	@ (8000794 <MX_GPIO_Init+0x130>)
 80006f0:	f004 fa5e 	bl	8004bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2111      	movs	r1, #17
 80006f8:	4827      	ldr	r0, [pc, #156]	@ (8000798 <MX_GPIO_Init+0x134>)
 80006fa:	f004 fa59 	bl	8004bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2108      	movs	r1, #8
 8000702:	4825      	ldr	r0, [pc, #148]	@ (8000798 <MX_GPIO_Init+0x134>)
 8000704:	f004 fa54 	bl	8004bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000708:	2310      	movs	r3, #16
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	481d      	ldr	r0, [pc, #116]	@ (8000794 <MX_GPIO_Init+0x130>)
 800071e:	f003 ffdf 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000722:	2320      	movs	r3, #32
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	4816      	ldr	r0, [pc, #88]	@ (8000794 <MX_GPIO_Init+0x130>)
 800073a:	f003 ffd1 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800073e:	2311      	movs	r3, #17
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000746:	2301      	movs	r3, #1
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	4810      	ldr	r0, [pc, #64]	@ (8000798 <MX_GPIO_Init+0x134>)
 8000756:	f003 ffc3 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800075a:	2308      	movs	r3, #8
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000762:	2302      	movs	r3, #2
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4809      	ldr	r0, [pc, #36]	@ (8000798 <MX_GPIO_Init+0x134>)
 8000772:	f003 ffb5 	bl	80046e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	200a      	movs	r0, #10
 800077c:	f003 ff4b 	bl	8004616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000780:	200a      	movs	r0, #10
 8000782:	f003 ff64 	bl	800464e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	@ 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000
 8000798:	40020400 	.word	0x40020400

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <Error_Handler+0x8>

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b6:	4a0f      	ldr	r2, [pc, #60]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d2:	4a08      	ldr	r2, [pc, #32]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007e6:	2007      	movs	r0, #7
 80007e8:	f003 ff0a 	bl	8004600 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <NMI_Handler+0x4>

08000800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <MemManage_Handler+0x4>

08000810 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <UsageFault_Handler+0x4>

08000820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084e:	f003 fdc3 	bl	80043d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}

08000856 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800085a:	2010      	movs	r0, #16
 800085c:	f004 f9c2 	bl	8004be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <BSP_I2C1_Init+0x58>)
 8000870:	4a13      	ldr	r2, [pc, #76]	@ (80008c0 <BSP_I2C1_Init+0x5c>)
 8000872:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000874:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <BSP_I2C1_Init+0x60>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1c5a      	adds	r2, r3, #1
 800087a:	4912      	ldr	r1, [pc, #72]	@ (80008c4 <BSP_I2C1_Init+0x60>)
 800087c:	600a      	str	r2, [r1, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d117      	bne.n	80008b2 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000882:	480e      	ldr	r0, [pc, #56]	@ (80008bc <BSP_I2C1_Init+0x58>)
 8000884:	f004 fe7a 	bl	800557c <HAL_I2C_GetState>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d111      	bne.n	80008b2 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800088e:	480b      	ldr	r0, [pc, #44]	@ (80008bc <BSP_I2C1_Init+0x58>)
 8000890:	f000 f8e2 	bl	8000a58 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10b      	bne.n	80008b2 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800089a:	4808      	ldr	r0, [pc, #32]	@ (80008bc <BSP_I2C1_Init+0x58>)
 800089c:	f000 f8a8 	bl	80009f0 <MX_I2C1_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d003      	beq.n	80008ae <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80008a6:	f06f 0307 	mvn.w	r3, #7
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	e001      	b.n	80008b2 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80008b2:	687b      	ldr	r3, [r7, #4]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000c8 	.word	0x200000c8
 80008c0:	40005400 	.word	0x40005400
 80008c4:	2000011c 	.word	0x2000011c

080008c8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80008d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <BSP_I2C1_DeInit+0x48>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d014      	beq.n	8000904 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80008da:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <BSP_I2C1_DeInit+0x48>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	3b01      	subs	r3, #1
 80008e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000910 <BSP_I2C1_DeInit+0x48>)
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <BSP_I2C1_DeInit+0x48>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10b      	bne.n	8000904 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80008ec:	4809      	ldr	r0, [pc, #36]	@ (8000914 <BSP_I2C1_DeInit+0x4c>)
 80008ee:	f000 f8fd 	bl	8000aec <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80008f2:	4808      	ldr	r0, [pc, #32]	@ (8000914 <BSP_I2C1_DeInit+0x4c>)
 80008f4:	f004 fad2 	bl	8004e9c <HAL_I2C_DeInit>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80008fe:	f06f 0307 	mvn.w	r3, #7
 8000902:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000904:	687b      	ldr	r3, [r7, #4]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000011c 	.word	0x2000011c
 8000914:	200000c8 	.word	0x200000c8

08000918 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	@ 0x28
 800091c:	af04      	add	r7, sp, #16
 800091e:	60ba      	str	r2, [r7, #8]
 8000920:	461a      	mov	r2, r3
 8000922:	4603      	mov	r3, r0
 8000924:	81fb      	strh	r3, [r7, #14]
 8000926:	460b      	mov	r3, r1
 8000928:	81bb      	strh	r3, [r7, #12]
 800092a:	4613      	mov	r3, r2
 800092c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000932:	89ba      	ldrh	r2, [r7, #12]
 8000934:	89f9      	ldrh	r1, [r7, #14]
 8000936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093a:	9302      	str	r3, [sp, #8]
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	9301      	str	r3, [sp, #4]
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2310      	movs	r3, #16
 8000946:	480c      	ldr	r0, [pc, #48]	@ (8000978 <BSP_I2C1_WriteReg16+0x60>)
 8000948:	f004 faec 	bl	8004f24 <HAL_I2C_Mem_Write>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d00c      	beq.n	800096c <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000952:	4809      	ldr	r0, [pc, #36]	@ (8000978 <BSP_I2C1_WriteReg16+0x60>)
 8000954:	f004 fe20 	bl	8005598 <HAL_I2C_GetError>
 8000958:	4603      	mov	r3, r0
 800095a:	2b04      	cmp	r3, #4
 800095c:	d103      	bne.n	8000966 <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800095e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	e002      	b.n	800096c <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000966:	f06f 0303 	mvn.w	r3, #3
 800096a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800096c:	697b      	ldr	r3, [r7, #20]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000c8 	.word	0x200000c8

0800097c <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af04      	add	r7, sp, #16
 8000982:	60ba      	str	r2, [r7, #8]
 8000984:	461a      	mov	r2, r3
 8000986:	4603      	mov	r3, r0
 8000988:	81fb      	strh	r3, [r7, #14]
 800098a:	460b      	mov	r3, r1
 800098c:	81bb      	strh	r3, [r7, #12]
 800098e:	4613      	mov	r3, r2
 8000990:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000996:	89ba      	ldrh	r2, [r7, #12]
 8000998:	89f9      	ldrh	r1, [r7, #14]
 800099a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2310      	movs	r3, #16
 80009aa:	480c      	ldr	r0, [pc, #48]	@ (80009dc <BSP_I2C1_ReadReg16+0x60>)
 80009ac:	f004 fbb4 	bl	8005118 <HAL_I2C_Mem_Read>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d00c      	beq.n	80009d0 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80009b6:	4809      	ldr	r0, [pc, #36]	@ (80009dc <BSP_I2C1_ReadReg16+0x60>)
 80009b8:	f004 fdee 	bl	8005598 <HAL_I2C_GetError>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d003      	beq.n	80009ca <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80009c2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e002      	b.n	80009d0 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80009ca:	f06f 0303 	mvn.w	r3, #3
 80009ce:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80009d0:	697b      	ldr	r3, [r7, #20]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000c8 	.word	0x200000c8

080009e0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80009e4:	f003 fd0c 	bl	8004400 <HAL_GetTick>
 80009e8:	4603      	mov	r3, r0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a14      	ldr	r2, [pc, #80]	@ (8000a50 <MX_I2C1_Init+0x60>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a13      	ldr	r2, [pc, #76]	@ (8000a54 <MX_I2C1_Init+0x64>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a1a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f004 f8ed 	bl	8004c14 <HAL_I2C_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40005400 	.word	0x40005400
 8000a54:	00061a80 	.word	0x00061a80

08000a58 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	@ 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <I2C1_MspInit+0x8c>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a68:	4a1e      	ldr	r2, [pc, #120]	@ (8000ae4 <I2C1_MspInit+0x8c>)
 8000a6a:	f043 0302 	orr.w	r3, r3, #2
 8000a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <I2C1_MspInit+0x8c>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000a7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a82:	2312      	movs	r3, #18
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4813      	ldr	r0, [pc, #76]	@ (8000ae8 <I2C1_MspInit+0x90>)
 8000a9a:	f003 fe21 	bl	80046e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000a9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa4:	2312      	movs	r3, #18
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <I2C1_MspInit+0x90>)
 8000abc:	f003 fe10 	bl	80046e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <I2C1_MspInit+0x8c>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	4a06      	ldr	r2, [pc, #24]	@ (8000ae4 <I2C1_MspInit+0x8c>)
 8000aca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ace:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <I2C1_MspInit+0x8c>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	@ 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400

08000aec <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <I2C1_MspDeInit+0x30>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af8:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <I2C1_MspDeInit+0x30>)
 8000afa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000afe:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000b00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b04:	4806      	ldr	r0, [pc, #24]	@ (8000b20 <I2C1_MspDeInit+0x34>)
 8000b06:	f003 ff6f 	bl	80049e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000b0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b0e:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <I2C1_MspDeInit+0x34>)
 8000b10:	f003 ff6a 	bl	80049e8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020400 	.word	0x40020400

08000b24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	e00a      	b.n	8000b4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b36:	f3af 8000 	nop.w
 8000b3a:	4601      	mov	r1, r0
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60ba      	str	r2, [r7, #8]
 8000b42:	b2ca      	uxtb	r2, r1
 8000b44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf0      	blt.n	8000b36 <_read+0x12>
  }

  return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	e009      	b.n	8000b84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 fb77 	bl	800426c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf1      	blt.n	8000b70 <_write+0x12>
  }
  return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_close>:

int _close(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bbe:	605a      	str	r2, [r3, #4]
  return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_isatty>:

int _isatty(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	@ (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f006 ff26 	bl	8007a80 <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20018000 	.word	0x20018000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	20000120 	.word	0x20000120
 8000c68:	20003100 	.word	0x20003100

08000c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	@ (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c94:	f7ff ffea 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	@ (8000cd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f006 fee5 	bl	8007a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fc55 	bl	8000570 <main>
  bx  lr    
 8000cc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000cd4:	0801ded4 	.word	0x0801ded4
  ldr r2, =_sbss
 8000cd8:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8000cdc:	20003100 	.word	0x20003100

08000ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>

08000ce2 <VL53L5A1_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_Init(uint32_t Instance)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b084      	sub	sp, #16
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d903      	bls.n	8000cf8 <VL53L5A1_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000cf0:	f06f 0301 	mvn.w	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	e003      	b.n	8000d00 <VL53L5A1_RANGING_SENSOR_Init+0x1e>
  }
  else
  {
    ret = VL53L5CX_Probe(Instance);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f8f5 	bl	8000ee8 <VL53L5CX_Probe>
 8000cfe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000d00:	68fb      	ldr	r3, [r7, #12]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <VL53L5A1_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d903      	bls.n	8000d24 <VL53L5A1_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d1c:	f06f 0301 	mvn.w	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	e012      	b.n	8000d4a <VL53L5A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->ReadID(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <VL53L5A1_RANGING_SENSOR_ReadID+0x48>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	490b      	ldr	r1, [pc, #44]	@ (8000d58 <VL53L5A1_RANGING_SENSOR_ReadID+0x4c>)
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d32:	6839      	ldr	r1, [r7, #0]
 8000d34:	4610      	mov	r0, r2
 8000d36:	4798      	blx	r3
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	da03      	bge.n	8000d46 <VL53L5A1_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000d3e:	f06f 0304 	mvn.w	r3, #4
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	e001      	b.n	8000d4a <VL53L5A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000130 	.word	0x20000130
 8000d58:	20000124 	.word	0x20000124

08000d5c <VL53L5A1_RANGING_SENSOR_GetCapabilities>:
  * @param Instance    Ranging sensor instance.
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d903      	bls.n	8000d74 <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d6c:	f06f 0301 	mvn.w	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	e012      	b.n	8000d9a <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pCapabilities) < 0)
 8000d74:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x48>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	490b      	ldr	r1, [pc, #44]	@ (8000da8 <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x4c>)
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d82:	6839      	ldr	r1, [r7, #0]
 8000d84:	4610      	mov	r0, r2
 8000d86:	4798      	blx	r3
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	da03      	bge.n	8000d96 <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000d8e:	f06f 0304 	mvn.w	r3, #4
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e001      	b.n	8000d9a <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000130 	.word	0x20000130
 8000da8:	20000124 	.word	0x20000124

08000dac <VL53L5A1_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d903      	bls.n	8000dc4 <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000dbc:	f06f 0301 	mvn.w	r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	e012      	b.n	8000dea <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->ConfigProfile(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x48>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	490b      	ldr	r1, [pc, #44]	@ (8000df8 <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x4c>)
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000dd2:	6839      	ldr	r1, [r7, #0]
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4798      	blx	r3
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	da03      	bge.n	8000de6 <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000dde:	f06f 0304 	mvn.w	r3, #4
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	e001      	b.n	8000dea <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000130 	.word	0x20000130
 8000df8:	20000124 	.word	0x20000124

08000dfc <VL53L5A1_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d903      	bls.n	8000e14 <VL53L5A1_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e0c:	f06f 0301 	mvn.w	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	e012      	b.n	8000e3a <VL53L5A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->GetDistance(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <VL53L5A1_RANGING_SENSOR_GetDistance+0x48>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	490b      	ldr	r1, [pc, #44]	@ (8000e48 <VL53L5A1_RANGING_SENSOR_GetDistance+0x4c>)
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	4610      	mov	r0, r2
 8000e26:	4798      	blx	r3
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	da03      	bge.n	8000e36 <VL53L5A1_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000e2e:	f06f 0304 	mvn.w	r3, #4
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	e001      	b.n	8000e3a <VL53L5A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000130 	.word	0x20000130
 8000e48:	20000124 	.word	0x20000124

08000e4c <VL53L5A1_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d903      	bls.n	8000e64 <VL53L5A1_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e5c:	f06f 0301 	mvn.w	r3, #1
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	e012      	b.n	8000e8a <VL53L5A1_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->Start(VL53L5A1_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <VL53L5A1_RANGING_SENSOR_Start+0x48>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	490b      	ldr	r1, [pc, #44]	@ (8000e98 <VL53L5A1_RANGING_SENSOR_Start+0x4c>)
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e72:	6839      	ldr	r1, [r7, #0]
 8000e74:	4610      	mov	r0, r2
 8000e76:	4798      	blx	r3
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	da03      	bge.n	8000e86 <VL53L5A1_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000e7e:	f06f 0304 	mvn.w	r3, #4
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	e001      	b.n	8000e8a <VL53L5A1_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000130 	.word	0x20000130
 8000e98:	20000124 	.word	0x20000124

08000e9c <VL53L5A1_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d903      	bls.n	8000eb2 <VL53L5A1_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000eaa:	f06f 0301 	mvn.w	r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	e011      	b.n	8000ed6 <VL53L5A1_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->Stop(VL53L5A1_RANGING_SENSOR_CompObj[Instance]) < 0)
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <VL53L5A1_RANGING_SENSOR_Stop+0x44>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb8:	490a      	ldr	r1, [pc, #40]	@ (8000ee4 <VL53L5A1_RANGING_SENSOR_Stop+0x48>)
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4798      	blx	r3
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	da03      	bge.n	8000ed2 <VL53L5A1_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000eca:	f06f 0304 	mvn.w	r3, #4
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	e001      	b.n	8000ed6 <VL53L5A1_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000130 	.word	0x20000130
 8000ee4:	20000124 	.word	0x20000124

08000ee8 <VL53L5CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L5CX_Probe(uint32_t Instance)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	@ 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  VL53L5CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L5CX_Object_t   VL53L5CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L5CX_ADDRESS;
 8000ef0:	2352      	movs	r3, #82	@ 0x52
 8000ef2:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L5A1_I2C_INIT;
 8000ef4:	4b38      	ldr	r3, [pc, #224]	@ (8000fd8 <VL53L5CX_Probe+0xf0>)
 8000ef6:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L5A1_I2C_DEINIT;
 8000ef8:	4b38      	ldr	r3, [pc, #224]	@ (8000fdc <VL53L5CX_Probe+0xf4>)
 8000efa:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L5A1_I2C_WRITEREG;
 8000efc:	4b38      	ldr	r3, [pc, #224]	@ (8000fe0 <VL53L5CX_Probe+0xf8>)
 8000efe:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L5A1_I2C_READREG;
 8000f00:	4b38      	ldr	r3, [pc, #224]	@ (8000fe4 <VL53L5CX_Probe+0xfc>)
 8000f02:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L5A1_GETTICK;
 8000f04:	4b38      	ldr	r3, [pc, #224]	@ (8000fe8 <VL53L5CX_Probe+0x100>)
 8000f06:	623b      	str	r3, [r7, #32]

  if (VL53L5CX_RegisterBusIO(&(VL53L5CXObj[Instance]), &IOCtx) != VL53L5CX_OK)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 8000f0e:	fb02 f303 	mul.w	r3, r2, r3
 8000f12:	4a36      	ldr	r2, [pc, #216]	@ (8000fec <VL53L5CX_Probe+0x104>)
 8000f14:	4413      	add	r3, r2
 8000f16:	f107 020c 	add.w	r2, r7, #12
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 fb7a 	bl	8003616 <VL53L5CX_RegisterBusIO>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <VL53L5CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000f28:	f06f 0304 	mvn.w	r3, #4
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f2e:	e04d      	b.n	8000fcc <VL53L5CX_Probe+0xe4>
  }
  else
  {
    VL53L5A1_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L5CX_RANGING_SENSOR_Driver;
 8000f30:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff0 <VL53L5CX_Probe+0x108>)
 8000f32:	4a30      	ldr	r2, [pc, #192]	@ (8000ff4 <VL53L5CX_Probe+0x10c>)
 8000f34:	601a      	str	r2, [r3, #0]
    VL53L5A1_RANGING_SENSOR_CompObj[Instance] = &(VL53L5CXObj[Instance]);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	4a2a      	ldr	r2, [pc, #168]	@ (8000fec <VL53L5CX_Probe+0x104>)
 8000f42:	441a      	add	r2, r3
 8000f44:	492c      	ldr	r1, [pc, #176]	@ (8000ff8 <VL53L5CX_Probe+0x110>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (VL53L5CX_ReadID(&(VL53L5CXObj[Instance]), &id) != VL53L5CX_OK)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	4a25      	ldr	r2, [pc, #148]	@ (8000fec <VL53L5CX_Probe+0x104>)
 8000f58:	4413      	add	r3, r2
 8000f5a:	f107 0208 	add.w	r2, r7, #8
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 fc08 	bl	8003776 <VL53L5CX_ReadID>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <VL53L5CX_Probe+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8000f6c:	f06f 0304 	mvn.w	r3, #4
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f72:	e02b      	b.n	8000fcc <VL53L5CX_Probe+0xe4>
    }
    else if (id != VL53L5CX_ID)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	f24f 0202 	movw	r2, #61442	@ 0xf002
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d003      	beq.n	8000f86 <VL53L5CX_Probe+0x9e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8000f7e:	f06f 0306 	mvn.w	r3, #6
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f84:	e022      	b.n	8000fcc <VL53L5CX_Probe+0xe4>
    }
    else if (VL53L5A1_RANGING_SENSOR_Drv->Init(VL53L5A1_RANGING_SENSOR_CompObj[Instance]) != VL53L5CX_OK)
 8000f86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <VL53L5CX_Probe+0x108>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	491a      	ldr	r1, [pc, #104]	@ (8000ff8 <VL53L5CX_Probe+0x110>)
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f94:	4610      	mov	r0, r2
 8000f96:	4798      	blx	r3
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <VL53L5CX_Probe+0xbe>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8000f9e:	f06f 0304 	mvn.w	r3, #4
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fa4:	e012      	b.n	8000fcc <VL53L5CX_Probe+0xe4>
    }
    else if (VL53L5A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L5A1_RANGING_SENSOR_CompObj[Instance],
 8000fa6:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <VL53L5CX_Probe+0x108>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4912      	ldr	r1, [pc, #72]	@ (8000ff8 <VL53L5CX_Probe+0x110>)
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fb4:	4911      	ldr	r1, [pc, #68]	@ (8000ffc <VL53L5CX_Probe+0x114>)
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4798      	blx	r3
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <VL53L5CX_Probe+0xe0>
                                                          &VL53L5A1_RANGING_SENSOR_Cap) != VL53L5CX_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8000fc0:	f06f 0304 	mvn.w	r3, #4
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fc6:	e001      	b.n	8000fcc <VL53L5CX_Probe+0xe4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3728      	adds	r7, #40	@ 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	08000865 	.word	0x08000865
 8000fdc:	080008c9 	.word	0x080008c9
 8000fe0:	08000919 	.word	0x08000919
 8000fe4:	0800097d 	.word	0x0800097d
 8000fe8:	080009e1 	.word	0x080009e1
 8000fec:	20000144 	.word	0x20000144
 8000ff0:	20000130 	.word	0x20000130
 8000ff4:	20000004 	.word	0x20000004
 8000ff8:	20000124 	.word	0x20000124
 8000ffc:	20000134 	.word	0x20000134

08001000 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	4608      	mov	r0, r1
 800100a:	4611      	mov	r1, r2
 800100c:	461a      	mov	r2, r3
 800100e:	4603      	mov	r3, r0
 8001010:	70fb      	strb	r3, [r7, #3]
 8001012:	460b      	mov	r3, r1
 8001014:	70bb      	strb	r3, [r7, #2]
 8001016:	4613      	mov	r3, r2
 8001018:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L5CX_RdMulti(&(p_dev->platform), address,
 8001022:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L5CX_RdMulti(&(p_dev->platform), address,
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	8839      	ldrh	r1, [r7, #0]
 800102e:	f002 fa8b 	bl	8003548 <VL53L5CX_RdMulti>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	4313      	orrs	r3, r2
 800103a:	73fb      	strb	r3, [r7, #15]
		status |= VL53L5CX_WaitMs(&(p_dev->platform), 10);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	210a      	movs	r1, #10
 8001040:	4618      	mov	r0, r3
 8001042:	f002 face 	bl	80035e2 <VL53L5CX_WaitMs>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	4313      	orrs	r3, r2
 800104e:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8001050:	7bbb      	ldrb	r3, [r7, #14]
 8001052:	2bc7      	cmp	r3, #199	@ 0xc7
 8001054:	d904      	bls.n	8001060 <_vl53l5cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
			break;
 800105e:	e01a      	b.n	8001096 <_vl53l5cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d909      	bls.n	800107a <_vl53l5cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 800106c:	2b7e      	cmp	r3, #126	@ 0x7e
 800106e:	d904      	bls.n	800107a <_vl53l5cx_poll_for_answer+0x7a>
		{
			status |= VL53L5CX_MCU_ERROR;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8001076:	73fb      	strb	r3, [r7, #15]
			break;
 8001078:	e00d      	b.n	8001096 <_vl53l5cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	3301      	adds	r3, #1
 800107e:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8001080:	78bb      	ldrb	r3, [r7, #2]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 800108a:	7e3b      	ldrb	r3, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	7f3a      	ldrb	r2, [r7, #28]
 8001092:	429a      	cmp	r2, r3
 8001094:	d1c5      	bne.n	8001022 <_vl53l5cx_poll_for_answer+0x22>

	return status;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L5CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f107 020b 	add.w	r2, r7, #11
 80010b6:	2106      	movs	r1, #6
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fa03 	bl	80034c4 <VL53L5CX_RdByte>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 80010c8:	7afb      	ldrb	r3, [r7, #11]
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	da10      	bge.n	80010f2 <_vl53l5cx_poll_for_mcu_boot+0x52>
			status |= VL53L5CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f107 020a 	add.w	r2, r7, #10
 80010d6:	2107      	movs	r1, #7
 80010d8:	4618      	mov	r0, r3
 80010da:	f002 f9f3 	bl	80034c4 <VL53L5CX_RdByte>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 80010e8:	7aba      	ldrb	r2, [r7, #10]
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	73fb      	strb	r3, [r7, #15]
			break;
 80010f0:	e012      	b.n	8001118 <_vl53l5cx_poll_for_mcu_boot+0x78>
		}
		(void)VL53L5CX_WaitMs(&(p_dev->platform), 1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2101      	movs	r1, #1
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 fa73 	bl	80035e2 <VL53L5CX_WaitMs>
		timeout++;
 80010fc:	89bb      	ldrh	r3, [r7, #12]
 80010fe:	3301      	adds	r3, #1
 8001100:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8001102:	7afb      	ldrb	r3, [r7, #11]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d104      	bne.n	8001116 <_vl53l5cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 800110c:	89bb      	ldrh	r3, [r7, #12]
 800110e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001112:	d3cd      	bcc.n	80010b0 <_vl53l5cx_poll_for_mcu_boot+0x10>
 8001114:	e000      	b.n	8001118 <_vl53l5cx_poll_for_mcu_boot+0x78>
			break;
 8001116:	bf00      	nop

   return status;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0ea      	sub	sp, #424	@ 0x1a8
 8001128:	af02      	add	r7, sp, #8
 800112a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800112e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001132:	6018      	str	r0, [r3, #0]
 8001134:	460a      	mov	r2, r1
 8001136:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800113a:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 800113e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8001146:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800114a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800114e:	4ad9      	ldr	r2, [pc, #868]	@ (80014b4 <_vl53l5cx_send_offset_data+0x390>)
 8001150:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001154:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8001158:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800115c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001160:	4ad5      	ldr	r2, [pc, #852]	@ (80014b8 <_vl53l5cx_send_offset_data+0x394>)
 8001162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001166:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 800116a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800116e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 8001178:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800117c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 8001184:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001188:	4619      	mov	r1, r3
 800118a:	f006 fca6 	bl	8007ada <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 800118e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001192:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b10      	cmp	r3, #16
 800119a:	f040 8122 	bne.w	80013e2 <_vl53l5cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 800119e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011a2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f503 62a4 	add.w	r2, r3, #1312	@ 0x520
 80011ac:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011b0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80011b4:	cb03      	ldmia	r3!, {r0, r1}
 80011b6:	6010      	str	r0, [r2, #0]
 80011b8:	6051      	str	r1, [r2, #4]
		VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 80011ba:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011be:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80011c8:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 f9d2 	bl	8003576 <VL53L5CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 80011d2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011d6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f203 514c 	addw	r1, r3, #1356	@ 0x54c
 80011e0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80011e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011e8:	4618      	mov	r0, r3
 80011ea:	f006 fc76 	bl	8007ada <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 80011ee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011f2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f503 61ca 	add.w	r1, r3, #1616	@ 0x650
 80011fc:	f107 0318 	add.w	r3, r7, #24
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	4618      	mov	r0, r3
 8001204:	f006 fc69 	bl	8007ada <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8001208:	2300      	movs	r3, #0
 800120a:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 800120e:	e0ac      	b.n	800136a <_vl53l5cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001210:	2300      	movs	r3, #0
 8001212:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8001216:	e09c      	b.n	8001352 <_vl53l5cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8001218:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 800121c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4413      	add	r3, r2
 8001224:	005a      	lsls	r2, r3, #1
 8001226:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800122a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800122e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8001232:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001236:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	1c59      	adds	r1, r3, #1
 8001242:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800124a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800124e:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8001250:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001254:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	3304      	adds	r3, #4
 800125e:	0059      	lsls	r1, r3, #1
 8001260:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001268:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800126c:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 800126e:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001272:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	440b      	add	r3, r1
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	f103 0109 	add.w	r1, r3, #9
 8001280:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001288:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800128c:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800128e:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001292:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	440a      	add	r2, r1
                                  /(uint32_t)4;
 800129a:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800129c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 80012a8:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80012ac:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	4413      	add	r3, r2
 80012b4:	005a      	lsls	r2, r3, #1
 80012b6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012ba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80012be:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80012c2:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 80012c4:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80012c8:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4413      	add	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012d8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80012dc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80012e0:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 80012e2:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80012e6:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80012ea:	00d2      	lsls	r2, r2, #3
 80012ec:	440a      	add	r2, r1
 80012ee:	3204      	adds	r2, #4
 80012f0:	0051      	lsls	r1, r2, #1
 80012f2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80012f6:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80012fa:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80012fe:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8001300:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001304:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8001308:	00d2      	lsls	r2, r2, #3
 800130a:	440a      	add	r2, r1
 800130c:	0052      	lsls	r2, r2, #1
 800130e:	f102 0109 	add.w	r1, r2, #9
 8001312:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8001316:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800131a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800131e:	4413      	add	r3, r2
                                  /(int16_t)4;
 8001320:	2b00      	cmp	r3, #0
 8001322:	da00      	bge.n	8001326 <_vl53l5cx_send_offset_data+0x202>
 8001324:	3303      	adds	r3, #3
 8001326:	109b      	asrs	r3, r3, #2
 8001328:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 800132a:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 800132e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	441a      	add	r2, r3
 8001336:	b209      	sxth	r1, r1
 8001338:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800133c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001340:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8001344:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8001348:	b2db      	uxtb	r3, r3
 800134a:	3301      	adds	r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8001352:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8001356:	2b03      	cmp	r3, #3
 8001358:	f77f af5e 	ble.w	8001218 <_vl53l5cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 800135c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001360:	b2db      	uxtb	r3, r3
 8001362:	3301      	adds	r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 800136a:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800136e:	2b03      	cmp	r3, #3
 8001370:	f77f af4e 	ble.w	8001210 <_vl53l5cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	3320      	adds	r3, #32
 800137a:	2260      	movs	r2, #96	@ 0x60
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f006 fb30 	bl	80079e4 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8001384:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001388:	3340      	adds	r3, #64	@ 0x40
 800138a:	22c0      	movs	r2, #192	@ 0xc0
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f006 fb28 	bl	80079e4 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8001394:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001398:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 80013a2:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80013a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013aa:	4618      	mov	r0, r3
 80013ac:	f006 fb95 	bl	8007ada <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 80013b0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80013b4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 80013be:	f107 0118 	add.w	r1, r7, #24
 80013c2:	2280      	movs	r2, #128	@ 0x80
 80013c4:	4618      	mov	r0, r3
 80013c6:	f006 fb88 	bl	8007ada <memcpy>
		range_grid, sizeof(range_grid));
            VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 80013ca:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80013ce:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80013d8:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 f8ca 	bl	8003576 <VL53L5CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 80013e8:	e01b      	b.n	8001422 <_vl53l5cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 80013ea:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80013ee:	f103 0208 	add.w	r2, r3, #8
 80013f2:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80013f6:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 80013fa:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 80013fe:	6809      	ldr	r1, [r1, #0]
 8001400:	440a      	add	r2, r1
 8001402:	f892 1510 	ldrb.w	r1, [r2, #1296]	@ 0x510
 8001406:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800140a:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	4413      	add	r3, r2
 8001412:	460a      	mov	r2, r1
 8001414:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8001418:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800141c:	3301      	adds	r3, #1
 800141e:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8001422:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8001426:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 800142a:	d3de      	bcc.n	80013ea <_vl53l5cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 800142c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001430:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f503 62de 	add.w	r2, r3, #1776	@ 0x6f0
 800143a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800143e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001442:	cb03      	ldmia	r3!, {r0, r1}
 8001444:	6010      	str	r0, [r2, #0]
 8001446:	6051      	str	r1, [r2, #4]
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8001448:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800144c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001456:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8001460:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8001464:	f642 6118 	movw	r1, #11800	@ 0x2e18
 8001468:	f002 f857 	bl	800351a <VL53L5CX_WrMulti>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8001474:	4313      	orrs	r3, r2
 8001476:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800147a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800147e:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8001482:	2303      	movs	r3, #3
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	23ff      	movs	r3, #255	@ 0xff
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800148e:	2201      	movs	r2, #1
 8001490:	2104      	movs	r1, #4
 8001492:	6800      	ldr	r0, [r0, #0]
 8001494:	f7ff fdb4 	bl	8001000 <_vl53l5cx_poll_for_answer>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80014a0:	4313      	orrs	r3, r2
 80014a2:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80014a6:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	08008588 	.word	0x08008588
 80014b8:	08008590 	.word	0x08008590

080014bc <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0ca      	sub	sp, #296	@ 0x128
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80014c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014ca:	6018      	str	r0, [r3, #0]
 80014cc:	460a      	mov	r2, r1
 80014ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80014d2:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80014d6:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 80014de:	4a9a      	ldr	r2, [pc, #616]	@ (8001748 <_vl53l5cx_send_xtalk_data+0x28c>)
 80014e0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80014e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014e8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 80014ec:	4a97      	ldr	r2, [pc, #604]	@ (800174c <_vl53l5cx_send_xtalk_data+0x290>)
 80014ee:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80014f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014f6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 80014fa:	4b95      	ldr	r3, [pc, #596]	@ (8001750 <_vl53l5cx_send_xtalk_data+0x294>)
 80014fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8001500:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001504:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
 800150e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001512:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800151c:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8001520:	4619      	mov	r1, r3
 8001522:	f006 fada 	bl	8007ada <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 8001526:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800152a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b10      	cmp	r3, #16
 8001532:	f040 80d2 	bne.w	80016da <_vl53l5cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8001536:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800153a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 8001544:	461a      	mov	r2, r3
 8001546:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800154a:	cb03      	ldmia	r3!, {r0, r1}
 800154c:	6010      	str	r0, [r2, #0]
 800154e:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8001550:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001554:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 800155e:	461a      	mov	r2, r3
 8001560:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001564:	cb03      	ldmia	r3!, {r0, r1}
 8001566:	6010      	str	r0, [r2, #0]
 8001568:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800156a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800156e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001578:	f44f 7142 	mov.w	r1, #776	@ 0x308
 800157c:	4618      	mov	r0, r3
 800157e:	f001 fffa 	bl	8003576 <VL53L5CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8001582:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001586:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f203 5144 	addw	r1, r3, #1348	@ 0x544
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001598:	4618      	mov	r0, r3
 800159a:	f006 fa9e 	bl	8007ada <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80015a4:	e05d      	b.n	8001662 <_vl53l5cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80015ac:	e04e      	b.n	800164c <_vl53l5cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 80015ae:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 80015b2:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	005a      	lsls	r2, r3, #1
 80015bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015c0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80015c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 80015c8:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80015cc:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	1c59      	adds	r1, r3, #1
 80015d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80015e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015e4:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 80015e6:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80015ea:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	3304      	adds	r3, #4
 80015f4:	0059      	lsls	r1, r3, #1
 80015f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80015fa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80015fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001602:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001604:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001608:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	440b      	add	r3, r1
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	f103 0109 	add.w	r1, r3, #9
 8001616:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800161a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800161e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001622:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8001624:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001628:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 800162c:	0092      	lsls	r2, r2, #2
 800162e:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001630:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8001632:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001636:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800163a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 800163e:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8001642:	b2db      	uxtb	r3, r3
 8001644:	3301      	adds	r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800164c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8001650:	2b03      	cmp	r3, #3
 8001652:	ddac      	ble.n	80015ae <_vl53l5cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8001654:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001658:	b2db      	uxtb	r3, r3
 800165a:	3301      	adds	r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8001662:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001666:	2b03      	cmp	r3, #3
 8001668:	dd9d      	ble.n	80015a6 <_vl53l5cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	3340      	adds	r3, #64	@ 0x40
 8001670:	22c0      	movs	r2, #192	@ 0xc0
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f006 f9b5 	bl	80079e4 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 800167a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800167e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 8001688:	f107 0108 	add.w	r1, r7, #8
 800168c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001690:	4618      	mov	r0, r3
 8001692:	f006 fa22 	bl	8007ada <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8001696:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800169a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80016a4:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 ff64 	bl	8003576 <VL53L5CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 80016ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016b2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 80016bc:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80016c0:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 80016c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f503 63b1 	add.w	r3, r3, #1416	@ 0x588
 80016d0:	2204      	movs	r2, #4
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f006 f985 	bl	80079e4 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2cf8,
 80016da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016e2:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80016e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016e8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2cf8,
 80016f2:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80016f6:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 80016fa:	f001 ff0e 	bl	800351a <VL53L5CX_WrMulti>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001706:	4313      	orrs	r3, r2
 8001708:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800170c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001710:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8001714:	2303      	movs	r3, #3
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	23ff      	movs	r3, #255	@ 0xff
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001720:	2201      	movs	r2, #1
 8001722:	2104      	movs	r1, #4
 8001724:	6800      	ldr	r0, [r0, #0]
 8001726:	f7ff fc6b 	bl	8001000 <_vl53l5cx_poll_for_answer>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001732:	4313      	orrs	r3, r2
 8001734:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001738:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 800173c:	4618      	mov	r0, r3
 800173e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	08008598 	.word	0x08008598
 800174c:	080085a0 	.word	0x080085a0
 8001750:	0001fca0 	.word	0x0001fca0

08001754 <vl53l5cx_init>:
	return status;
}

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	@ 0x28
 8001758:	af04      	add	r7, sp, #16
 800175a:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8001760:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001764:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8001766:	2301      	movs	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a80      	ldr	r2, [pc, #512]	@ (8001970 <vl53l5cx_init+0x21c>)
 800176e:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a80      	ldr	r2, [pc, #512]	@ (8001974 <vl53l5cx_init+0x220>)
 8001774:	619a      	str	r2, [r3, #24]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2abc 	strb.w	r2, [r3, #2748]	@ 0xabc

	/* SW reboot sequence */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001786:	4618      	mov	r0, r3
 8001788:	f001 feb1 	bl	80034ee <VL53L5CX_WrByte>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	4313      	orrs	r3, r2
 8001794:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2204      	movs	r2, #4
 800179a:	2109      	movs	r1, #9
 800179c:	4618      	mov	r0, r3
 800179e:	f001 fea6 	bl	80034ee <VL53L5CX_WrByte>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2240      	movs	r2, #64	@ 0x40
 80017b0:	210f      	movs	r1, #15
 80017b2:	4618      	mov	r0, r3
 80017b4:	f001 fe9b 	bl	80034ee <VL53L5CX_WrByte>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	7dfb      	ldrb	r3, [r7, #23]
 80017be:	4313      	orrs	r3, r2
 80017c0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2203      	movs	r2, #3
 80017c6:	210a      	movs	r1, #10
 80017c8:	4618      	mov	r0, r3
 80017ca:	f001 fe90 	bl	80034ee <VL53L5CX_WrByte>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f107 0216 	add.w	r2, r7, #22
 80017de:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 fe6e 	bl	80034c4 <VL53L5CX_RdByte>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	210c      	movs	r1, #12
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 fe78 	bl	80034ee <VL53L5CX_WrByte>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	4313      	orrs	r3, r2
 8001806:	75fb      	strb	r3, [r7, #23]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f240 1101 	movw	r1, #257	@ 0x101
 8001810:	4618      	mov	r0, r3
 8001812:	f001 fe6c 	bl	80034ee <VL53L5CX_WrByte>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	4313      	orrs	r3, r2
 800181e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001828:	4618      	mov	r0, r3
 800182a:	f001 fe60 	bl	80034ee <VL53L5CX_WrByte>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	4313      	orrs	r3, r2
 8001836:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001840:	4618      	mov	r0, r3
 8001842:	f001 fe54 	bl	80034ee <VL53L5CX_WrByte>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	4313      	orrs	r3, r2
 800184e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001858:	4618      	mov	r0, r3
 800185a:	f001 fe48 	bl	80034ee <VL53L5CX_WrByte>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	4313      	orrs	r3, r2
 8001866:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001870:	4618      	mov	r0, r3
 8001872:	f001 fe3c 	bl	80034ee <VL53L5CX_WrByte>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	4313      	orrs	r3, r2
 800187e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2203      	movs	r2, #3
 8001884:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001888:	4618      	mov	r0, r3
 800188a:	f001 fe30 	bl	80034ee <VL53L5CX_WrByte>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	4313      	orrs	r3, r2
 8001896:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f240 1103 	movw	r1, #259	@ 0x103
 80018a0:	4618      	mov	r0, r3
 80018a2:	f001 fe24 	bl	80034ee <VL53L5CX_WrByte>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	210c      	movs	r1, #12
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 fe19 	bl	80034ee <VL53L5CX_WrByte>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2243      	movs	r2, #67	@ 0x43
 80018ca:	210f      	movs	r1, #15
 80018cc:	4618      	mov	r0, r3
 80018ce:	f001 fe0e 	bl	80034ee <VL53L5CX_WrByte>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
 80018d8:	4313      	orrs	r3, r2
 80018da:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WaitMs(&(p_dev->platform), 1);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2101      	movs	r1, #1
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 fe7e 	bl	80035e2 <VL53L5CX_WaitMs>
 80018e6:	4603      	mov	r3, r0
 80018e8:	461a      	mov	r2, r3
 80018ea:	7dfb      	ldrb	r3, [r7, #23]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	75fb      	strb	r3, [r7, #23]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2240      	movs	r2, #64	@ 0x40
 80018f4:	210f      	movs	r1, #15
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 fdf9 	bl	80034ee <VL53L5CX_WrByte>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	4313      	orrs	r3, r2
 8001904:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	210a      	movs	r1, #10
 800190c:	4618      	mov	r0, r3
 800190e:	f001 fdee 	bl	80034ee <VL53L5CX_WrByte>
 8001912:	4603      	mov	r3, r0
 8001914:	461a      	mov	r2, r3
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	4313      	orrs	r3, r2
 800191a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WaitMs(&(p_dev->platform), 100);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2164      	movs	r1, #100	@ 0x64
 8001920:	4618      	mov	r0, r3
 8001922:	f001 fe5e 	bl	80035e2 <VL53L5CX_WaitMs>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	7dfb      	ldrb	r3, [r7, #23]
 800192c:	4313      	orrs	r3, r2
 800192e:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001938:	4618      	mov	r0, r3
 800193a:	f001 fdd8 	bl	80034ee <VL53L5CX_WrByte>
 800193e:	4603      	mov	r3, r0
 8001940:	461a      	mov	r2, r3
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	4313      	orrs	r3, r2
 8001946:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8001948:	2301      	movs	r3, #1
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	23ff      	movs	r3, #255	@ 0xff
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2306      	movs	r3, #6
 8001952:	2200      	movs	r2, #0
 8001954:	2101      	movs	r1, #1
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff fb52 	bl	8001000 <_vl53l5cx_poll_for_answer>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	4313      	orrs	r3, r2
 8001964:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f040 8354 	bne.w	8002016 <vl53l5cx_init+0x8c2>
 800196e:	e003      	b.n	8001978 <vl53l5cx_init+0x224>
 8001970:	0801db50 	.word	0x0801db50
 8001974:	0801d784 	.word	0x0801d784
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	210e      	movs	r1, #14
 800197e:	4618      	mov	r0, r3
 8001980:	f001 fdb5 	bl	80034ee <VL53L5CX_WrByte>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	4313      	orrs	r3, r2
 800198c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2202      	movs	r2, #2
 8001992:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001996:	4618      	mov	r0, r3
 8001998:	f001 fda9 	bl	80034ee <VL53L5CX_WrByte>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	220d      	movs	r2, #13
 80019aa:	2103      	movs	r1, #3
 80019ac:	4618      	mov	r0, r3
 80019ae:	f001 fd9e 	bl	80034ee <VL53L5CX_WrByte>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80019c4:	4618      	mov	r0, r3
 80019c6:	f001 fd92 	bl	80034ee <VL53L5CX_WrByte>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80019d4:	2310      	movs	r3, #16
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	2310      	movs	r3, #16
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2321      	movs	r3, #33	@ 0x21
 80019de:	2200      	movs	r2, #0
 80019e0:	2101      	movs	r1, #1
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fb0c 	bl	8001000 <_vl53l5cx_poll_for_answer>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 fd77 	bl	80034ee <VL53L5CX_WrByte>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	7dfb      	ldrb	r3, [r7, #23]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f107 0216 	add.w	r2, r7, #22
 8001a10:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001a14:	4618      	mov	r0, r3
 8001a16:	f001 fd55 	bl	80034c4 <VL53L5CX_RdByte>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	210c      	movs	r1, #12
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 fd5f 	bl	80034ee <VL53L5CX_WrByte>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 fd53 	bl	80034ee <VL53L5CX_WrByte>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f240 1101 	movw	r1, #257	@ 0x101
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 fd47 	bl	80034ee <VL53L5CX_WrByte>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001a72:	4618      	mov	r0, r3
 8001a74:	f001 fd3b 	bl	80034ee <VL53L5CX_WrByte>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f001 fd2f 	bl	80034ee <VL53L5CX_WrByte>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 fd23 	bl	80034ee <VL53L5CX_WrByte>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001aba:	4618      	mov	r0, r3
 8001abc:	f001 fd17 	bl	80034ee <VL53L5CX_WrByte>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2203      	movs	r2, #3
 8001ace:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f001 fd0b 	bl	80034ee <VL53L5CX_WrByte>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f240 1103 	movw	r1, #259	@ 0x103
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 fcff 	bl	80034ee <VL53L5CX_WrByte>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f244 010f 	movw	r1, #16399	@ 0x400f
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 fcf3 	bl	80034ee <VL53L5CX_WrByte>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2243      	movs	r2, #67	@ 0x43
 8001b16:	f240 211a 	movw	r1, #538	@ 0x21a
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 fce7 	bl	80034ee <VL53L5CX_WrByte>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	f240 211a 	movw	r1, #538	@ 0x21a
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 fcdb 	bl	80034ee <VL53L5CX_WrByte>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f240 211a 	movw	r1, #538	@ 0x21a
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f001 fccf 	bl	80034ee <VL53L5CX_WrByte>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f240 211a 	movw	r1, #538	@ 0x21a
 8001b62:	4618      	mov	r0, r3
 8001b64:	f001 fcc3 	bl	80034ee <VL53L5CX_WrByte>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f240 2119 	movw	r1, #537	@ 0x219
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f001 fcb7 	bl	80034ee <VL53L5CX_WrByte>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f240 211b 	movw	r1, #539	@ 0x21b
 8001b92:	4618      	mov	r0, r3
 8001b94:	f001 fcab 	bl	80034ee <VL53L5CX_WrByte>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	7dfb      	ldrb	r3, [r7, #23]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 fc9f 	bl	80034ee <VL53L5CX_WrByte>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f107 0216 	add.w	r2, r7, #22
 8001bc0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f001 fc7d 	bl	80034c4 <VL53L5CX_RdByte>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	210c      	movs	r1, #12
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 fc87 	bl	80034ee <VL53L5CX_WrByte>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 fc7b 	bl	80034ee <VL53L5CX_WrByte>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x20, 0x07);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2207      	movs	r2, #7
 8001c06:	2120      	movs	r1, #32
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f001 fc70 	bl	80034ee <VL53L5CX_WrByte>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	7dfb      	ldrb	r3, [r7, #23]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x20, 0x06);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2206      	movs	r2, #6
 8001c1c:	2120      	movs	r1, #32
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f001 fc65 	bl	80034ee <VL53L5CX_WrByte>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2209      	movs	r2, #9
 8001c32:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001c36:	4618      	mov	r0, r3
 8001c38:	f001 fc59 	bl	80034ee <VL53L5CX_WrByte>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c4c:	4ae1      	ldr	r2, [pc, #900]	@ (8001fd4 <vl53l5cx_init+0x880>)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	f001 fc63 	bl	800351a <VL53L5CX_WrMulti>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	220a      	movs	r2, #10
 8001c62:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001c66:	4618      	mov	r0, r3
 8001c68:	f001 fc41 	bl	80034ee <VL53L5CX_WrByte>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c7c:	4ad6      	ldr	r2, [pc, #856]	@ (8001fd8 <vl53l5cx_init+0x884>)
 8001c7e:	2100      	movs	r1, #0
 8001c80:	f001 fc4b 	bl	800351a <VL53L5CX_WrMulti>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	7dfb      	ldrb	r3, [r7, #23]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	220b      	movs	r2, #11
 8001c92:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001c96:	4618      	mov	r0, r3
 8001c98:	f001 fc29 	bl	80034ee <VL53L5CX_WrByte>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001cac:	4acb      	ldr	r2, [pc, #812]	@ (8001fdc <vl53l5cx_init+0x888>)
 8001cae:	2100      	movs	r1, #0
 8001cb0:	f001 fc33 	bl	800351a <VL53L5CX_WrMulti>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 fc11 	bl	80034ee <VL53L5CX_WrByte>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f001 fc05 	bl	80034ee <VL53L5CX_WrByte>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	220d      	movs	r2, #13
 8001cf2:	2103      	movs	r1, #3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 fbfa 	bl	80034ee <VL53L5CX_WrByte>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 fbee 	bl	80034ee <VL53L5CX_WrByte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2310      	movs	r3, #16
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	2321      	movs	r3, #33	@ 0x21
 8001d26:	2200      	movs	r2, #0
 8001d28:	2101      	movs	r1, #1
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff f968 	bl	8001000 <_vl53l5cx_poll_for_answer>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f040 816c 	bne.w	800201a <vl53l5cx_init+0x8c6>
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f001 fbcf 	bl	80034ee <VL53L5CX_WrByte>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f107 0216 	add.w	r2, r7, #22
 8001d60:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001d64:	4618      	mov	r0, r3
 8001d66:	f001 fbad 	bl	80034c4 <VL53L5CX_RdByte>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	210c      	movs	r1, #12
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f001 fbb7 	bl	80034ee <VL53L5CX_WrByte>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	7dfb      	ldrb	r3, [r7, #23]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001d92:	4618      	mov	r0, r3
 8001d94:	f001 fbab 	bl	80034ee <VL53L5CX_WrByte>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	7dfb      	ldrb	r3, [r7, #23]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001daa:	4618      	mov	r0, r3
 8001dac:	f001 fb9f 	bl	80034ee <VL53L5CX_WrByte>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f240 1115 	movw	r1, #277	@ 0x115
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f001 fb93 	bl	80034ee <VL53L5CX_WrByte>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2242      	movs	r2, #66	@ 0x42
 8001dd6:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f001 fb87 	bl	80034ee <VL53L5CX_WrByte>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f240 1117 	movw	r1, #279	@ 0x117
 8001df2:	4618      	mov	r0, r3
 8001df4:	f001 fb7b 	bl	80034ee <VL53L5CX_WrByte>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	210b      	movs	r1, #11
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f001 fb70 	bl	80034ee <VL53L5CX_WrByte>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	461a      	mov	r2, r3
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f107 0216 	add.w	r2, r7, #22
 8001e1e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 fb4e 	bl	80034c4 <VL53L5CX_RdByte>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	210c      	movs	r1, #12
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 fb58 	bl	80034ee <VL53L5CX_WrByte>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	210b      	movs	r1, #11
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f001 fb4d 	bl	80034ee <VL53L5CX_WrByte>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461a      	mov	r2, r3
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff f91e 	bl	80010a0 <_vl53l5cx_poll_for_mcu_boot>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f040 80d4 	bne.w	800201e <vl53l5cx_init+0x8ca>
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f001 fb35 	bl	80034ee <VL53L5CX_WrByte>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2fd8,
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	2328      	movs	r3, #40	@ 0x28
 8001e92:	4a53      	ldr	r2, [pc, #332]	@ (8001fe0 <vl53l5cx_init+0x88c>)
 8001e94:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8001e98:	f001 fb3f 	bl	800351a <VL53L5CX_WrMulti>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	23ff      	movs	r3, #255	@ 0xff
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2104      	movs	r1, #4
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff f8a2 	bl	8001000 <_vl53l5cx_poll_for_answer>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8001ec6:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8001ece:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8001ed2:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8001ed6:	f001 fb37 	bl	8003548 <VL53L5CX_RdMulti>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f103 0020 	add.w	r0, r3, #32
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001ef0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f005 fdf0 	bl	8007ada <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8001efa:	2110      	movs	r1, #16
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff f911 	bl	8001124 <_vl53l5cx_send_offset_data>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001f12:	4a34      	ldr	r2, [pc, #208]	@ (8001fe4 <vl53l5cx_init+0x890>)
 8001f14:	4618      	mov	r0, r3
 8001f16:	4611      	mov	r1, r2
 8001f18:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f005 fddc 	bl	8007ada <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8001f22:	2110      	movs	r1, #16
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff fac9 	bl	80014bc <_vl53l5cx_send_xtalk_data>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2c34,
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8001f3e:	f642 4134 	movw	r1, #11316	@ 0x2c34
 8001f42:	f001 faea 	bl	800351a <VL53L5CX_WrMulti>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	7dfb      	ldrb	r3, [r7, #23]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8001f50:	2303      	movs	r3, #3
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	23ff      	movs	r3, #255	@ 0xff
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	2104      	movs	r1, #4
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff f84d 	bl	8001000 <_vl53l5cx_poll_for_answer>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	7dfb      	ldrb	r3, [r7, #23]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8001f70:	f107 0110 	add.w	r1, r7, #16
 8001f74:	2304      	movs	r3, #4
 8001f76:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f001 f832 	bl	8002fe4 <vl53l5cx_dci_write_data>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8001f8a:	f107 010c 	add.w	r1, r7, #12
 8001f8e:	2304      	movs	r3, #4
 8001f90:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f001 f825 	bl	8002fe4 <vl53l5cx_dci_write_data>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	75bb      	strb	r3, [r7, #22]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8001fae:	2326      	movs	r3, #38	@ 0x26
 8001fb0:	9302      	str	r3, [sp, #8]
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	f107 0316 	add.w	r3, r7, #22
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	2328      	movs	r3, #40	@ 0x28
 8001fbe:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f001 f8ac 	bl	8003120 <vl53l5cx_dci_replace_data>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	e00a      	b.n	8001fe8 <vl53l5cx_init+0x894>
 8001fd2:	bf00      	nop
 8001fd4:	08008784 	.word	0x08008784
 8001fd8:	08010784 	.word	0x08010784
 8001fdc:	08018784 	.word	0x08018784
 8001fe0:	0801de58 	.word	0x0801de58
 8001fe4:	0801db50 	.word	0x0801db50
 8001fe8:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8001ff0:	2325      	movs	r3, #37	@ 0x25
 8001ff2:	9302      	str	r3, [sp, #8]
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	f107 0316 	add.w	r3, r7, #22
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2328      	movs	r3, #40	@ 0x28
 8002000:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f001 f88b 	bl	8003120 <vl53l5cx_dci_replace_data>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	7dfb      	ldrb	r3, [r7, #23]
 8002010:	4313      	orrs	r3, r2
 8002012:	75fb      	strb	r3, [r7, #23]
 8002014:	e004      	b.n	8002020 <vl53l5cx_init+0x8cc>
		goto exit;
 8002016:	bf00      	nop
 8002018:	e002      	b.n	8002020 <vl53l5cx_init+0x8cc>
		goto exit;
 800201a:	bf00      	nop
 800201c:	e000      	b.n	8002020 <vl53l5cx_init+0x8cc>
		goto exit;
 800201e:	bf00      	nop
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 8002020:	7dfb      	ldrb	r3, [r7, #23]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop

0800202c <vl53l5cx_set_i2c_address>:

uint8_t vl53l5cx_set_i2c_address(
		VL53L5CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002044:	4618      	mov	r0, r3
 8002046:	f001 fa52 	bl	80034ee <VL53L5CX_WrByte>
 800204a:	4603      	mov	r3, r0
 800204c:	461a      	mov	r2, r3
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	4313      	orrs	r3, r2
 8002052:	73fb      	strb	r3, [r7, #15]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	085b      	lsrs	r3, r3, #1
 800205a:	b29b      	uxth	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	2104      	movs	r1, #4
 8002062:	f001 fa44 	bl	80034ee <VL53L5CX_WrByte>
 8002066:	4603      	mov	r3, r0
 8002068:	461a      	mov	r2, r3
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	4313      	orrs	r3, r2
 800206e:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	801a      	strh	r2, [r3, #0]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2202      	movs	r2, #2
 800207a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800207e:	4618      	mov	r0, r3
 8002080:	f001 fa35 	bl	80034ee <VL53L5CX_WrByte>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	4313      	orrs	r3, r2
 800208c:	73fb      	strb	r3, [r7, #15]

	return status;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <vl53l5cx_get_power_mode>:

uint8_t vl53l5cx_get_power_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 fa1d 	bl	80034ee <VL53L5CX_WrByte>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	73fb      	strb	r3, [r7, #15]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x009, &tmp);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f107 020e 	add.w	r2, r7, #14
 80020c4:	2109      	movs	r1, #9
 80020c6:	4618      	mov	r0, r3
 80020c8:	f001 f9fc 	bl	80034c4 <VL53L5CX_RdByte>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 80020d6:	7bbb      	ldrb	r3, [r7, #14]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d005      	beq.n	80020e8 <vl53l5cx_get_power_mode+0x50>
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d107      	bne.n	80020f0 <vl53l5cx_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53L5CX_POWER_MODE_WAKEUP;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
			break;
 80020e6:	e009      	b.n	80020fc <vl53l5cx_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53L5CX_POWER_MODE_SLEEP;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]

			break;
 80020ee:	e005      	b.n	80020fc <vl53l5cx_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
			status = VL53L5CX_STATUS_ERROR;
 80020f6:	23ff      	movs	r3, #255	@ 0xff
 80020f8:	73fb      	strb	r3, [r7, #15]
			break;
 80020fa:	bf00      	nop
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002104:	4618      	mov	r0, r3
 8002106:	f001 f9f2 	bl	80034ee <VL53L5CX_WrByte>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	4313      	orrs	r3, r2
 8002112:	73fb      	strb	r3, [r7, #15]

	return status;
 8002114:	7bfb      	ldrb	r3, [r7, #15]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <vl53l5cx_set_power_mode>:

uint8_t vl53l5cx_set_power_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af02      	add	r7, sp, #8
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53L5CX_STATUS_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_get_power_mode(p_dev, &current_power_mode);
 800212e:	f107 030e 	add.w	r3, r7, #14
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ffaf 	bl	8002098 <vl53l5cx_get_power_mode>
 800213a:	4603      	mov	r3, r0
 800213c:	461a      	mov	r2, r3
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	4313      	orrs	r3, r2
 8002142:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 8002144:	7bbb      	ldrb	r3, [r7, #14]
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	429a      	cmp	r2, r3
 800214a:	d061      	beq.n	8002210 <vl53l5cx_set_power_mode+0xf2>
	{
	switch(power_mode)
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d028      	beq.n	80021a4 <vl53l5cx_set_power_mode+0x86>
 8002152:	2b01      	cmp	r3, #1
 8002154:	d14d      	bne.n	80021f2 <vl53l5cx_set_power_mode+0xd4>
	{
		case VL53L5CX_POWER_MODE_WAKEUP:
			status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800215e:	4618      	mov	r0, r3
 8002160:	f001 f9c5 	bl	80034ee <VL53L5CX_WrByte>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	4313      	orrs	r3, r2
 800216c:	73fb      	strb	r3, [r7, #15]
			status |= VL53L5CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2204      	movs	r2, #4
 8002172:	2109      	movs	r1, #9
 8002174:	4618      	mov	r0, r3
 8002176:	f001 f9ba 	bl	80034ee <VL53L5CX_WrByte>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	4313      	orrs	r3, r2
 8002182:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l5cx_poll_for_answer(
 8002184:	2301      	movs	r3, #1
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	2301      	movs	r3, #1
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2306      	movs	r3, #6
 800218e:	2200      	movs	r2, #0
 8002190:	2101      	movs	r1, #1
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe ff34 	bl	8001000 <_vl53l5cx_poll_for_answer>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	4313      	orrs	r3, r2
 80021a0:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 80021a2:	e029      	b.n	80021f8 <vl53l5cx_set_power_mode+0xda>

		case VL53L5CX_POWER_MODE_SLEEP:
			status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80021ac:	4618      	mov	r0, r3
 80021ae:	f001 f99e 	bl	80034ee <VL53L5CX_WrByte>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461a      	mov	r2, r3
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	73fb      	strb	r3, [r7, #15]
			status |= VL53L5CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	2109      	movs	r1, #9
 80021c2:	4618      	mov	r0, r3
 80021c4:	f001 f993 	bl	80034ee <VL53L5CX_WrByte>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461a      	mov	r2, r3
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l5cx_poll_for_answer(
 80021d2:	2300      	movs	r3, #0
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	2301      	movs	r3, #1
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2306      	movs	r3, #6
 80021dc:	2200      	movs	r2, #0
 80021de:	2101      	movs	r1, #1
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7fe ff0d 	bl	8001000 <_vl53l5cx_poll_for_answer>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461a      	mov	r2, r3
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 80021f0:	e002      	b.n	80021f8 <vl53l5cx_set_power_mode+0xda>

		default:
			status = VL53L5CX_STATUS_ERROR;
 80021f2:	23ff      	movs	r3, #255	@ 0xff
 80021f4:	73fb      	strb	r3, [r7, #15]
			break;
 80021f6:	bf00      	nop
		}
		status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002200:	4618      	mov	r0, r3
 8002202:	f001 f974 	bl	80034ee <VL53L5CX_WrByte>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	4313      	orrs	r3, r2
 800220e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <vl53l5cx_start_ranging>:

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 800221c:	b5b0      	push	{r4, r5, r7, lr}
 800221e:	b09c      	sub	sp, #112	@ 0x70
 8002220:	af02      	add	r7, sp, #8
 8002222:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 800222a:	2300      	movs	r3, #0
 800222c:	653b      	str	r3, [r7, #80]	@ 0x50
 800222e:	2300      	movs	r3, #0
 8002230:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8002232:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002236:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8002238:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fca0 	bl	8002b84 <vl53l5cx_get_resolution>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800224c:	4313      	orrs	r3, r2
 800224e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	22ff      	movs	r2, #255	@ 0xff
 800225c:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 800225e:	4baa      	ldr	r3, [pc, #680]	@ (8002508 <vl53l5cx_start_ranging+0x2ec>)
 8002260:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002266:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 800226a:	4ba8      	ldr	r3, [pc, #672]	@ (800250c <vl53l5cx_start_ranging+0x2f0>)
 800226c:	f107 040c 	add.w	r4, r7, #12
 8002270:	461d      	mov	r5, r3
 8002272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800227a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800227e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8002282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002284:	3308      	adds	r3, #8
 8002286:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8002288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800228a:	3310      	adds	r3, #16
 800228c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 800228e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002290:	3320      	adds	r3, #32
 8002292:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8002294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002296:	3340      	adds	r3, #64	@ 0x40
 8002298:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 800229a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800229c:	3380      	adds	r3, #128	@ 0x80
 800229e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 80022a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022a2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80022a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 80022a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022aa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80022ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 80022b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 80022b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022be:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80022c0:	2300      	movs	r3, #0
 80022c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80022c4:	e073      	b.n	80023ae <vl53l5cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 80022c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	3368      	adds	r3, #104	@ 0x68
 80022cc:	443b      	add	r3, r7
 80022ce:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d067      	beq.n	80023a6 <vl53l5cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 80022d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022d8:	095b      	lsrs	r3, r3, #5
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	3368      	adds	r3, #104	@ 0x68
 80022de:	443b      	add	r3, r7
 80022e0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 80022e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	fa22 f303 	lsr.w	r3, r2, r3
 80022ee:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d057      	beq.n	80023a6 <vl53l5cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 80022f6:	f107 020c 	add.w	r2, r7, #12
 80022fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8002302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d03a      	beq.n	8002386 <vl53l5cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8002310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b0c      	cmp	r3, #12
 800231c:	d833      	bhi.n	8002386 <vl53l5cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 800231e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002320:	885b      	ldrh	r3, [r3, #2]
 8002322:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 8002326:	4293      	cmp	r3, r2
 8002328:	d910      	bls.n	800234c <vl53l5cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 800232a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800232c:	885b      	ldrh	r3, [r3, #2]
 800232e:	f645 028f 	movw	r2, #22671	@ 0x588f
 8002332:	4293      	cmp	r3, r2
 8002334:	d80a      	bhi.n	800234c <vl53l5cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 8002336:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800233a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233e:	b299      	uxth	r1, r3
 8002340:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002342:	8813      	ldrh	r3, [r2, #0]
 8002344:	f361 130f 	bfi	r3, r1, #4, #12
 8002348:	8013      	strh	r3, [r2, #0]
 800234a:	e009      	b.n	8002360 <vl53l5cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 800234c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002354:	b299      	uxth	r1, r3
 8002356:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002358:	8813      	ldrh	r3, [r2, #0]
 800235a:	f361 130f 	bfi	r3, r1, #4, #12
 800235e:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	4611      	mov	r1, r2
 8002370:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002372:	8812      	ldrh	r2, [r2, #0]
 8002374:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8002378:	b292      	uxth	r2, r2
 800237a:	fb01 f202 	mul.w	r2, r1, r2
 800237e:	441a      	add	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	615a      	str	r2, [r3, #20]
 8002384:	e009      	b.n	800239a <vl53l5cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800238c:	8812      	ldrh	r2, [r2, #0]
 800238e:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8002392:	b292      	uxth	r2, r2
 8002394:	441a      	add	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	1d1a      	adds	r2, r3, #4
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	615a      	str	r2, [r3, #20]
 80023a4:	e000      	b.n	80023a8 <vl53l5cx_start_ranging+0x18c>
			continue;
 80023a6:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80023a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023aa:	3301      	adds	r3, #1
 80023ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80023ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023b0:	2b0b      	cmp	r3, #11
 80023b2:	d988      	bls.n	80022c6 <vl53l5cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f103 0218 	add.w	r2, r3, #24
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	615a      	str	r2, [r3, #20]

	status |= vl53l5cx_dci_write_data(p_dev,
 80023c0:	f107 010c 	add.w	r1, r7, #12
 80023c4:	2330      	movs	r3, #48	@ 0x30
 80023c6:	f64d 1280 	movw	r2, #55680	@ 0xd980
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fe0a 	bl	8002fe4 <vl53l5cx_dci_write_data>
 80023d0:	4603      	mov	r3, r0
 80023d2:	461a      	mov	r2, r3
 80023d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80023d8:	4313      	orrs	r3, r2
 80023da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 80023e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023e6:	3301      	adds	r3, #1
 80023e8:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l5cx_dci_write_data(p_dev,
 80023ea:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80023ee:	2308      	movs	r3, #8
 80023f0:	f64d 1268 	movw	r2, #55656	@ 0xd968
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 fdf5 	bl	8002fe4 <vl53l5cx_dci_write_data>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002402:	4313      	orrs	r3, r2
 8002404:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8002408:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800240c:	2310      	movs	r3, #16
 800240e:	f64d 1270 	movw	r2, #55664	@ 0xd970
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fde6 	bl	8002fe4 <vl53l5cx_dci_write_data>
 8002418:	4603      	mov	r3, r0
 800241a:	461a      	mov	r2, r3
 800241c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002420:	4313      	orrs	r3, r2
 8002422:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800242e:	4618      	mov	r0, r3
 8002430:	f001 f85d 	bl	80034ee <VL53L5CX_WrByte>
 8002434:	4603      	mov	r3, r0
 8002436:	461a      	mov	r2, r3
 8002438:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800243c:	4313      	orrs	r3, r2
 800243e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2205      	movs	r2, #5
 8002446:	2109      	movs	r1, #9
 8002448:	4618      	mov	r0, r3
 800244a:	f001 f850 	bl	80034ee <VL53L5CX_WrByte>
 800244e:	4603      	mov	r3, r0
 8002450:	461a      	mov	r2, r3
 8002452:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002456:	4313      	orrs	r3, r2
 8002458:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002464:	4618      	mov	r0, r3
 8002466:	f001 f842 	bl	80034ee <VL53L5CX_WrByte>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002472:	4313      	orrs	r3, r2
 8002474:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800247e:	2304      	movs	r3, #4
 8002480:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8002484:	f001 f849 	bl	800351a <VL53L5CX_WrMulti>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002490:	4313      	orrs	r3, r2
 8002492:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002496:	2303      	movs	r3, #3
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	23ff      	movs	r3, #255	@ 0xff
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80024a2:	2201      	movs	r2, #1
 80024a4:	2104      	movs	r1, #4
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fdaa 	bl	8001000 <_vl53l5cx_poll_for_answer>
 80024ac:	4603      	mov	r3, r0
 80024ae:	461a      	mov	r2, r3
 80024b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
	status |= vl53l5cx_dci_read_data(p_dev,
 80024c0:	230c      	movs	r3, #12
 80024c2:	f245 4240 	movw	r2, #21568	@ 0x5440
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fd02 	bl	8002ed0 <vl53l5cx_dci_read_data>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461a      	mov	r2, r3
 80024d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 80024e8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80024ec:	461a      	mov	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d002      	beq.n	80024fc <vl53l5cx_start_ranging+0x2e0>
	{
		status |= VL53L5CX_STATUS_ERROR;
 80024f6:	23ff      	movs	r3, #255	@ 0xff
 80024f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 80024fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002500:	4618      	mov	r0, r3
 8002502:	3768      	adds	r7, #104	@ 0x68
 8002504:	46bd      	mov	sp, r7
 8002506:	bdb0      	pop	{r4, r5, r7, pc}
 8002508:	080085a8 	.word	0x080085a8
 800250c:	080085b8 	.word	0x080085b8

08002510 <vl53l5cx_stop_ranging>:

uint8_t vl53l5cx_stop_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L5CX_STATUS_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	74fb      	strb	r3, [r7, #19]
 800251c:	2300      	movs	r3, #0
 800251e:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]

	status |= VL53L5CX_RdMulti(&(p_dev->platform),
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f107 020c 	add.w	r2, r7, #12
 800252e:	2304      	movs	r3, #4
 8002530:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8002534:	f001 f808 	bl	8003548 <VL53L5CX_RdMulti>
 8002538:	4603      	mov	r3, r0
 800253a:	461a      	mov	r2, r3
 800253c:	7dfb      	ldrb	r3, [r7, #23]
 800253e:	4313      	orrs	r3, r2
 8002540:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 8002548:	4293      	cmp	r3, r2
 800254a:	d04d      	beq.n	80025e8 <vl53l5cx_stop_ranging+0xd8>
		&& (p_dev->is_auto_stop_enabled == (uint8_t)0))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3abc 	ldrb.w	r3, [r3, #2748]	@ 0xabc
 8002552:	2b00      	cmp	r3, #0
 8002554:	d148      	bne.n	80025e8 <vl53l5cx_stop_ranging+0xd8>
	{
		status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800255e:	4618      	mov	r0, r3
 8002560:	f000 ffc5 	bl	80034ee <VL53L5CX_WrByte>
 8002564:	4603      	mov	r3, r0
 8002566:	461a      	mov	r2, r3
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	4313      	orrs	r3, r2
 800256c:	75fb      	strb	r3, [r7, #23]

		/* Provoke MCU stop */
		status |= VL53L5CX_WrByte(&(p_dev->platform), 0x15, 0x16);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2216      	movs	r2, #22
 8002572:	2115      	movs	r1, #21
 8002574:	4618      	mov	r0, r3
 8002576:	f000 ffba 	bl	80034ee <VL53L5CX_WrByte>
 800257a:	4603      	mov	r3, r0
 800257c:	461a      	mov	r2, r3
 800257e:	7dfb      	ldrb	r3, [r7, #23]
 8002580:	4313      	orrs	r3, r2
 8002582:	75fb      	strb	r3, [r7, #23]
		status |= VL53L5CX_WrByte(&(p_dev->platform), 0x14, 0x01);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	2114      	movs	r1, #20
 800258a:	4618      	mov	r0, r3
 800258c:	f000 ffaf 	bl	80034ee <VL53L5CX_WrByte>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	4313      	orrs	r3, r2
 8002598:	75fb      	strb	r3, [r7, #23]

		/* Poll for G02 status 0 MCU stop */
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 800259a:	e021      	b.n	80025e0 <vl53l5cx_stop_ranging+0xd0>
		{
			status |= VL53L5CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f107 0213 	add.w	r2, r7, #19
 80025a2:	2106      	movs	r1, #6
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 ff8d 	bl	80034c4 <VL53L5CX_RdByte>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	75fb      	strb	r3, [r7, #23]
			status |= VL53L5CX_WaitMs(&(p_dev->platform), 10);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	210a      	movs	r1, #10
 80025b8:	4618      	mov	r0, r3
 80025ba:	f001 f812 	bl	80035e2 <VL53L5CX_WaitMs>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	7dfb      	ldrb	r3, [r7, #23]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	75fb      	strb	r3, [r7, #23]
			timeout++;	/* Timeout reached after 5 seconds */
 80025c8:	8abb      	ldrh	r3, [r7, #20]
 80025ca:	3301      	adds	r3, #1
 80025cc:	82bb      	strh	r3, [r7, #20]

			if(timeout > (uint16_t)500)
 80025ce:	8abb      	ldrh	r3, [r7, #20]
 80025d0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80025d4:	d904      	bls.n	80025e0 <vl53l5cx_stop_ranging+0xd0>
			{
				status |= tmp;
 80025d6:	7cfa      	ldrb	r2, [r7, #19]
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	4313      	orrs	r3, r2
 80025dc:	75fb      	strb	r3, [r7, #23]
				break;
 80025de:	e003      	b.n	80025e8 <vl53l5cx_stop_ranging+0xd8>
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	dad9      	bge.n	800259c <vl53l5cx_stop_ranging+0x8c>
			}
		}
	}

	/* Check GO2 status 1 if status is still OK */
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f107 0213 	add.w	r2, r7, #19
 80025ee:	2106      	movs	r1, #6
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 ff67 	bl	80034c4 <VL53L5CX_RdByte>
 80025f6:	4603      	mov	r3, r0
 80025f8:	461a      	mov	r2, r3
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	b25b      	sxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	da15      	bge.n	8002634 <vl53l5cx_stop_ranging+0x124>
		status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7, &tmp);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f107 0213 	add.w	r2, r7, #19
 800260e:	2107      	movs	r1, #7
 8002610:	4618      	mov	r0, r3
 8002612:	f000 ff57 	bl	80034c4 <VL53L5CX_RdByte>
 8002616:	4603      	mov	r3, r0
 8002618:	461a      	mov	r2, r3
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	4313      	orrs	r3, r2
 800261e:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	2b84      	cmp	r3, #132	@ 0x84
 8002624:	d006      	beq.n	8002634 <vl53l5cx_stop_ranging+0x124>
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	2b85      	cmp	r3, #133	@ 0x85
 800262a:	d003      	beq.n	8002634 <vl53l5cx_stop_ranging+0x124>
		   status |= tmp;
 800262c:	7cfa      	ldrb	r2, [r7, #19]
 800262e:	7dfb      	ldrb	r3, [r7, #23]
 8002630:	4313      	orrs	r3, r2
 8002632:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800263c:	4618      	mov	r0, r3
 800263e:	f000 ff56 	bl	80034ee <VL53L5CX_WrByte>
 8002642:	4603      	mov	r3, r0
 8002644:	461a      	mov	r2, r3
 8002646:	7dfb      	ldrb	r3, [r7, #23]
 8002648:	4313      	orrs	r3, r2
 800264a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x14, 0x00);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	2114      	movs	r1, #20
 8002652:	4618      	mov	r0, r3
 8002654:	f000 ff4b 	bl	80034ee <VL53L5CX_WrByte>
 8002658:	4603      	mov	r3, r0
 800265a:	461a      	mov	r2, r3
 800265c:	7dfb      	ldrb	r3, [r7, #23]
 800265e:	4313      	orrs	r3, r2
 8002660:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x15, 0x00);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	2115      	movs	r1, #21
 8002668:	4618      	mov	r0, r3
 800266a:	f000 ff40 	bl	80034ee <VL53L5CX_WrByte>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	7dfb      	ldrb	r3, [r7, #23]
 8002674:	4313      	orrs	r3, r2
 8002676:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2204      	movs	r2, #4
 800267c:	2109      	movs	r1, #9
 800267e:	4618      	mov	r0, r3
 8002680:	f000 ff35 	bl	80034ee <VL53L5CX_WrByte>
 8002684:	4603      	mov	r3, r0
 8002686:	461a      	mov	r2, r3
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	4313      	orrs	r3, r2
 800268c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2202      	movs	r2, #2
 8002692:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002696:	4618      	mov	r0, r3
 8002698:	f000 ff29 	bl	80034ee <VL53L5CX_WrByte>
 800269c:	4603      	mov	r3, r0
 800269e:	461a      	mov	r2, r3
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	75fb      	strb	r3, [r7, #23]

	return status;
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <vl53l5cx_check_data_ready>:

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]

	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80026c6:	2304      	movs	r3, #4
 80026c8:	2100      	movs	r1, #0
 80026ca:	f000 ff3d 	bl	8003548 <VL53L5CX_RdMulti>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461a      	mov	r2, r3
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7c1b      	ldrb	r3, [r3, #16]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d020      	beq.n	8002728 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 80026ec:	2bff      	cmp	r3, #255	@ 0xff
 80026ee:	d01b      	beq.n	8002728 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d116      	bne.n	8002728 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 8002700:	f003 0305 	and.w	r3, r3, #5
 8002704:	2b05      	cmp	r3, #5
 8002706:	d10f      	bne.n	8002728 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <vl53l5cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	741a      	strb	r2, [r3, #16]
 8002726:	e00e      	b.n	8002746 <vl53l5cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 800272e:	b25b      	sxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	da05      	bge.n	8002740 <vl53l5cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 2512 	ldrb.w	r2, [r3, #1298]	@ 0x512
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	4313      	orrs	r3, r2
 800273e:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8002746:	7bfb      	ldrb	r3, [r7, #15]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0,
 800275e:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	2100      	movs	r1, #0
 800276c:	f000 feec 	bl	8003548 <VL53L5CX_RdMulti>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	7ffb      	ldrb	r3, [r7, #31]
 8002776:	4313      	orrs	r3, r2
 8002778:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	741a      	strb	r2, [r3, #16]
	VL53L5CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	b29b      	uxth	r3, r3
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f000 feef 	bl	8003576 <VL53L5CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8002798:	2310      	movs	r3, #16
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	e10e      	b.n	80029bc <vl53l5cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d915      	bls.n	80027e4 <vl53l5cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d80e      	bhi.n	80027e4 <vl53l5cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80027da:	b29b      	uxth	r3, r3
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	e005      	b.n	80027f0 <vl53l5cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	885b      	ldrh	r3, [r3, #2]
 80027f4:	f24e 0284 	movw	r2, #57476	@ 0xe084
 80027f8:	4293      	cmp	r3, r2
 80027fa:	f000 80bb 	beq.w	8002974 <vl53l5cx_get_ranging_data+0x224>
 80027fe:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8002802:	4293      	cmp	r3, r2
 8002804:	f300 80d2 	bgt.w	80029ac <vl53l5cx_get_ranging_data+0x25c>
 8002808:	f24e 0244 	movw	r2, #57412	@ 0xe044
 800280c:	4293      	cmp	r3, r2
 800280e:	f000 80a3 	beq.w	8002958 <vl53l5cx_get_ranging_data+0x208>
 8002812:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8002816:	4293      	cmp	r3, r2
 8002818:	f300 80c8 	bgt.w	80029ac <vl53l5cx_get_ranging_data+0x25c>
 800281c:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8002820:	4293      	cmp	r3, r2
 8002822:	f000 808b 	beq.w	800293c <vl53l5cx_get_ranging_data+0x1ec>
 8002826:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 800282a:	4293      	cmp	r3, r2
 800282c:	f300 80be 	bgt.w	80029ac <vl53l5cx_get_ranging_data+0x25c>
 8002830:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8002834:	4293      	cmp	r3, r2
 8002836:	d073      	beq.n	8002920 <vl53l5cx_get_ranging_data+0x1d0>
 8002838:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 800283c:	4293      	cmp	r3, r2
 800283e:	f300 80b5 	bgt.w	80029ac <vl53l5cx_get_ranging_data+0x25c>
 8002842:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8002846:	4293      	cmp	r3, r2
 8002848:	d05c      	beq.n	8002904 <vl53l5cx_get_ranging_data+0x1b4>
 800284a:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 800284e:	4293      	cmp	r3, r2
 8002850:	f300 80ac 	bgt.w	80029ac <vl53l5cx_get_ranging_data+0x25c>
 8002854:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8002858:	4293      	cmp	r3, r2
 800285a:	d045      	beq.n	80028e8 <vl53l5cx_get_ranging_data+0x198>
 800285c:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8002860:	4293      	cmp	r3, r2
 8002862:	f300 80a3 	bgt.w	80029ac <vl53l5cx_get_ranging_data+0x25c>
 8002866:	f64d 0258 	movw	r2, #55384	@ 0xd858
 800286a:	4293      	cmp	r3, r2
 800286c:	f000 8090 	beq.w	8002990 <vl53l5cx_get_ranging_data+0x240>
 8002870:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8002874:	4293      	cmp	r3, r2
 8002876:	f300 8099 	bgt.w	80029ac <vl53l5cx_get_ranging_data+0x25c>
 800287a:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 800287e:	4293      	cmp	r3, r2
 8002880:	d024      	beq.n	80028cc <vl53l5cx_get_ranging_data+0x17c>
 8002882:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8002886:	4293      	cmp	r3, r2
 8002888:	f300 8090 	bgt.w	80029ac <vl53l5cx_get_ranging_data+0x25c>
 800288c:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8002890:	4293      	cmp	r3, r2
 8002892:	d004      	beq.n	800289e <vl53l5cx_get_ranging_data+0x14e>
 8002894:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 8002898:	4293      	cmp	r3, r2
 800289a:	d00a      	beq.n	80028b2 <vl53l5cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 800289c:	e086      	b.n	80029ac <vl53l5cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	330c      	adds	r3, #12
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 80028aa:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	701a      	strb	r2, [r3, #0]
				break;
 80028b0:	e07d      	b.n	80029ae <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	3304      	adds	r3, #4
 80028ba:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4619      	mov	r1, r3
 80028c6:	f005 f908 	bl	8007ada <memcpy>
				break;
 80028ca:	e070      	b.n	80029ae <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	3304      	adds	r3, #4
 80028d6:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4619      	mov	r1, r3
 80028e2:	f005 f8fa 	bl	8007ada <memcpy>
				break;
 80028e6:	e062      	b.n	80029ae <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	3304      	adds	r3, #4
 80028f2:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4619      	mov	r1, r3
 80028fe:	f005 f8ec 	bl	8007ada <memcpy>
				break;
 8002902:	e054      	b.n	80029ae <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	3304      	adds	r3, #4
 800290e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4619      	mov	r1, r3
 800291a:	f005 f8de 	bl	8007ada <memcpy>
				break;
 800291e:	e046      	b.n	80029ae <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	3304      	adds	r3, #4
 800292a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4619      	mov	r1, r3
 8002936:	f005 f8d0 	bl	8007ada <memcpy>
				break;
 800293a:	e038      	b.n	80029ae <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	3304      	adds	r3, #4
 8002946:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4619      	mov	r1, r3
 8002952:	f005 f8c2 	bl	8007ada <memcpy>
				break;
 8002956:	e02a      	b.n	80029ae <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	3304      	adds	r3, #4
 8002962:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4619      	mov	r1, r3
 800296e:	f005 f8b4 	bl	8007ada <memcpy>
				break;
 8002972:	e01c      	b.n	80029ae <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	3304      	adds	r3, #4
 800297e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4619      	mov	r1, r3
 800298a:	f005 f8a6 	bl	8007ada <memcpy>
				break;
 800298e:	e00e      	b.n	80029ae <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	3304      	adds	r3, #4
 800299a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4619      	mov	r1, r3
 80029a6:	f005 f898 	bl	8007ada <memcpy>
				break;
 80029aa:	e000      	b.n	80029ae <vl53l5cx_get_ranging_data+0x25e>
				break;
 80029ac:	bf00      	nop
		}
		i += msize;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	3304      	adds	r3, #4
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	f4ff aeeb 	bcc.w	800279e <vl53l5cx_get_ranging_data+0x4e>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
 80029cc:	e00d      	b.n	80029ea <vl53l5cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	0ada      	lsrs	r2, r3, #11
 80029da:	6839      	ldr	r1, [r7, #0]
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	3301      	adds	r3, #1
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80029ee:	d9ee      	bls.n	80029ce <vl53l5cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 80029f0:	2300      	movs	r3, #0
 80029f2:	61bb      	str	r3, [r7, #24]
 80029f4:	e056      	b.n	8002aa4 <vl53l5cx_get_ranging_data+0x354>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	da00      	bge.n	8002a0c <vl53l5cx_get_ranging_data+0x2bc>
 8002a0a:	3303      	adds	r3, #3
 8002a0c:	109b      	asrs	r3, r3, #2
 8002a0e:	b219      	sxth	r1, r3
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	460a      	mov	r2, r1
 8002a1e:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	da07      	bge.n	8002a44 <vl53l5cx_get_ranging_data+0x2f4>
		{
			p_results->distance_mm[i] = 0;
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	2200      	movs	r2, #0
 8002a42:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	b2d9      	uxtb	r1, r3
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8002a5e:	460a      	mov	r2, r1
 8002a60:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	889b      	ldrh	r3, [r3, #4]
 8002a70:	09db      	lsrs	r3, r3, #7
 8002a72:	b299      	uxth	r1, r3
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	460a      	mov	r2, r1
 8002a82:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	3390      	adds	r3, #144	@ 0x90
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	0ada      	lsrs	r2, r3, #11
 8002a92:	6839      	ldr	r1, [r7, #0]
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	3390      	adds	r3, #144	@ 0x90
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	605a      	str	r2, [r3, #4]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002aa8:	d9a5      	bls.n	80029f6 <vl53l5cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	e01b      	b.n	8002ae8 <vl53l5cx_get_ranging_data+0x398>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d110      	bne.n	8002ae2 <vl53l5cx_get_ranging_data+0x392>
			for(j = 0; j < (uint32_t)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	e00a      	b.n	8002adc <vl53l5cx_get_ranging_data+0x38c>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	4413      	add	r3, r2
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	22ff      	movs	r2, #255	@ 0xff
 8002ad2:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f1      	beq.n	8002ac6 <vl53l5cx_get_ranging_data+0x376>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b3f      	cmp	r3, #63	@ 0x3f
 8002aec:	d9e0      	bls.n	8002ab0 <vl53l5cx_get_ranging_data+0x360>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	e014      	b.n	8002b1e <vl53l5cx_get_ranging_data+0x3ce>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	4a1f      	ldr	r2, [pc, #124]	@ (8002b80 <vl53l5cx_get_ranging_data+0x430>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	0bda      	lsrs	r2, r3, #15
 8002b0a:	6839      	ldr	r1, [r7, #0]
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b1f      	cmp	r3, #31
 8002b22:	d9e7      	bls.n	8002af4 <vl53l5cx_get_ranging_data+0x3a4>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3518 	ldrb.w	r3, [r3, #1304]	@ 0x518
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3519 	ldrb.w	r3, [r3, #1305]	@ 0x519
 8002b34:	461a      	mov	r2, r3
 8002b36:	89fb      	ldrh	r3, [r7, #14]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8002b40:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 8002b52:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4413      	add	r3, r2
 8002b58:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	89bb      	ldrh	r3, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 8002b64:	89fa      	ldrh	r2, [r7, #14]
 8002b66:	89bb      	ldrh	r3, [r7, #12]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d003      	beq.n	8002b74 <vl53l5cx_get_ranging_data+0x424>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 8002b6c:	7ffb      	ldrb	r3, [r7, #31]
 8002b6e:	f043 0302 	orr.w	r3, r3, #2
 8002b72:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8002b74:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	80008001 	.word	0x80008001

08002b84 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002b98:	2308      	movs	r3, #8
 8002b9a:	f245 4250 	movw	r2, #21584	@ 0x5450
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f996 	bl	8002ed0 <vl53l5cx_dci_read_data>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 8002bba:	fb12 f303 	smulbb	r3, r2, r3
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	701a      	strb	r2, [r3, #0]

	return status;
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d002      	beq.n	8002bea <vl53l5cx_set_resolution+0x1c>
 8002be4:	2b40      	cmp	r3, #64	@ 0x40
 8002be6:	d055      	beq.n	8002c94 <vl53l5cx_set_resolution+0xc6>
 8002be8:	e0a9      	b.n	8002d3e <vl53l5cx_set_resolution+0x170>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f96a 	bl	8002ed0 <vl53l5cx_dci_read_data>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	461a      	mov	r2, r3
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2240      	movs	r2, #64	@ 0x40
 8002c0a:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 64;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2240      	movs	r2, #64	@ 0x40
 8002c12:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 4;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2204      	movs	r2, #4
 8002c1a:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8002c24:	2310      	movs	r3, #16
 8002c26:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f9da 	bl	8002fe4 <vl53l5cx_dci_write_data>
 8002c30:	4603      	mov	r3, r0
 8002c32:	461a      	mov	r2, r3
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8002c40:	2308      	movs	r3, #8
 8002c42:	f245 4250 	movw	r2, #21584	@ 0x5450
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f942 	bl	8002ed0 <vl53l5cx_dci_read_data>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2204      	movs	r2, #4
 8002c5a:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 4;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2204      	movs	r2, #4
 8002c62:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 8;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 8;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2208      	movs	r2, #8
 8002c72:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	f245 4250 	movw	r2, #21584	@ 0x5450
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f9ae 	bl	8002fe4 <vl53l5cx_dci_write_data>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 8002c92:	e057      	b.n	8002d44 <vl53l5cx_set_resolution+0x176>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8002c9a:	2310      	movs	r3, #16
 8002c9c:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f915 	bl	8002ed0 <vl53l5cx_dci_read_data>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	461a      	mov	r2, r3
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 16;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2210      	movs	r2, #16
 8002cbc:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 1;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8002cce:	2310      	movs	r3, #16
 8002cd0:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f985 	bl	8002fe4 <vl53l5cx_dci_write_data>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	461a      	mov	r2, r3
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8002cea:	2308      	movs	r3, #8
 8002cec:	f245 4250 	movw	r2, #21584	@ 0x5450
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f8ed 	bl	8002ed0 <vl53l5cx_dci_read_data>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2208      	movs	r2, #8
 8002d04:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 8;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2208      	movs	r2, #8
 8002d0c:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 4;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2204      	movs	r2, #4
 8002d14:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 4;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8002d26:	2308      	movs	r3, #8
 8002d28:	f245 4250 	movw	r2, #21584	@ 0x5450
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f959 	bl	8002fe4 <vl53l5cx_dci_write_data>
 8002d32:	4603      	mov	r3, r0
 8002d34:	461a      	mov	r2, r3
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 8002d3c:	e002      	b.n	8002d44 <vl53l5cx_set_resolution+0x176>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8002d3e:	237f      	movs	r3, #127	@ 0x7f
 8002d40:	73fb      	strb	r3, [r7, #15]
			break;
 8002d42:	bf00      	nop
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	4619      	mov	r1, r3
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7fe f9eb 	bl	8001124 <_vl53l5cx_send_offset_data>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461a      	mov	r2, r3
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7fe fbad 	bl	80014bc <_vl53l5cx_send_xtalk_data>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	73fb      	strb	r3, [r7, #15]

	return status;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b088      	sub	sp, #32
 8002d7a:	af04      	add	r7, sp, #16
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	9302      	str	r3, [sp, #8]
 8002d90:	2301      	movs	r3, #1
 8002d92:	9301      	str	r3, [sp, #4]
 8002d94:	1cfb      	adds	r3, r7, #3
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2304      	movs	r3, #4
 8002d9a:	f245 4258 	movw	r2, #21592	@ 0x5458
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f9be 	bl	8003120 <vl53l5cx_dci_replace_data>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461a      	mov	r2, r3
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <vl53l5cx_set_integration_time_ms>:
}

uint8_t vl53l5cx_set_integration_time_ms(
		VL53L5CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af04      	add	r7, sp, #16
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d903      	bls.n	8002dd8 <vl53l5cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002dd6:	d904      	bls.n	8002de2 <vl53l5cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8002dde:	73fb      	strb	r3, [r7, #15]
 8002de0:	e01a      	b.n	8002e18 <vl53l5cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002de8:	fb02 f303 	mul.w	r3, r2, r3
 8002dec:	60bb      	str	r3, [r7, #8]

		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002df4:	2300      	movs	r3, #0
 8002df6:	9302      	str	r3, [sp, #8]
 8002df8:	2304      	movs	r3, #4
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	f107 0308 	add.w	r3, r7, #8
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2314      	movs	r3, #20
 8002e04:	f245 425c 	movw	r2, #21596	@ 0x545c
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f989 	bl	8003120 <vl53l5cx_dci_replace_data>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461a      	mov	r2, r3
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <vl53l5cx_set_ranging_mode>:
}

uint8_t vl53l5cx_set_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002e3c:	2308      	movs	r3, #8
 8002e3e:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f844 	bl	8002ed0 <vl53l5cx_dci_read_data>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d002      	beq.n	8002e5e <vl53l5cx_set_ranging_mode+0x3c>
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d00b      	beq.n	8002e74 <vl53l5cx_set_ranging_mode+0x52>
 8002e5c:	e015      	b.n	8002e8a <vl53l5cx_set_ranging_mode+0x68>
	{
		case VL53L5CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2203      	movs	r2, #3
 8002e6a:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x00;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
			break;
 8002e72:	e00d      	b.n	8002e90 <vl53l5cx_set_ranging_mode+0x6e>

		case VL53L5CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2203      	movs	r2, #3
 8002e78:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x01;
 8002e84:	2301      	movs	r3, #1
 8002e86:	60bb      	str	r3, [r7, #8]
			break;
 8002e88:	e002      	b.n	8002e90 <vl53l5cx_set_ranging_mode+0x6e>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8002e8a:	237f      	movs	r3, #127	@ 0x7f
 8002e8c:	73fb      	strb	r3, [r7, #15]
			break;
 8002e8e:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002e96:	2308      	movs	r3, #8
 8002e98:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f8a1 	bl	8002fe4 <vl53l5cx_dci_write_data>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8002eac:	f107 0108 	add.w	r1, r7, #8
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f894 	bl	8002fe4 <vl53l5cx_dci_write_data>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SINGLE_RANGE, 
                        (uint16_t)sizeof(single_range));

	return status;
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08c      	sub	sp, #48	@ 0x30
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8002ee4:	887b      	ldrh	r3, [r7, #2]
 8002ee6:	330c      	adds	r3, #12
 8002ee8:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8002eea:	4a3d      	ldr	r2, [pc, #244]	@ (8002fe0 <vl53l5cx_dci_read_data+0x110>)
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ef2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8002ef6:	887b      	ldrh	r3, [r7, #2]
 8002ef8:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8002efc:	d903      	bls.n	8002f06 <vl53l5cx_dci_read_data+0x36>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8002efe:	23ff      	movs	r3, #255	@ 0xff
 8002f00:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002f04:	e065      	b.n	8002fd2 <vl53l5cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8002f14:	887b      	ldrh	r3, [r7, #2]
 8002f16:	111b      	asrs	r3, r3, #4
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8002f1c:	887b      	ldrh	r3, [r7, #2]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L5CX_WrMulti(&(p_dev->platform),
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f107 0214 	add.w	r2, r7, #20
 8002f2c:	230c      	movs	r3, #12
 8002f2e:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 8002f32:	f000 faf2 	bl	800351a <VL53L5CX_WrMulti>
 8002f36:	4603      	mov	r3, r0
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002f44:	2303      	movs	r3, #3
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	23ff      	movs	r3, #255	@ 0xff
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002f50:	2201      	movs	r2, #1
 8002f52:	2104      	movs	r1, #4
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7fe f853 	bl	8001000 <_vl53l5cx_poll_for_answer>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002f68:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8002f76:	f000 fae7 	bl	8003548 <VL53L5CX_RdMulti>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L5CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8002f8e:	887b      	ldrh	r3, [r7, #2]
 8002f90:	330c      	adds	r3, #12
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f000 faed 	bl	8003576 <VL53L5CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002fa0:	e011      	b.n	8002fc6 <vl53l5cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8002fa2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002fa6:	1d1a      	adds	r2, r3, #4
 8002fa8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	440b      	add	r3, r1
 8002fb0:	68f9      	ldr	r1, [r7, #12]
 8002fb2:	440a      	add	r2, r1
 8002fb4:	f892 2510 	ldrb.w	r2, [r2, #1296]	@ 0x510
 8002fb8:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002fba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002fc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	dbe7      	blt.n	8002fa2 <vl53l5cx_dci_read_data+0xd2>
		}
	}

	return status;
 8002fd2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3728      	adds	r7, #40	@ 0x28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	080085e8 	.word	0x080085e8

08002fe4 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08c      	sub	sp, #48	@ 0x30
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	753b      	strb	r3, [r7, #20]
 8003000:	2300      	movs	r3, #0
 8003002:	757b      	strb	r3, [r7, #21]
 8003004:	2300      	movs	r3, #0
 8003006:	75bb      	strb	r3, [r7, #22]
 8003008:	230f      	movs	r3, #15
 800300a:	75fb      	strb	r3, [r7, #23]
 800300c:	2305      	movs	r3, #5
 800300e:	763b      	strb	r3, [r7, #24]
 8003010:	2301      	movs	r3, #1
 8003012:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8003014:	887b      	ldrh	r3, [r7, #2]
 8003016:	3308      	adds	r3, #8
 8003018:	121b      	asrs	r3, r3, #8
 800301a:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800301c:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 800301e:	887b      	ldrh	r3, [r7, #2]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	3308      	adds	r3, #8
 8003024:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8003026:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 8003028:	887b      	ldrh	r3, [r7, #2]
 800302a:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 800302e:	3334      	adds	r3, #52	@ 0x34
 8003030:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8003038:	d903      	bls.n	8003042 <vl53l5cx_dci_write_data+0x5e>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 800303a:	23ff      	movs	r3, #255	@ 0xff
 800303c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003040:	e068      	b.n	8003114 <vl53l5cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	b2db      	uxtb	r3, r3
 8003048:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8003050:	887b      	ldrh	r3, [r7, #2]
 8003052:	111b      	asrs	r3, r3, #4
 8003054:	b2db      	uxtb	r3, r3
 8003056:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8003058:	887b      	ldrh	r3, [r7, #2]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	b2db      	uxtb	r3, r3
 8003060:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L5CX_SwapBuffer(data, data_size);
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	4619      	mov	r1, r3
 8003066:	68b8      	ldr	r0, [r7, #8]
 8003068:	f000 fa85 	bl	8003576 <VL53L5CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 800306c:	887b      	ldrh	r3, [r7, #2]
 800306e:	3b01      	subs	r3, #1
 8003070:	b29b      	uxth	r3, r3
 8003072:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003074:	e012      	b.n	800309c <vl53l5cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8003076:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	441a      	add	r2, r3
 800307e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003082:	3304      	adds	r3, #4
 8003084:	7811      	ldrb	r1, [r2, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4413      	add	r3, r2
 800308a:	460a      	mov	r2, r1
 800308c:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8003090:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29b      	uxth	r3, r3
 800309a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800309c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	dae8      	bge.n	8003076 <vl53l5cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 80030ae:	887b      	ldrh	r3, [r7, #2]
 80030b0:	3304      	adds	r3, #4
 80030b2:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4413      	add	r3, r2
 80030ba:	461a      	mov	r2, r3
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	cb03      	ldmia	r3!, {r0, r1}
 80030c2:	6010      	str	r0, [r2, #0]
 80030c4:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L5CX_WrMulti(&(p_dev->platform),address,
 80030c6:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 80030ce:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L5CX_WrMulti(&(p_dev->platform),address,
 80030d0:	330c      	adds	r3, #12
 80030d2:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80030d4:	f000 fa21 	bl	800351a <VL53L5CX_WrMulti>
 80030d8:	4603      	mov	r3, r0
 80030da:	461a      	mov	r2, r3
 80030dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80030e6:	2303      	movs	r3, #3
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	23ff      	movs	r3, #255	@ 0xff
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80030f2:	2201      	movs	r2, #1
 80030f4:	2104      	movs	r1, #4
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7fd ff82 	bl	8001000 <_vl53l5cx_poll_for_answer>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461a      	mov	r2, r3
 8003100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003104:	4313      	orrs	r3, r2
 8003106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L5CX_SwapBuffer(data, data_size);
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	4619      	mov	r1, r3
 800310e:	68b8      	ldr	r0, [r7, #8]
 8003110:	f000 fa31 	bl	8003576 <VL53L5CX_SwapBuffer>
	}

	return status;
 8003114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003118:	4618      	mov	r0, r3
 800311a:	3728      	adds	r7, #40	@ 0x28
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 8003132:	887b      	ldrh	r3, [r7, #2]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff fec9 	bl	8002ed0 <vl53l5cx_dci_read_data>
 800313e:	4603      	mov	r3, r0
 8003140:	461a      	mov	r2, r3
 8003142:	7dfb      	ldrb	r3, [r7, #23]
 8003144:	4313      	orrs	r3, r2
 8003146:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8003148:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	4413      	add	r3, r2
 800314e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003150:	6a39      	ldr	r1, [r7, #32]
 8003152:	4618      	mov	r0, r3
 8003154:	f004 fcc1 	bl	8007ada <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8003158:	887b      	ldrh	r3, [r7, #2]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f7ff ff40 	bl	8002fe4 <vl53l5cx_dci_write_data>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	4313      	orrs	r3, r2
 800316c:	75fb      	strb	r3, [r7, #23]

	return status;
 800316e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <vl53l5cx_set_detection_thresholds_enable>:
}

uint8_t vl53l5cx_set_detection_thresholds_enable(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af04      	add	r7, sp, #16
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8003188:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800318c:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d104      	bne.n	800319e <vl53l5cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8003194:	2301      	movs	r3, #1
 8003196:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8003198:	2304      	movs	r3, #4
 800319a:	73bb      	strb	r3, [r7, #14]
 800319c:	e003      	b.n	80031a6 <vl53l5cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 800319e:	2300      	movs	r3, #0
 80031a0:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 80031a2:	230c      	movs	r3, #12
 80031a4:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 80031ac:	2300      	movs	r3, #0
 80031ae:	9302      	str	r3, [sp, #8]
 80031b0:	2304      	movs	r3, #4
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	f107 0308 	add.w	r3, r7, #8
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2308      	movs	r3, #8
 80031bc:	f24b 62e0 	movw	r2, #46816	@ 0xb6e0
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ffad 	bl	8003120 <vl53l5cx_dci_replace_data>
 80031c6:	4603      	mov	r3, r0
 80031c8:	461a      	mov	r2, r3
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 80031d6:	2311      	movs	r3, #17
 80031d8:	9302      	str	r3, [sp, #8]
 80031da:	2301      	movs	r3, #1
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	f107 030e 	add.w	r3, r7, #14
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	2314      	movs	r3, #20
 80031e6:	f245 4288 	movw	r2, #21640	@ 0x5488
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ff98 	bl	8003120 <vl53l5cx_dci_replace_data>
 80031f0:	4603      	mov	r3, r0
 80031f2:	461a      	mov	r2, r3
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <vl53l5cx_set_detection_thresholds>:
}

uint8_t vl53l5cx_set_detection_thresholds(
		VL53L5CX_Configuration			*p_dev,
		VL53L5CX_DetectionThresholds	*p_thresholds)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L5CX_STATUS_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 8003212:	4aab      	ldr	r2, [pc, #684]	@ (80034c0 <vl53l5cx_set_detection_thresholds+0x2bc>)
 8003214:	f107 030c 	add.w	r3, r7, #12
 8003218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800321c:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L5CX_NB_THRESHOLDS; i++)
 8003220:	2300      	movs	r3, #0
 8003222:	75fb      	strb	r3, [r7, #23]
 8003224:	e128      	b.n	8003478 <vl53l5cx_set_detection_thresholds+0x274>
	{
		switch(p_thresholds[i].measurement)
 8003226:	7dfa      	ldrb	r2, [r7, #23]
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	461a      	mov	r2, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	4413      	add	r3, r2
 8003236:	7a1b      	ldrb	r3, [r3, #8]
 8003238:	3b01      	subs	r3, #1
 800323a:	2b12      	cmp	r3, #18
 800323c:	f200 8118 	bhi.w	8003470 <vl53l5cx_set_detection_thresholds+0x26c>
 8003240:	a201      	add	r2, pc, #4	@ (adr r2, 8003248 <vl53l5cx_set_detection_thresholds+0x44>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	08003295 	.word	0x08003295
 800324c:	080032e3 	.word	0x080032e3
 8003250:	08003471 	.word	0x08003471
 8003254:	08003331 	.word	0x08003331
 8003258:	08003471 	.word	0x08003471
 800325c:	08003471 	.word	0x08003471
 8003260:	08003471 	.word	0x08003471
 8003264:	0800337f 	.word	0x0800337f
 8003268:	08003471 	.word	0x08003471
 800326c:	08003471 	.word	0x08003471
 8003270:	08003471 	.word	0x08003471
 8003274:	08003471 	.word	0x08003471
 8003278:	080033cd 	.word	0x080033cd
 800327c:	08003471 	.word	0x08003471
 8003280:	08003471 	.word	0x08003471
 8003284:	08003471 	.word	0x08003471
 8003288:	08003471 	.word	0x08003471
 800328c:	08003471 	.word	0x08003471
 8003290:	0800341b 	.word	0x0800341b
		{
			case VL53L5CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8003294:	7dfa      	ldrb	r2, [r7, #23]
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	461a      	mov	r2, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	4413      	add	r3, r2
 80032a4:	6819      	ldr	r1, [r3, #0]
 80032a6:	7dfa      	ldrb	r2, [r7, #23]
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	461a      	mov	r2, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	4413      	add	r3, r2
 80032b6:	008a      	lsls	r2, r1, #2
 80032b8:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 80032ba:	7dfa      	ldrb	r2, [r7, #23]
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	461a      	mov	r2, r3
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	4413      	add	r3, r2
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	7dfa      	ldrb	r2, [r7, #23]
 80032ce:	4613      	mov	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	461a      	mov	r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	4413      	add	r3, r2
 80032dc:	008a      	lsls	r2, r1, #2
 80032de:	605a      	str	r2, [r3, #4]
				break;
 80032e0:	e0c7      	b.n	8003472 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 80032e2:	7dfa      	ldrb	r2, [r7, #23]
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	461a      	mov	r2, r3
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	4413      	add	r3, r2
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	7dfa      	ldrb	r2, [r7, #23]
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	461a      	mov	r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	4413      	add	r3, r2
 8003304:	02ca      	lsls	r2, r1, #11
 8003306:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8003308:	7dfa      	ldrb	r2, [r7, #23]
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	461a      	mov	r2, r3
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	4413      	add	r3, r2
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	7dfa      	ldrb	r2, [r7, #23]
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	461a      	mov	r2, r3
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	4413      	add	r3, r2
 800332a:	02ca      	lsls	r2, r1, #11
 800332c:	605a      	str	r2, [r3, #4]
				break;
 800332e:	e0a0      	b.n	8003472 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 8003330:	7dfa      	ldrb	r2, [r7, #23]
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	461a      	mov	r2, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	4413      	add	r3, r2
 8003340:	6819      	ldr	r1, [r3, #0]
 8003342:	7dfa      	ldrb	r2, [r7, #23]
 8003344:	4613      	mov	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	461a      	mov	r2, r3
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	4413      	add	r3, r2
 8003352:	01ca      	lsls	r2, r1, #7
 8003354:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 8003356:	7dfa      	ldrb	r2, [r7, #23]
 8003358:	4613      	mov	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	461a      	mov	r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	4413      	add	r3, r2
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	7dfa      	ldrb	r2, [r7, #23]
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	461a      	mov	r2, r3
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	4413      	add	r3, r2
 8003378:	01ca      	lsls	r2, r1, #7
 800337a:	605a      	str	r2, [r3, #4]
				break;
 800337c:	e079      	b.n	8003472 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 800337e:	7dfa      	ldrb	r2, [r7, #23]
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	461a      	mov	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	4413      	add	r3, r2
 800338e:	6819      	ldr	r1, [r3, #0]
 8003390:	7dfa      	ldrb	r2, [r7, #23]
 8003392:	4613      	mov	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	461a      	mov	r2, r3
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	4413      	add	r3, r2
 80033a0:	02ca      	lsls	r2, r1, #11
 80033a2:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 80033a4:	7dfa      	ldrb	r2, [r7, #23]
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	461a      	mov	r2, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	4413      	add	r3, r2
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	7dfa      	ldrb	r2, [r7, #23]
 80033b8:	4613      	mov	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	461a      	mov	r2, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	4413      	add	r3, r2
 80033c6:	02ca      	lsls	r2, r1, #11
 80033c8:	605a      	str	r2, [r3, #4]
				break;
 80033ca:	e052      	b.n	8003472 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 80033cc:	7dfa      	ldrb	r2, [r7, #23]
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	461a      	mov	r2, r3
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	4413      	add	r3, r2
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	7dfa      	ldrb	r2, [r7, #23]
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	461a      	mov	r2, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	4413      	add	r3, r2
 80033ee:	020a      	lsls	r2, r1, #8
 80033f0:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 80033f2:	7dfa      	ldrb	r2, [r7, #23]
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	461a      	mov	r2, r3
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	4413      	add	r3, r2
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	7dfa      	ldrb	r2, [r7, #23]
 8003406:	4613      	mov	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	461a      	mov	r2, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4413      	add	r3, r2
 8003414:	020a      	lsls	r2, r1, #8
 8003416:	605a      	str	r2, [r3, #4]
				break;
 8003418:	e02b      	b.n	8003472 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 800341a:	7dfa      	ldrb	r2, [r7, #23]
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	461a      	mov	r2, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	4413      	add	r3, r2
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	7df9      	ldrb	r1, [r7, #23]
 800342e:	460b      	mov	r3, r1
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	440b      	add	r3, r1
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4619      	mov	r1, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4419      	add	r1, r3
 800343c:	4613      	mov	r3, r2
 800343e:	041b      	lsls	r3, r3, #16
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 8003444:	7dfa      	ldrb	r2, [r7, #23]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	461a      	mov	r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4413      	add	r3, r2
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	7df9      	ldrb	r1, [r7, #23]
 8003458:	460b      	mov	r3, r1
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	440b      	add	r3, r1
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4619      	mov	r1, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	4419      	add	r1, r3
 8003466:	4613      	mov	r3, r2
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	604b      	str	r3, [r1, #4]
				break;
 800346e:	e000      	b.n	8003472 <vl53l5cx_set_detection_thresholds+0x26e>
			default:
				break;
 8003470:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L5CX_NB_THRESHOLDS; i++)
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	3301      	adds	r3, #1
 8003476:	75fb      	strb	r3, [r7, #23]
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b3f      	cmp	r3, #63	@ 0x3f
 800347c:	f67f aed3 	bls.w	8003226 <vl53l5cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 8003480:	f107 010c 	add.w	r1, r7, #12
 8003484:	2308      	movs	r3, #8
 8003486:	f64b 12f0 	movw	r2, #47600	@ 0xb9f0
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff fdaa 	bl	8002fe4 <vl53l5cx_dci_write_data>
 8003490:	4603      	mov	r3, r0
 8003492:	461a      	mov	r2, r3
 8003494:	7dbb      	ldrb	r3, [r7, #22]
 8003496:	4313      	orrs	r3, r2
 8003498:	75bb      	strb	r3, [r7, #22]
			VL53L5CX_DCI_DET_THRESH_VALID_STATUS, 
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 800349a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800349e:	f24b 62e8 	movw	r2, #46824	@ 0xb6e8
 80034a2:	6839      	ldr	r1, [r7, #0]
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff fd9d 	bl	8002fe4 <vl53l5cx_dci_write_data>
 80034aa:	4603      	mov	r3, r0
 80034ac:	461a      	mov	r2, r3
 80034ae:	7dbb      	ldrb	r3, [r7, #22]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	75bb      	strb	r3, [r7, #22]
			VL53L5CX_DCI_DET_THRESH_START, 
			(uint16_t)(VL53L5CX_NB_THRESHOLDS
			*sizeof(VL53L5CX_DetectionThresholds)));

	return status;
 80034b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	080085f4 	.word	0x080085f4

080034c4 <VL53L5CX_RdByte>:

uint8_t VL53L5CX_RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	460b      	mov	r3, r1
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689c      	ldr	r4, [r3, #8]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8818      	ldrh	r0, [r3, #0]
 80034da:	8979      	ldrh	r1, [r7, #10]
 80034dc:	2301      	movs	r3, #1
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	47a0      	blx	r4
 80034e2:	4603      	mov	r3, r0
 80034e4:	b2db      	uxtb	r3, r3
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd90      	pop	{r4, r7, pc}

080034ee <VL53L5CX_WrByte>:

uint8_t VL53L5CX_WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 80034ee:	b590      	push	{r4, r7, lr}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	460b      	mov	r3, r1
 80034f8:	807b      	strh	r3, [r7, #2]
 80034fa:	4613      	mov	r3, r2
 80034fc:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685c      	ldr	r4, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8818      	ldrh	r0, [r3, #0]
 8003506:	1c7a      	adds	r2, r7, #1
 8003508:	8879      	ldrh	r1, [r7, #2]
 800350a:	2301      	movs	r3, #1
 800350c:	47a0      	blx	r4
 800350e:	4603      	mov	r3, r0
 8003510:	b2db      	uxtb	r3, r3
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}

0800351a <VL53L5CX_WrMulti>:
uint8_t VL53L5CX_WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800351a:	b590      	push	{r4, r7, lr}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	460b      	mov	r3, r1
 8003528:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	685c      	ldr	r4, [r3, #4]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8818      	ldrh	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b29b      	uxth	r3, r3
 8003536:	8979      	ldrh	r1, [r7, #10]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	47a0      	blx	r4
 800353c:	4603      	mov	r3, r0
 800353e:	b2db      	uxtb	r3, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	bd90      	pop	{r4, r7, pc}

08003548 <VL53L5CX_RdMulti>:
uint8_t VL53L5CX_RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8003548:	b590      	push	{r4, r7, lr}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	460b      	mov	r3, r1
 8003556:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689c      	ldr	r4, [r3, #8]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8818      	ldrh	r0, [r3, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	8979      	ldrh	r1, [r7, #10]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	47a0      	blx	r4
 800356a:	4603      	mov	r3, r0
 800356c:	b2db      	uxtb	r3, r3
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bd90      	pop	{r4, r7, pc}

08003576 <VL53L5CX_SwapBuffer>:

void VL53L5CX_SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 8003576:	b480      	push	{r7}
 8003578:	b085      	sub	sp, #20
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	e021      	b.n	80035cc <VL53L5CX_SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4413      	add	r3, r2
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3301      	adds	r3, #1
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	440b      	add	r3, r1
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	3302      	adds	r3, #2
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	440b      	add	r3, r1
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	3203      	adds	r2, #3
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	440a      	add	r2, r1
 80035b6:	7812      	ldrb	r2, [r2, #0]
 80035b8:	4313      	orrs	r3, r2
    tmp = (
 80035ba:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4413      	add	r3, r2
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3304      	adds	r3, #4
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d3d9      	bcc.n	8003588 <VL53L5CX_SwapBuffer+0x12>
  }
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <VL53L5CX_WaitMs>:

uint8_t VL53L5CX_WaitMs(
		VL53L5CX_Platform *p_platform,
		uint32_t TimeMs)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4798      	blx	r3
 80035f2:	4603      	mov	r3, r0
 80035f4:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 80035f6:	bf00      	nop
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4798      	blx	r3
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d8f5      	bhi.n	80035f8 <VL53L5CX_WaitMs+0x16>

  return 0;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <VL53L5CX_RegisterBusIO>:
  * @param pObj    vl53l5cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_RegisterBusIO(VL53L5CX_Object_t *pObj, VL53L5CX_IO_t *pIO)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <VL53L5CX_RegisterBusIO+0x16>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d103      	bne.n	8003634 <VL53L5CX_RegisterBusIO+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800362c:	f06f 0301 	mvn.w	r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	e033      	b.n	800369c <VL53L5CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	891a      	ldrh	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	615a      	str	r2, [r3, #20]

    /* fill vl53l5cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	891a      	ldrh	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d004      	beq.n	8003696 <VL53L5CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4798      	blx	r3
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	e002      	b.n	800369c <VL53L5CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L5CX_ERROR;
 8003696:	f04f 33ff 	mov.w	r3, #4294967295
 800369a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800369c:	68fb      	ldr	r3, [r7, #12]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <VL53L5CX_Init>:
  * @brief Initializes the vl53l5cx.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Init(VL53L5CX_Object_t *pObj)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d103      	bne.n	80036bc <VL53L5CX_Init+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80036b4:	f06f 0301 	mvn.w	r3, #1
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	e02e      	b.n	800371a <VL53L5CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <VL53L5CX_Init+0x28>
  {
    ret =  VL53L5CX_ERROR;
 80036c6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	e025      	b.n	800371a <VL53L5CX_Init+0x74>
  }
  else if (vl53l5cx_init(&pObj->Dev) != VL53L5CX_STATUS_OK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3318      	adds	r3, #24
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe f83e 	bl	8001754 <vl53l5cx_init>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <VL53L5CX_Init+0x40>
  {
    ret = VL53L5CX_ERROR;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	e019      	b.n	800371a <VL53L5CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    pObj->IsBlocking = 0U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
    pObj->IsContinuous = 0U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
    pObj->IsAmbientEnabled = 0U;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = 0U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd
    pObj->IsInitialized = 1U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
    ret = VL53L5CX_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800371a:	68fb      	ldr	r3, [r7, #12]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <VL53L5CX_DeInit>:
  * @brief Deinitializes the vl53l5cx.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_DeInit(VL53L5CX_Object_t *pObj)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <VL53L5CX_DeInit+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003732:	f06f 0301 	mvn.w	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	e018      	b.n	800376c <VL53L5CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 8003740:	2b01      	cmp	r3, #1
 8003742:	d110      	bne.n	8003766 <VL53L5CX_DeInit+0x42>
  {
    /* De-initialize the vl53l5cx interface */
    if (pObj->IO.DeInit() != 0)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4798      	blx	r3
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <VL53L5CX_DeInit+0x34>
    {
      ret = VL53L5CX_ERROR;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	e009      	b.n	800376c <VL53L5CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L5CX_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
 8003764:	e002      	b.n	800376c <VL53L5CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L5CX_ERROR;
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800376c:	68fb      	ldr	r3, [r7, #12]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <VL53L5CX_ReadID>:
  * @param pObj    vl53l5cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ReadID(VL53L5CX_Object_t *pObj, uint32_t *pId)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L5CX_STATUS_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <VL53L5CX_ReadID+0x22>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d103      	bne.n	80037a0 <VL53L5CX_ReadID+0x2a>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003798:	f06f 0301 	mvn.w	r3, #1
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	e045      	b.n	800382c <VL53L5CX_ReadID+0xb6>
  }
  else
  {
    status |= VL53L5CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3318      	adds	r3, #24
 80037a4:	2200      	movs	r2, #0
 80037a6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fe9f 	bl	80034ee <VL53L5CX_WrByte>
 80037b0:	4603      	mov	r3, r0
 80037b2:	461a      	mov	r2, r3
 80037b4:	7afb      	ldrb	r3, [r7, #11]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	72fb      	strb	r3, [r7, #11]
    status |= VL53L5CX_RdByte(&pObj->Dev.platform, 0, &device_id);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3318      	adds	r3, #24
 80037be:	f107 020a 	add.w	r2, r7, #10
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fe7d 	bl	80034c4 <VL53L5CX_RdByte>
 80037ca:	4603      	mov	r3, r0
 80037cc:	461a      	mov	r2, r3
 80037ce:	7afb      	ldrb	r3, [r7, #11]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	72fb      	strb	r3, [r7, #11]
    status |= VL53L5CX_RdByte(&pObj->Dev.platform, 1, &revision_id);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3318      	adds	r3, #24
 80037d8:	f107 0209 	add.w	r2, r7, #9
 80037dc:	2101      	movs	r1, #1
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fe70 	bl	80034c4 <VL53L5CX_RdByte>
 80037e4:	4603      	mov	r3, r0
 80037e6:	461a      	mov	r2, r3
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	72fb      	strb	r3, [r7, #11]
    status |= VL53L5CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3318      	adds	r3, #24
 80037f2:	2202      	movs	r2, #2
 80037f4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fe78 	bl	80034ee <VL53L5CX_WrByte>
 80037fe:	4603      	mov	r3, r0
 8003800:	461a      	mov	r2, r3
 8003802:	7afb      	ldrb	r3, [r7, #11]
 8003804:	4313      	orrs	r3, r2
 8003806:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 8003808:	7afb      	ldrb	r3, [r7, #11]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d108      	bne.n	8003820 <VL53L5CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 800380e:	7abb      	ldrb	r3, [r7, #10]
 8003810:	021b      	lsls	r3, r3, #8
 8003812:	7a7a      	ldrb	r2, [r7, #9]
 8003814:	441a      	add	r2, r3
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	601a      	str	r2, [r3, #0]
      ret = VL53L5CX_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	e005      	b.n	800382c <VL53L5CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
      ret = VL53L5CX_ERROR;
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800382c:	68fb      	ldr	r3, [r7, #12]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <VL53L5CX_GetCapabilities>:
  * @param pObj    vl53l5cx context object.
  * @param pCap    Pointer to the vl53l5cx capabilities.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetCapabilities(VL53L5CX_Object_t *pObj, VL53L5CX_Capabilities_t *pCap)
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <VL53L5CX_GetCapabilities+0x16>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d103      	bne.n	8003854 <VL53L5CX_GetCapabilities+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800384c:	f06f 0301 	mvn.w	r3, #1
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	e00d      	b.n	8003870 <VL53L5CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L5CX_RESOLUTION_8X8;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2240      	movs	r2, #64	@ 0x40
 8003858:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L5CX_TARGET_PER_ZONE;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2201      	movs	r2, #1
 800385e:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2201      	movs	r2, #1
 800386a:	60da      	str	r2, [r3, #12]

    ret = VL53L5CX_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003870:	68fb      	ldr	r3, [r7, #12]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <VL53L5CX_ConfigProfile>:
  * @param pObj    vl53l5cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigProfile(VL53L5CX_Object_t *pObj, VL53L5CX_ProfileConfig_t *pConfig)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L5CX_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01b      	beq.n	80038cc <VL53L5CX_ConfigProfile+0x4c>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d018      	beq.n	80038cc <VL53L5CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L5CX_INVALID_PARAM;
  }

  switch (profile)
 80038ac:	7c7b      	ldrb	r3, [r7, #17]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d822      	bhi.n	80038fa <VL53L5CX_ConfigProfile+0x7a>
 80038b4:	a201      	add	r2, pc, #4	@ (adr r2, 80038bc <VL53L5CX_ConfigProfile+0x3c>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038d3 	.word	0x080038d3
 80038c0:	080038dd 	.word	0x080038dd
 80038c4:	080038e7 	.word	0x080038e7
 80038c8:	080038f1 	.word	0x080038f1
    return VL53L5CX_INVALID_PARAM;
 80038cc:	f06f 0301 	mvn.w	r3, #1
 80038d0:	e070      	b.n	80039b4 <VL53L5CX_ConfigProfile+0x134>
  {
  case VL53L5CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L5CX_RESOLUTION_4X4;
 80038d2:	2310      	movs	r3, #16
 80038d4:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_CONTINUOUS;
 80038d6:	2301      	movs	r3, #1
 80038d8:	74bb      	strb	r3, [r7, #18]
    break;
 80038da:	e016      	b.n	800390a <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L5CX_RESOLUTION_4X4;
 80038dc:	2310      	movs	r3, #16
 80038de:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_AUTONOMOUS;
 80038e0:	2303      	movs	r3, #3
 80038e2:	74bb      	strb	r3, [r7, #18]
    break;
 80038e4:	e011      	b.n	800390a <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L5CX_RESOLUTION_8X8;
 80038e6:	2340      	movs	r3, #64	@ 0x40
 80038e8:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_CONTINUOUS;
 80038ea:	2301      	movs	r3, #1
 80038ec:	74bb      	strb	r3, [r7, #18]
    break;
 80038ee:	e00c      	b.n	800390a <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L5CX_RESOLUTION_8X8;
 80038f0:	2340      	movs	r3, #64	@ 0x40
 80038f2:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_AUTONOMOUS;
 80038f4:	2303      	movs	r3, #3
 80038f6:	74bb      	strb	r3, [r7, #18]
    break;
 80038f8:	e007      	b.n	800390a <VL53L5CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 80038fa:	2300      	movs	r3, #0
 80038fc:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 80038fe:	2300      	movs	r3, #0
 8003900:	74bb      	strb	r3, [r7, #18]
    ret = VL53L5CX_INVALID_PARAM;
 8003902:	f06f 0301 	mvn.w	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
    break;
 8003908:	bf00      	nop
  }

  if (ret != VL53L5CX_OK)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <VL53L5CX_ConfigProfile+0x94>
  {
    return ret;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	e04f      	b.n	80039b4 <VL53L5CX_ConfigProfile+0x134>
  }
  else if (vl53l5cx_set_resolution(&pObj->Dev, resolution) != VL53L5CX_STATUS_OK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3318      	adds	r3, #24
 8003918:	7cfa      	ldrb	r2, [r7, #19]
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff f956 	bl	8002bce <vl53l5cx_set_resolution>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <VL53L5CX_ConfigProfile+0xb0>
  {
    ret = VL53L5CX_ERROR;
 8003928:	f04f 33ff 	mov.w	r3, #4294967295
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	e040      	b.n	80039b2 <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L5CX_STATUS_OK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3318      	adds	r3, #24
 8003934:	7cba      	ldrb	r2, [r7, #18]
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fa72 	bl	8002e22 <vl53l5cx_set_ranging_mode>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <VL53L5CX_ConfigProfile+0xcc>
  {
    ret = VL53L5CX_ERROR;
 8003944:	f04f 33ff 	mov.w	r3, #4294967295
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	e032      	b.n	80039b2 <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L5CX_STATUS_OK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3318      	adds	r3, #24
 8003950:	68f9      	ldr	r1, [r7, #12]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fa30 	bl	8002db8 <vl53l5cx_set_integration_time_ms>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <VL53L5CX_ConfigProfile+0xe6>
  {
    ret = VL53L5CX_ERROR;
 800395e:	f04f 33ff 	mov.w	r3, #4294967295
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e025      	b.n	80039b2 <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L5CX_STATUS_OK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3318      	adds	r3, #24
 800396a:	7afa      	ldrb	r2, [r7, #11]
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff fa01 	bl	8002d76 <vl53l5cx_set_ranging_frequency_hz>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <VL53L5CX_ConfigProfile+0x102>
  {
    ret = VL53L5CX_ERROR;
 800397a:	f04f 33ff 	mov.w	r3, #4294967295
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e017      	b.n	80039b2 <VL53L5CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	bf14      	ite	ne
 800398a:	2301      	movne	r3, #1
 800398c:	2300      	moveq	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd

    ret = VL53L5CX_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80039b2:	697b      	ldr	r3, [r7, #20]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <VL53L5CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigROI(VL53L5CX_Object_t *pObj, VL53L5CX_ROIConfig_t *pROIConfig)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L5CX_NOT_IMPLEMENTED;
 80039c6:	f06f 0303 	mvn.w	r3, #3
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <VL53L5CX_ConfigIT>:
  * @param pObj    vl53l5cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigIT(VL53L5CX_Object_t *pObj, VL53L5CX_ITConfig_t *pITConfig)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	72bb      	strb	r3, [r7, #10]
  static VL53L5CX_DetectionThresholds thresholds[VL53L5CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <VL53L5CX_ConfigIT+0x1a>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <VL53L5CX_ConfigIT+0x22>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80039f2:	f06f 0301 	mvn.w	r3, #1
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e09f      	b.n	8003b3a <VL53L5CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L5CX_IT_DEFAULT)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2bff      	cmp	r3, #255	@ 0xff
 8003a00:	d113      	bne.n	8003a2a <VL53L5CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l5cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3318      	adds	r3, #24
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fbb5 	bl	8003178 <vl53l5cx_set_detection_thresholds_enable>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	7abb      	ldrb	r3, [r7, #10]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L5CX_ERROR : VL53L5CX_OK;
 8003a18:	7abb      	ldrb	r3, [r7, #10]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <VL53L5CX_ConfigIT+0x4c>
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	e000      	b.n	8003a26 <VL53L5CX_ConfigIT+0x4e>
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	e087      	b.n	8003b3a <VL53L5CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l5cx_get_resolution(&pObj->Dev, &res);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3318      	adds	r3, #24
 8003a2e:	f107 0209 	add.w	r2, r7, #9
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff f8a5 	bl	8002b84 <vl53l5cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	72fb      	strb	r3, [r7, #11]
 8003a3e:	e044      	b.n	8003aca <VL53L5CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 8003a40:	7afa      	ldrb	r2, [r7, #11]
 8003a42:	4940      	ldr	r1, [pc, #256]	@ (8003b44 <VL53L5CX_ConfigIT+0x16c>)
 8003a44:	4613      	mov	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	330a      	adds	r3, #10
 8003a50:	7afa      	ldrb	r2, [r7, #11]
 8003a52:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L5CX_DISTANCE_MM;
 8003a54:	7afa      	ldrb	r2, [r7, #11]
 8003a56:	493b      	ldr	r1, [pc, #236]	@ (8003b44 <VL53L5CX_ConfigIT+0x16c>)
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	3308      	adds	r3, #8
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	7afa      	ldrb	r2, [r7, #11]
 8003a6e:	b2d8      	uxtb	r0, r3
 8003a70:	4934      	ldr	r1, [pc, #208]	@ (8003b44 <VL53L5CX_ConfigIT+0x16c>)
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3309      	adds	r3, #9
 8003a7e:	4602      	mov	r2, r0
 8003a80:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L5CX_OPERATION_NONE;
 8003a82:	7afa      	ldrb	r2, [r7, #11]
 8003a84:	492f      	ldr	r1, [pc, #188]	@ (8003b44 <VL53L5CX_ConfigIT+0x16c>)
 8003a86:	4613      	mov	r3, r2
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	330b      	adds	r3, #11
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	7afa      	ldrb	r2, [r7, #11]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	4929      	ldr	r1, [pc, #164]	@ (8003b44 <VL53L5CX_ConfigIT+0x16c>)
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	7afa      	ldrb	r2, [r7, #11]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	4923      	ldr	r1, [pc, #140]	@ (8003b44 <VL53L5CX_ConfigIT+0x16c>)
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 8003ac4:	7afb      	ldrb	r3, [r7, #11]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	72fb      	strb	r3, [r7, #11]
 8003aca:	7a7b      	ldrb	r3, [r7, #9]
 8003acc:	7afa      	ldrb	r2, [r7, #11]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d3b6      	bcc.n	8003a40 <VL53L5CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L5CX_LAST_THRESHOLD;
 8003ad2:	7afa      	ldrb	r2, [r7, #11]
 8003ad4:	491b      	ldr	r1, [pc, #108]	@ (8003b44 <VL53L5CX_ConfigIT+0x16c>)
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	330a      	adds	r3, #10
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	7afa      	ldrb	r2, [r7, #11]
 8003ae6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003aea:	b2d8      	uxtb	r0, r3
 8003aec:	4915      	ldr	r1, [pc, #84]	@ (8003b44 <VL53L5CX_ConfigIT+0x16c>)
 8003aee:	4613      	mov	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	330a      	adds	r3, #10
 8003afa:	4602      	mov	r2, r0
 8003afc:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l5cx_set_detection_thresholds(&pObj->Dev, thresholds);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3318      	adds	r3, #24
 8003b02:	4910      	ldr	r1, [pc, #64]	@ (8003b44 <VL53L5CX_ConfigIT+0x16c>)
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fb7d 	bl	8003204 <vl53l5cx_set_detection_thresholds>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	7abb      	ldrb	r3, [r7, #10]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l5cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3318      	adds	r3, #24
 8003b18:	2101      	movs	r1, #1
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fb2c 	bl	8003178 <vl53l5cx_set_detection_thresholds_enable>
 8003b20:	4603      	mov	r3, r0
 8003b22:	461a      	mov	r2, r3
 8003b24:	7abb      	ldrb	r3, [r7, #10]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L5CX_ERROR : VL53L5CX_OK;
 8003b2a:	7abb      	ldrb	r3, [r7, #10]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <VL53L5CX_ConfigIT+0x15e>
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295
 8003b34:	e000      	b.n	8003b38 <VL53L5CX_ConfigIT+0x160>
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	200021e4 	.word	0x200021e4

08003b48 <VL53L5CX_GetDistance>:
  * @param pObj    vl53l5cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetDistance(VL53L5CX_Object_t *pObj, VL53L5CX_Result_t *pResult)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <VL53L5CX_GetDistance+0x16>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d103      	bne.n	8003b66 <VL53L5CX_GetDistance+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003b5e:	f06f 0301 	mvn.w	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	e019      	b.n	8003b9a <VL53L5CX_GetDistance+0x52>
  }
  else if (pObj->IsRanging == 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d103      	bne.n	8003b78 <VL53L5CX_GetDistance+0x30>
  {
    ret = VL53L5CX_ERROR;
 8003b70:	f04f 33ff 	mov.w	r3, #4294967295
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	e010      	b.n	8003b9a <VL53L5CX_GetDistance+0x52>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3ada 	ldrb.w	r3, [r3, #2778]	@ 0xada
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d106      	bne.n	8003b90 <VL53L5CX_GetDistance+0x48>
    {
      ret = vl53l5cx_poll_for_measurement(pObj, V53L5CX_POLL_TIMEOUT);
 8003b82:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f939 	bl	8003dfe <vl53l5cx_poll_for_measurement>
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	e004      	b.n	8003b9a <VL53L5CX_GetDistance+0x52>
    }
    else
    {
      ret = vl53l5cx_poll_for_measurement(pObj, 0U);
 8003b90:	2100      	movs	r1, #0
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f933 	bl	8003dfe <vl53l5cx_poll_for_measurement>
 8003b98:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L5CX_OK)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d104      	bne.n	8003baa <VL53L5CX_GetDistance+0x62>
  {
    ret = vl53l5cx_get_result(pObj, pResult);
 8003ba0:	6839      	ldr	r1, [r7, #0]
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f958 	bl	8003e58 <vl53l5cx_get_result>
 8003ba8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <VL53L5CX_Start>:
  * @param pObj    vl53l5cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Start(VL53L5CX_Object_t *pObj, uint32_t Mode)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <VL53L5CX_Start+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003bc4:	f06f 0301 	mvn.w	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	e04c      	b.n	8003c66 <VL53L5CX_Start+0xb2>
  }
  else if (vl53l5cx_start_ranging(&pObj->Dev) == VL53L5CX_STATUS_OK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3318      	adds	r3, #24
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe fb23 	bl	800221c <vl53l5cx_start_ranging>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d141      	bne.n	8003c60 <VL53L5CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L5CX_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d82f      	bhi.n	8003c50 <VL53L5CX_Start+0x9c>
 8003bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf8 <VL53L5CX_Start+0x44>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003c1b 	.word	0x08003c1b
 8003c00:	08003c2d 	.word	0x08003c2d
 8003c04:	08003c3f 	.word	0x08003c3f
    {
      case VL53L5CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8003c18:	e025      	b.n	8003c66 <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8003c2a:	e01c      	b.n	8003c66 <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8003c3c:	e013      	b.n	8003c66 <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8003c4e:	e00a      	b.n	8003c66 <VL53L5CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
        ret = VL53L5CX_INVALID_PARAM;
 8003c58:	f06f 0301 	mvn.w	r3, #1
 8003c5c:	60fb      	str	r3, [r7, #12]
        break;
 8003c5e:	e002      	b.n	8003c66 <VL53L5CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L5CX_ERROR;
 8003c60:	f04f 33ff 	mov.w	r3, #4294967295
 8003c64:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c66:	68fb      	ldr	r3, [r7, #12]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <VL53L5CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Stop(VL53L5CX_Object_t *pObj)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d103      	bne.n	8003c86 <VL53L5CX_Stop+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003c7e:	f06f 0301 	mvn.w	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	e01a      	b.n	8003cbc <VL53L5CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <VL53L5CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L5CX_ERROR;
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	e011      	b.n	8003cbc <VL53L5CX_Stop+0x4c>
  }
  else if (vl53l5cx_stop_ranging(&pObj->Dev) == VL53L5CX_STATUS_OK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fe fc37 	bl	8002510 <vl53l5cx_stop_ranging>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d106      	bne.n	8003cb6 <VL53L5CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L5CX_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e002      	b.n	8003cbc <VL53L5CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L5CX_ERROR;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cba:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <VL53L5CX_SetAddress>:
  * @param pObj    vl53l5cx context object.
  * @param Address     New I2C address.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_SetAddress(VL53L5CX_Object_t *pObj, uint32_t Address)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <VL53L5CX_SetAddress+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003cd6:	f06f 0301 	mvn.w	r3, #1
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e015      	b.n	8003d0a <VL53L5CX_SetAddress+0x44>
  }
  else if (vl53l5cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L5CX_STATUS_OK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3318      	adds	r3, #24
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe f99f 	bl	800202c <vl53l5cx_set_i2c_address>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <VL53L5CX_SetAddress+0x36>
  {
    ret = VL53L5CX_ERROR;
 8003cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	e006      	b.n	8003d0a <VL53L5CX_SetAddress+0x44>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	811a      	strh	r2, [r3, #8]
    ret = VL53L5CX_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <VL53L5CX_GetAddress>:
  * @param pObj    vl53l5cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetAddress(VL53L5CX_Object_t *pObj, uint32_t *pAddress)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <VL53L5CX_GetAddress+0x16>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d103      	bne.n	8003d32 <VL53L5CX_GetAddress+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003d2a:	f06f 0301 	mvn.w	r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	e006      	b.n	8003d40 <VL53L5CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	891b      	ldrh	r3, [r3, #8]
 8003d36:	461a      	mov	r2, r3
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003d40:	68fb      	ldr	r3, [r7, #12]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <VL53L5CX_SetPowerMode>:
  * @param pObj    vl53l5cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_SetPowerMode(VL53L5CX_Object_t *pObj, uint32_t PowerMode)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d103      	bne.n	8003d66 <VL53L5CX_SetPowerMode+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003d5e:	f06f 0301 	mvn.w	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	e01a      	b.n	8003d9c <VL53L5CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L5CX_POWER_MODE_SLEEP) &&
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d006      	beq.n	8003d7a <VL53L5CX_SetPowerMode+0x2c>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d003      	beq.n	8003d7a <VL53L5CX_SetPowerMode+0x2c>
           (PowerMode != VL53L5CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003d72:	f06f 0301 	mvn.w	r3, #1
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	e010      	b.n	8003d9c <VL53L5CX_SetPowerMode+0x4e>
  }
  else if (vl53l5cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L5CX_STATUS_OK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3318      	adds	r3, #24
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe f9ca 	bl	800211e <vl53l5cx_set_power_mode>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <VL53L5CX_SetPowerMode+0x4a>
  {
    ret = VL53L5CX_ERROR;
 8003d90:	f04f 33ff 	mov.w	r3, #4294967295
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	e001      	b.n	8003d9c <VL53L5CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L5CX_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <VL53L5CX_GetPowerMode>:
  * @param pObj    vl53l5cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetPowerMode(VL53L5CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <VL53L5CX_GetPowerMode+0x16>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d103      	bne.n	8003dc4 <VL53L5CX_GetPowerMode+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003dbc:	f06f 0301 	mvn.w	r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	e017      	b.n	8003df4 <VL53L5CX_GetPowerMode+0x4e>
  }
  else if (vl53l5cx_get_power_mode(&pObj->Dev, &powermode) != VL53L5CX_STATUS_OK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3318      	adds	r3, #24
 8003dc8:	f107 020b 	add.w	r2, r7, #11
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe f962 	bl	8002098 <vl53l5cx_get_power_mode>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d006      	beq.n	8003de8 <VL53L5CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_ERROR;
 8003de0:	f04f 33ff 	mov.w	r3, #4294967295
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	e005      	b.n	8003df4 <VL53L5CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 8003de8:	7afb      	ldrb	r3, [r7, #11]
 8003dea:	461a      	mov	r2, r3
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003df4:	68fb      	ldr	r3, [r7, #12]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <vl53l5cx_poll_for_measurement>:

/** @defgroup VL53L5CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l5cx_poll_for_measurement(VL53L5CX_Object_t *pObj, uint32_t Timeout)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]

  ret =  VL53L5CX_TIMEOUT;
 8003e0c:	f06f 0302 	mvn.w	r3, #2
 8003e10:	617b      	str	r3, [r7, #20]
  TickStart = pObj->IO.GetTick();
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4798      	blx	r3
 8003e18:	4603      	mov	r3, r0
 8003e1a:	613b      	str	r3, [r7, #16]

  do
  {
    (void)vl53l5cx_check_data_ready(&pObj->Dev, &NewDataReady);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3318      	adds	r3, #24
 8003e20:	f107 020f 	add.w	r2, r7, #15
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fc42 	bl	80026b0 <vl53l5cx_check_data_ready>

    if (NewDataReady == 1U)
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <vl53l5cx_poll_for_measurement+0x3a>
    {
      ret = VL53L5CX_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
      break;
 8003e36:	e009      	b.n	8003e4c <vl53l5cx_poll_for_measurement+0x4e>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	4798      	blx	r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	461a      	mov	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d8e7      	bhi.n	8003e1c <vl53l5cx_poll_for_measurement+0x1e>

  return ret;
 8003e4c:	697b      	ldr	r3, [r7, #20]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <vl53l5cx_get_result>:

static int32_t vl53l5cx_get_result(VL53L5CX_Object_t *pObj, VL53L5CX_Result_t *pResult)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L5CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <vl53l5cx_get_result+0x16>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d103      	bne.n	8003e76 <vl53l5cx_get_result+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003e6e:	f06f 0301 	mvn.w	r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e0cf      	b.n	8004016 <vl53l5cx_get_result+0x1be>
  }
  else if (vl53l5cx_get_resolution(&pObj->Dev, &resolution) != VL53L5CX_STATUS_OK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3318      	adds	r3, #24
 8003e7a:	f107 0208 	add.w	r2, r7, #8
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe fe7f 	bl	8002b84 <vl53l5cx_get_resolution>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <vl53l5cx_get_result+0x3c>
  {
    ret = VL53L5CX_ERROR;
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	e0c0      	b.n	8004016 <vl53l5cx_get_result+0x1be>
  }
  else if (vl53l5cx_get_ranging_data(&pObj->Dev, &data) != VL53L5CX_STATUS_OK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3318      	adds	r3, #24
 8003e98:	4961      	ldr	r1, [pc, #388]	@ (8004020 <vl53l5cx_get_result+0x1c8>)
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe fc58 	bl	8002750 <vl53l5cx_get_ranging_data>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <vl53l5cx_get_result+0x56>
  {
    ret = VL53L5CX_ERROR;
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e0b3      	b.n	8004016 <vl53l5cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 8003eae:	7a3b      	ldrb	r3, [r7, #8]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	72fb      	strb	r3, [r7, #11]
 8003eba:	e0a5      	b.n	8004008 <vl53l5cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 8003ebc:	7afb      	ldrb	r3, [r7, #11]
 8003ebe:	7afa      	ldrb	r2, [r7, #11]
 8003ec0:	4957      	ldr	r1, [pc, #348]	@ (8004020 <vl53l5cx_get_result+0x1c8>)
 8003ec2:	440b      	add	r3, r1
 8003ec4:	f893 0104 	ldrb.w	r0, [r3, #260]	@ 0x104
 8003ec8:	6839      	ldr	r1, [r7, #0]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	72bb      	strb	r3, [r7, #10]
 8003ede:	e087      	b.n	8003ff0 <vl53l5cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8003ee0:	7afa      	ldrb	r2, [r7, #11]
 8003ee2:	7abb      	ldrb	r3, [r7, #10]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	4a4e      	ldr	r2, [pc, #312]	@ (8004020 <vl53l5cx_get_result+0x1c8>)
 8003ee8:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ef4:	7afa      	ldrb	r2, [r7, #11]
 8003ef6:	7ab8      	ldrb	r0, [r7, #10]
 8003ef8:	461c      	mov	r4, r3
 8003efa:	6839      	ldr	r1, [r7, #0]
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	4403      	add	r3, r0
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3adc 	ldrb.w	r3, [r3, #2780]	@ 0xadc
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d116      	bne.n	8003f42 <vl53l5cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 8003f14:	7afb      	ldrb	r3, [r7, #11]
 8003f16:	4a42      	ldr	r2, [pc, #264]	@ (8004020 <vl53l5cx_get_result+0x1c8>)
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	7afa      	ldrb	r2, [r7, #11]
 8003f20:	7ab8      	ldrb	r0, [r7, #10]
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2a:	6839      	ldr	r1, [r7, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	4403      	add	r3, r0
 8003f34:	3302      	adds	r3, #2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	edc3 7a00 	vstr	s15, [r3]
 8003f40:	e00d      	b.n	8003f5e <vl53l5cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8003f42:	7afa      	ldrb	r2, [r7, #11]
 8003f44:	7ab8      	ldrb	r0, [r7, #10]
 8003f46:	6839      	ldr	r1, [r7, #0]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	4403      	add	r3, r0
 8003f50:	3302      	adds	r3, #2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	3308      	adds	r3, #8
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3add 	ldrb.w	r3, [r3, #2781]	@ 0xadd
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d119      	bne.n	8003f9c <vl53l5cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8003f68:	7afa      	ldrb	r2, [r7, #11]
 8003f6a:	7abb      	ldrb	r3, [r7, #10]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8004020 <vl53l5cx_get_result+0x1c8>)
 8003f70:	3390      	adds	r3, #144	@ 0x90
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 8003f78:	7afa      	ldrb	r2, [r7, #11]
 8003f7a:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 8003f84:	6839      	ldr	r1, [r7, #0]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	4403      	add	r3, r0
 8003f8e:	3304      	adds	r3, #4
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	3304      	adds	r3, #4
 8003f96:	edc3 7a00 	vstr	s15, [r3]
 8003f9a:	e00d      	b.n	8003fb8 <vl53l5cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8003f9c:	7afa      	ldrb	r2, [r7, #11]
 8003f9e:	7ab8      	ldrb	r0, [r7, #10]
 8003fa0:	6839      	ldr	r1, [r7, #0]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4403      	add	r3, r0
 8003faa:	3304      	adds	r3, #4
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8003fb8:	7afa      	ldrb	r2, [r7, #11]
 8003fba:	7abb      	ldrb	r3, [r7, #10]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	4a18      	ldr	r2, [pc, #96]	@ (8004020 <vl53l5cx_get_result+0x1c8>)
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f893 3484 	ldrb.w	r3, [r3, #1156]	@ 0x484
 8003fc6:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l5cx_map_target_status(target_status);
 8003fc8:	7a7b      	ldrb	r3, [r7, #9]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f82a 	bl	8004024 <vl53l5cx_map_target_status>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	7afa      	ldrb	r2, [r7, #11]
 8003fd4:	7ab8      	ldrb	r0, [r7, #10]
 8003fd6:	461c      	mov	r4, r3
 8003fd8:	6839      	ldr	r1, [r7, #0]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	4403      	add	r3, r0
 8003fe2:	3302      	adds	r3, #2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 8003fea:	7abb      	ldrb	r3, [r7, #10]
 8003fec:	3301      	adds	r3, #1
 8003fee:	72bb      	strb	r3, [r7, #10]
 8003ff0:	7afb      	ldrb	r3, [r7, #11]
 8003ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8004020 <vl53l5cx_get_result+0x1c8>)
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8003ffa:	7aba      	ldrb	r2, [r7, #10]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	f4ff af6f 	bcc.w	8003ee0 <vl53l5cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 8004002:	7afb      	ldrb	r3, [r7, #11]
 8004004:	3301      	adds	r3, #1
 8004006:	72fb      	strb	r3, [r7, #11]
 8004008:	7a3b      	ldrb	r3, [r7, #8]
 800400a:	7afa      	ldrb	r2, [r7, #11]
 800400c:	429a      	cmp	r2, r3
 800400e:	f4ff af55 	bcc.w	8003ebc <vl53l5cx_get_result+0x64>
      }
    }

    ret = VL53L5CX_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004016:	68fb      	ldr	r3, [r7, #12]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	bd90      	pop	{r4, r7, pc}
 8004020:	200024e4 	.word	0x200024e4

08004024 <vl53l5cx_map_target_status>:

static uint8_t vl53l5cx_map_target_status(uint8_t status)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	2b05      	cmp	r3, #5
 8004032:	d002      	beq.n	800403a <vl53l5cx_map_target_status+0x16>
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	2b09      	cmp	r3, #9
 8004038:	d102      	bne.n	8004040 <vl53l5cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
 800403e:	e007      	b.n	8004050 <vl53l5cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d102      	bne.n	800404c <vl53l5cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 8004046:	23ff      	movs	r3, #255	@ 0xff
 8004048:	73fb      	strb	r3, [r7, #15]
 800404a:	e001      	b.n	8004050 <vl53l5cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	460a      	mov	r2, r1
 800406a:	71fb      	strb	r3, [r7, #7]
 800406c:	4613      	mov	r3, r2
 800406e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	4a1f      	ldr	r2, [pc, #124]	@ (80040f4 <BSP_PB_Init+0x94>)
 8004078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800407e:	79bb      	ldrb	r3, [r7, #6]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d132      	bne.n	80040ea <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4a1b      	ldr	r2, [pc, #108]	@ (80040f8 <BSP_PB_Init+0x98>)
 800408a:	441a      	add	r2, r3
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	491b      	ldr	r1, [pc, #108]	@ (80040fc <BSP_PB_Init+0x9c>)
 8004090:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f000 fb0d 	bl	80046b6 <HAL_EXTI_GetHandle>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80040a2:	f06f 0303 	mvn.w	r3, #3
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	e01f      	b.n	80040ea <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4a12      	ldr	r2, [pc, #72]	@ (80040f8 <BSP_PB_Init+0x98>)
 80040b0:	1898      	adds	r0, r3, r2
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	4a12      	ldr	r2, [pc, #72]	@ (8004100 <BSP_PB_Init+0xa0>)
 80040b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ba:	461a      	mov	r2, r3
 80040bc:	2100      	movs	r1, #0
 80040be:	f000 fae0 	bl	8004682 <HAL_EXTI_RegisterCallback>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80040c8:	f06f 0303 	mvn.w	r3, #3
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	e00c      	b.n	80040ea <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80040d0:	2028      	movs	r0, #40	@ 0x28
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004104 <BSP_PB_Init+0xa4>)
 80040d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040da:	2200      	movs	r2, #0
 80040dc:	4619      	mov	r1, r3
 80040de:	f000 fa9a 	bl	8004616 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80040e2:	2328      	movs	r3, #40	@ 0x28
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fab2 	bl	800464e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 80040ea:	68fb      	ldr	r3, [r7, #12]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	0801de80 	.word	0x0801de80
 80040f8:	2000003c 	.word	0x2000003c
 80040fc:	0801de84 	.word	0x0801de84
 8004100:	0801de88 	.word	0x0801de88
 8004104:	0801de8c 	.word	0x0801de8c

08004108 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800410c:	2000      	movs	r0, #0
 800410e:	f003 fa33 	bl	8007578 <BSP_PB_Callback>
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	4b1a      	ldr	r3, [pc, #104]	@ (800418c <BUTTON_USER_GPIO_Init+0x74>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	4a19      	ldr	r2, [pc, #100]	@ (800418c <BUTTON_USER_GPIO_Init+0x74>)
 8004128:	f043 0304 	orr.w	r3, r3, #4
 800412c:	6313      	str	r3, [r2, #48]	@ 0x30
 800412e:	4b17      	ldr	r3, [pc, #92]	@ (800418c <BUTTON_USER_GPIO_Init+0x74>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800413a:	f107 030c 	add.w	r3, r7, #12
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	609a      	str	r2, [r3, #8]
 8004146:	60da      	str	r2, [r3, #12]
 8004148:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	4b0f      	ldr	r3, [pc, #60]	@ (800418c <BUTTON_USER_GPIO_Init+0x74>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004152:	4a0e      	ldr	r2, [pc, #56]	@ (800418c <BUTTON_USER_GPIO_Init+0x74>)
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	6313      	str	r3, [r2, #48]	@ 0x30
 800415a:	4b0c      	ldr	r3, [pc, #48]	@ (800418c <BUTTON_USER_GPIO_Init+0x74>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	607b      	str	r3, [r7, #4]
 8004164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8004166:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800416a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800416c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8004176:	f107 030c 	add.w	r3, r7, #12
 800417a:	4619      	mov	r1, r3
 800417c:	4804      	ldr	r0, [pc, #16]	@ (8004190 <BUTTON_USER_GPIO_Init+0x78>)
 800417e:	f000 faaf 	bl	80046e0 <HAL_GPIO_Init>

}
 8004182:	bf00      	nop
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800
 8004190:	40020800 	.word	0x40020800

08004194 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d903      	bls.n	80041b0 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80041a8:	f06f 0301 	mvn.w	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e025      	b.n	80041fc <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80041b0:	79fb      	ldrb	r3, [r7, #7]
 80041b2:	79fa      	ldrb	r2, [r7, #7]
 80041b4:	4914      	ldr	r1, [pc, #80]	@ (8004208 <BSP_COM_Init+0x74>)
 80041b6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80041ba:	4814      	ldr	r0, [pc, #80]	@ (800420c <BSP_COM_Init+0x78>)
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4413      	add	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4403      	add	r3, r0
 80041c6:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 80041c8:	79fa      	ldrb	r2, [r7, #7]
 80041ca:	4613      	mov	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	4413      	add	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4a0e      	ldr	r2, [pc, #56]	@ (800420c <BSP_COM_Init+0x78>)
 80041d4:	4413      	add	r3, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f864 	bl	80042a4 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80041dc:	79fa      	ldrb	r2, [r7, #7]
 80041de:	4613      	mov	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4413      	add	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4a09      	ldr	r2, [pc, #36]	@ (800420c <BSP_COM_Init+0x78>)
 80041e8:	4413      	add	r3, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f810 	bl	8004210 <MX_USART2_UART_Init>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80041f6:	f06f 0303 	mvn.w	r3, #3
 80041fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80041fc:	68fb      	ldr	r3, [r7, #12]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000044 	.word	0x20000044
 800420c:	20002a34 	.word	0x20002a34

08004210 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a12      	ldr	r2, [pc, #72]	@ (8004268 <MX_USART2_UART_Init+0x58>)
 8004220:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004228:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	220c      	movs	r2, #12
 8004240:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f002 f9fa 	bl	8006648 <HAL_UART_Init>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40004400 	.word	0x40004400

0800426c <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8004274:	4b09      	ldr	r3, [pc, #36]	@ (800429c <__io_putchar+0x30>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	4613      	mov	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4413      	add	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4a07      	ldr	r2, [pc, #28]	@ (80042a0 <__io_putchar+0x34>)
 8004284:	1898      	adds	r0, r3, r2
 8004286:	1d39      	adds	r1, r7, #4
 8004288:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800428c:	2201      	movs	r2, #1
 800428e:	f002 fa35 	bl	80066fc <HAL_UART_Transmit>
  return ch;
 8004292:	687b      	ldr	r3, [r7, #4]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20002a7c 	.word	0x20002a7c
 80042a0:	20002a34 	.word	0x20002a34

080042a4 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08a      	sub	sp, #40	@ 0x28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80042ac:	2300      	movs	r3, #0
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	4b1e      	ldr	r3, [pc, #120]	@ (800432c <USART2_MspInit+0x88>)
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	4a1d      	ldr	r2, [pc, #116]	@ (800432c <USART2_MspInit+0x88>)
 80042b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80042bc:	4b1b      	ldr	r3, [pc, #108]	@ (800432c <USART2_MspInit+0x88>)
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	4b17      	ldr	r3, [pc, #92]	@ (800432c <USART2_MspInit+0x88>)
 80042ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d0:	4a16      	ldr	r2, [pc, #88]	@ (800432c <USART2_MspInit+0x88>)
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80042d8:	4b14      	ldr	r3, [pc, #80]	@ (800432c <USART2_MspInit+0x88>)
 80042da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80042e4:	2304      	movs	r3, #4
 80042e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e8:	2302      	movs	r3, #2
 80042ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f0:	2300      	movs	r3, #0
 80042f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80042f4:	2307      	movs	r3, #7
 80042f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80042f8:	f107 0314 	add.w	r3, r7, #20
 80042fc:	4619      	mov	r1, r3
 80042fe:	480c      	ldr	r0, [pc, #48]	@ (8004330 <USART2_MspInit+0x8c>)
 8004300:	f000 f9ee 	bl	80046e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8004304:	2308      	movs	r3, #8
 8004306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004308:	2302      	movs	r3, #2
 800430a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430c:	2300      	movs	r3, #0
 800430e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004310:	2300      	movs	r3, #0
 8004312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8004314:	2307      	movs	r3, #7
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	4619      	mov	r1, r3
 800431e:	4804      	ldr	r0, [pc, #16]	@ (8004330 <USART2_MspInit+0x8c>)
 8004320:	f000 f9de 	bl	80046e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8004324:	bf00      	nop
 8004326:	3728      	adds	r7, #40	@ 0x28
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	40020000 	.word	0x40020000

08004334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004338:	4b0e      	ldr	r3, [pc, #56]	@ (8004374 <HAL_Init+0x40>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a0d      	ldr	r2, [pc, #52]	@ (8004374 <HAL_Init+0x40>)
 800433e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004344:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <HAL_Init+0x40>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a0a      	ldr	r2, [pc, #40]	@ (8004374 <HAL_Init+0x40>)
 800434a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800434e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004350:	4b08      	ldr	r3, [pc, #32]	@ (8004374 <HAL_Init+0x40>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a07      	ldr	r2, [pc, #28]	@ (8004374 <HAL_Init+0x40>)
 8004356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800435a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800435c:	2003      	movs	r0, #3
 800435e:	f000 f94f 	bl	8004600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004362:	2000      	movs	r0, #0
 8004364:	f000 f808 	bl	8004378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004368:	f7fc fa1e 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40023c00 	.word	0x40023c00

08004378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004380:	4b12      	ldr	r3, [pc, #72]	@ (80043cc <HAL_InitTick+0x54>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b12      	ldr	r3, [pc, #72]	@ (80043d0 <HAL_InitTick+0x58>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	4619      	mov	r1, r3
 800438a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800438e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f967 	bl	800466a <HAL_SYSTICK_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e00e      	b.n	80043c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b0f      	cmp	r3, #15
 80043aa:	d80a      	bhi.n	80043c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043ac:	2200      	movs	r2, #0
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	f000 f92f 	bl	8004616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043b8:	4a06      	ldr	r2, [pc, #24]	@ (80043d4 <HAL_InitTick+0x5c>)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000000 	.word	0x20000000
 80043d0:	2000004c 	.word	0x2000004c
 80043d4:	20000048 	.word	0x20000048

080043d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043dc:	4b06      	ldr	r3, [pc, #24]	@ (80043f8 <HAL_IncTick+0x20>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	4b06      	ldr	r3, [pc, #24]	@ (80043fc <HAL_IncTick+0x24>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4413      	add	r3, r2
 80043e8:	4a04      	ldr	r2, [pc, #16]	@ (80043fc <HAL_IncTick+0x24>)
 80043ea:	6013      	str	r3, [r2, #0]
}
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	2000004c 	.word	0x2000004c
 80043fc:	20002a80 	.word	0x20002a80

08004400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return uwTick;
 8004404:	4b03      	ldr	r3, [pc, #12]	@ (8004414 <HAL_GetTick+0x14>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20002a80 	.word	0x20002a80

08004418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004420:	f7ff ffee 	bl	8004400 <HAL_GetTick>
 8004424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004430:	d005      	beq.n	800443e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004432:	4b0a      	ldr	r3, [pc, #40]	@ (800445c <HAL_Delay+0x44>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4413      	add	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800443e:	bf00      	nop
 8004440:	f7ff ffde 	bl	8004400 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	429a      	cmp	r2, r3
 800444e:	d8f7      	bhi.n	8004440 <HAL_Delay+0x28>
  {
  }
}
 8004450:	bf00      	nop
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	2000004c 	.word	0x2000004c

08004460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004470:	4b0c      	ldr	r3, [pc, #48]	@ (80044a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800447c:	4013      	ands	r3, r2
 800447e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004488:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800448c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004492:	4a04      	ldr	r2, [pc, #16]	@ (80044a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	60d3      	str	r3, [r2, #12]
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	e000ed00 	.word	0xe000ed00

080044a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044ac:	4b04      	ldr	r3, [pc, #16]	@ (80044c0 <__NVIC_GetPriorityGrouping+0x18>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	0a1b      	lsrs	r3, r3, #8
 80044b2:	f003 0307 	and.w	r3, r3, #7
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	db0b      	blt.n	80044ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	f003 021f 	and.w	r2, r3, #31
 80044dc:	4907      	ldr	r1, [pc, #28]	@ (80044fc <__NVIC_EnableIRQ+0x38>)
 80044de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	2001      	movs	r0, #1
 80044e6:	fa00 f202 	lsl.w	r2, r0, r2
 80044ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	e000e100 	.word	0xe000e100

08004500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	6039      	str	r1, [r7, #0]
 800450a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800450c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004510:	2b00      	cmp	r3, #0
 8004512:	db0a      	blt.n	800452a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	b2da      	uxtb	r2, r3
 8004518:	490c      	ldr	r1, [pc, #48]	@ (800454c <__NVIC_SetPriority+0x4c>)
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	0112      	lsls	r2, r2, #4
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	440b      	add	r3, r1
 8004524:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004528:	e00a      	b.n	8004540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	4908      	ldr	r1, [pc, #32]	@ (8004550 <__NVIC_SetPriority+0x50>)
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	3b04      	subs	r3, #4
 8004538:	0112      	lsls	r2, r2, #4
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	440b      	add	r3, r1
 800453e:	761a      	strb	r2, [r3, #24]
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	e000e100 	.word	0xe000e100
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004554:	b480      	push	{r7}
 8004556:	b089      	sub	sp, #36	@ 0x24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f1c3 0307 	rsb	r3, r3, #7
 800456e:	2b04      	cmp	r3, #4
 8004570:	bf28      	it	cs
 8004572:	2304      	movcs	r3, #4
 8004574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	3304      	adds	r3, #4
 800457a:	2b06      	cmp	r3, #6
 800457c:	d902      	bls.n	8004584 <NVIC_EncodePriority+0x30>
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	3b03      	subs	r3, #3
 8004582:	e000      	b.n	8004586 <NVIC_EncodePriority+0x32>
 8004584:	2300      	movs	r3, #0
 8004586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004588:	f04f 32ff 	mov.w	r2, #4294967295
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43da      	mvns	r2, r3
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	401a      	ands	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800459c:	f04f 31ff 	mov.w	r1, #4294967295
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	fa01 f303 	lsl.w	r3, r1, r3
 80045a6:	43d9      	mvns	r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ac:	4313      	orrs	r3, r2
         );
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3724      	adds	r7, #36	@ 0x24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045cc:	d301      	bcc.n	80045d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ce:	2301      	movs	r3, #1
 80045d0:	e00f      	b.n	80045f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045d2:	4a0a      	ldr	r2, [pc, #40]	@ (80045fc <SysTick_Config+0x40>)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045da:	210f      	movs	r1, #15
 80045dc:	f04f 30ff 	mov.w	r0, #4294967295
 80045e0:	f7ff ff8e 	bl	8004500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045e4:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <SysTick_Config+0x40>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ea:	4b04      	ldr	r3, [pc, #16]	@ (80045fc <SysTick_Config+0x40>)
 80045ec:	2207      	movs	r2, #7
 80045ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	e000e010 	.word	0xe000e010

08004600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff ff29 	bl	8004460 <__NVIC_SetPriorityGrouping>
}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004616:	b580      	push	{r7, lr}
 8004618:	b086      	sub	sp, #24
 800461a:	af00      	add	r7, sp, #0
 800461c:	4603      	mov	r3, r0
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004628:	f7ff ff3e 	bl	80044a8 <__NVIC_GetPriorityGrouping>
 800462c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	6978      	ldr	r0, [r7, #20]
 8004634:	f7ff ff8e 	bl	8004554 <NVIC_EncodePriority>
 8004638:	4602      	mov	r2, r0
 800463a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff ff5d 	bl	8004500 <__NVIC_SetPriority>
}
 8004646:	bf00      	nop
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	4603      	mov	r3, r0
 8004656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff ff31 	bl	80044c4 <__NVIC_EnableIRQ>
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff ffa2 	bl	80045bc <SysTick_Config>
 8004678:	4603      	mov	r3, r0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004682:	b480      	push	{r7}
 8004684:	b087      	sub	sp, #28
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	460b      	mov	r3, r1
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004694:	7afb      	ldrb	r3, [r7, #11]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d103      	bne.n	80046a2 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	605a      	str	r2, [r3, #4]
      break;
 80046a0:	e002      	b.n	80046a8 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	75fb      	strb	r3, [r7, #23]
      break;
 80046a6:	bf00      	nop
  }

  return status;
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e003      	b.n	80046d2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80046d0:	2300      	movs	r3, #0
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b089      	sub	sp, #36	@ 0x24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	e159      	b.n	80049b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046fc:	2201      	movs	r2, #1
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4013      	ands	r3, r2
 800470e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	429a      	cmp	r2, r3
 8004716:	f040 8148 	bne.w	80049aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d005      	beq.n	8004732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800472e:	2b02      	cmp	r3, #2
 8004730:	d130      	bne.n	8004794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	2203      	movs	r2, #3
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004768:	2201      	movs	r2, #1
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	f003 0201 	and.w	r2, r3, #1
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4313      	orrs	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	2b03      	cmp	r3, #3
 800479e:	d017      	beq.n	80047d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	2203      	movs	r2, #3
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4013      	ands	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d123      	bne.n	8004824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	08da      	lsrs	r2, r3, #3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3208      	adds	r2, #8
 80047e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	220f      	movs	r2, #15
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4313      	orrs	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	08da      	lsrs	r2, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3208      	adds	r2, #8
 800481e:	69b9      	ldr	r1, [r7, #24]
 8004820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	2203      	movs	r2, #3
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 0203 	and.w	r2, r3, #3
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80a2 	beq.w	80049aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	4b57      	ldr	r3, [pc, #348]	@ (80049c8 <HAL_GPIO_Init+0x2e8>)
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	4a56      	ldr	r2, [pc, #344]	@ (80049c8 <HAL_GPIO_Init+0x2e8>)
 8004870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004874:	6453      	str	r3, [r2, #68]	@ 0x44
 8004876:	4b54      	ldr	r3, [pc, #336]	@ (80049c8 <HAL_GPIO_Init+0x2e8>)
 8004878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004882:	4a52      	ldr	r2, [pc, #328]	@ (80049cc <HAL_GPIO_Init+0x2ec>)
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	089b      	lsrs	r3, r3, #2
 8004888:	3302      	adds	r3, #2
 800488a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	220f      	movs	r2, #15
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43db      	mvns	r3, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4013      	ands	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a49      	ldr	r2, [pc, #292]	@ (80049d0 <HAL_GPIO_Init+0x2f0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d019      	beq.n	80048e2 <HAL_GPIO_Init+0x202>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a48      	ldr	r2, [pc, #288]	@ (80049d4 <HAL_GPIO_Init+0x2f4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <HAL_GPIO_Init+0x1fe>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a47      	ldr	r2, [pc, #284]	@ (80049d8 <HAL_GPIO_Init+0x2f8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00d      	beq.n	80048da <HAL_GPIO_Init+0x1fa>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a46      	ldr	r2, [pc, #280]	@ (80049dc <HAL_GPIO_Init+0x2fc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <HAL_GPIO_Init+0x1f6>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a45      	ldr	r2, [pc, #276]	@ (80049e0 <HAL_GPIO_Init+0x300>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <HAL_GPIO_Init+0x1f2>
 80048ce:	2304      	movs	r3, #4
 80048d0:	e008      	b.n	80048e4 <HAL_GPIO_Init+0x204>
 80048d2:	2307      	movs	r3, #7
 80048d4:	e006      	b.n	80048e4 <HAL_GPIO_Init+0x204>
 80048d6:	2303      	movs	r3, #3
 80048d8:	e004      	b.n	80048e4 <HAL_GPIO_Init+0x204>
 80048da:	2302      	movs	r3, #2
 80048dc:	e002      	b.n	80048e4 <HAL_GPIO_Init+0x204>
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <HAL_GPIO_Init+0x204>
 80048e2:	2300      	movs	r3, #0
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	f002 0203 	and.w	r2, r2, #3
 80048ea:	0092      	lsls	r2, r2, #2
 80048ec:	4093      	lsls	r3, r2
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048f4:	4935      	ldr	r1, [pc, #212]	@ (80049cc <HAL_GPIO_Init+0x2ec>)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	089b      	lsrs	r3, r3, #2
 80048fa:	3302      	adds	r3, #2
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004902:	4b38      	ldr	r3, [pc, #224]	@ (80049e4 <HAL_GPIO_Init+0x304>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	43db      	mvns	r3, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4013      	ands	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004926:	4a2f      	ldr	r2, [pc, #188]	@ (80049e4 <HAL_GPIO_Init+0x304>)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800492c:	4b2d      	ldr	r3, [pc, #180]	@ (80049e4 <HAL_GPIO_Init+0x304>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	43db      	mvns	r3, r3
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	4013      	ands	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004950:	4a24      	ldr	r2, [pc, #144]	@ (80049e4 <HAL_GPIO_Init+0x304>)
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004956:	4b23      	ldr	r3, [pc, #140]	@ (80049e4 <HAL_GPIO_Init+0x304>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	43db      	mvns	r3, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4013      	ands	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800497a:	4a1a      	ldr	r2, [pc, #104]	@ (80049e4 <HAL_GPIO_Init+0x304>)
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004980:	4b18      	ldr	r3, [pc, #96]	@ (80049e4 <HAL_GPIO_Init+0x304>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	43db      	mvns	r3, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4013      	ands	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049a4:	4a0f      	ldr	r2, [pc, #60]	@ (80049e4 <HAL_GPIO_Init+0x304>)
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3301      	adds	r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	2b0f      	cmp	r3, #15
 80049b4:	f67f aea2 	bls.w	80046fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	3724      	adds	r7, #36	@ 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40023800 	.word	0x40023800
 80049cc:	40013800 	.word	0x40013800
 80049d0:	40020000 	.word	0x40020000
 80049d4:	40020400 	.word	0x40020400
 80049d8:	40020800 	.word	0x40020800
 80049dc:	40020c00 	.word	0x40020c00
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40013c00 	.word	0x40013c00

080049e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	e0bb      	b.n	8004b7c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a04:	2201      	movs	r2, #1
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4013      	ands	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	f040 80ab 	bne.w	8004b76 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a20:	4a5c      	ldr	r2, [pc, #368]	@ (8004b94 <HAL_GPIO_DeInit+0x1ac>)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	089b      	lsrs	r3, r3, #2
 8004a26:	3302      	adds	r3, #2
 8004a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	220f      	movs	r2, #15
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a54      	ldr	r2, [pc, #336]	@ (8004b98 <HAL_GPIO_DeInit+0x1b0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d019      	beq.n	8004a7e <HAL_GPIO_DeInit+0x96>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a53      	ldr	r2, [pc, #332]	@ (8004b9c <HAL_GPIO_DeInit+0x1b4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <HAL_GPIO_DeInit+0x92>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a52      	ldr	r2, [pc, #328]	@ (8004ba0 <HAL_GPIO_DeInit+0x1b8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00d      	beq.n	8004a76 <HAL_GPIO_DeInit+0x8e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a51      	ldr	r2, [pc, #324]	@ (8004ba4 <HAL_GPIO_DeInit+0x1bc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d007      	beq.n	8004a72 <HAL_GPIO_DeInit+0x8a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a50      	ldr	r2, [pc, #320]	@ (8004ba8 <HAL_GPIO_DeInit+0x1c0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d101      	bne.n	8004a6e <HAL_GPIO_DeInit+0x86>
 8004a6a:	2304      	movs	r3, #4
 8004a6c:	e008      	b.n	8004a80 <HAL_GPIO_DeInit+0x98>
 8004a6e:	2307      	movs	r3, #7
 8004a70:	e006      	b.n	8004a80 <HAL_GPIO_DeInit+0x98>
 8004a72:	2303      	movs	r3, #3
 8004a74:	e004      	b.n	8004a80 <HAL_GPIO_DeInit+0x98>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e002      	b.n	8004a80 <HAL_GPIO_DeInit+0x98>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <HAL_GPIO_DeInit+0x98>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	f002 0203 	and.w	r2, r2, #3
 8004a86:	0092      	lsls	r2, r2, #2
 8004a88:	4093      	lsls	r3, r2
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d132      	bne.n	8004af6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004a90:	4b46      	ldr	r3, [pc, #280]	@ (8004bac <HAL_GPIO_DeInit+0x1c4>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	43db      	mvns	r3, r3
 8004a98:	4944      	ldr	r1, [pc, #272]	@ (8004bac <HAL_GPIO_DeInit+0x1c4>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004a9e:	4b43      	ldr	r3, [pc, #268]	@ (8004bac <HAL_GPIO_DeInit+0x1c4>)
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	4941      	ldr	r1, [pc, #260]	@ (8004bac <HAL_GPIO_DeInit+0x1c4>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004aac:	4b3f      	ldr	r3, [pc, #252]	@ (8004bac <HAL_GPIO_DeInit+0x1c4>)
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	493d      	ldr	r1, [pc, #244]	@ (8004bac <HAL_GPIO_DeInit+0x1c4>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004aba:	4b3c      	ldr	r3, [pc, #240]	@ (8004bac <HAL_GPIO_DeInit+0x1c4>)
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	493a      	ldr	r1, [pc, #232]	@ (8004bac <HAL_GPIO_DeInit+0x1c4>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	220f      	movs	r2, #15
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8004b94 <HAL_GPIO_DeInit+0x1ac>)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	089b      	lsrs	r3, r3, #2
 8004ade:	3302      	adds	r3, #2
 8004ae0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	43da      	mvns	r2, r3
 8004ae8:	482a      	ldr	r0, [pc, #168]	@ (8004b94 <HAL_GPIO_DeInit+0x1ac>)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	089b      	lsrs	r3, r3, #2
 8004aee:	400a      	ands	r2, r1
 8004af0:	3302      	adds	r3, #2
 8004af2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	2103      	movs	r1, #3
 8004b00:	fa01 f303 	lsl.w	r3, r1, r3
 8004b04:	43db      	mvns	r3, r3
 8004b06:	401a      	ands	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	08da      	lsrs	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3208      	adds	r2, #8
 8004b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	220f      	movs	r2, #15
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	08d2      	lsrs	r2, r2, #3
 8004b2c:	4019      	ands	r1, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3208      	adds	r2, #8
 8004b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	2103      	movs	r1, #3
 8004b40:	fa01 f303 	lsl.w	r3, r1, r3
 8004b44:	43db      	mvns	r3, r3
 8004b46:	401a      	ands	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	2101      	movs	r1, #1
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	fa01 f303 	lsl.w	r3, r1, r3
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	2103      	movs	r1, #3
 8004b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	401a      	ands	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	f67f af40 	bls.w	8004a04 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40013800 	.word	0x40013800
 8004b98:	40020000 	.word	0x40020000
 8004b9c:	40020400 	.word	0x40020400
 8004ba0:	40020800 	.word	0x40020800
 8004ba4:	40020c00 	.word	0x40020c00
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40013c00 	.word	0x40013c00

08004bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	807b      	strh	r3, [r7, #2]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bc0:	787b      	ldrb	r3, [r7, #1]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bc6:	887a      	ldrh	r2, [r7, #2]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bcc:	e003      	b.n	8004bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bce:	887b      	ldrh	r3, [r7, #2]
 8004bd0:	041a      	lsls	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	619a      	str	r2, [r3, #24]
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
	...

08004be4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004bee:	4b08      	ldr	r3, [pc, #32]	@ (8004c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d006      	beq.n	8004c08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bfa:	4a05      	ldr	r2, [pc, #20]	@ (8004c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bfc:	88fb      	ldrh	r3, [r7, #6]
 8004bfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f002 fcc8 	bl	8007598 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c08:	bf00      	nop
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40013c00 	.word	0x40013c00

08004c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e12b      	b.n	8004e7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f95d 	bl	8004efa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2224      	movs	r2, #36	@ 0x24
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0201 	bic.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c78:	f001 fcbe 	bl	80065f8 <HAL_RCC_GetPCLK1Freq>
 8004c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4a81      	ldr	r2, [pc, #516]	@ (8004e88 <HAL_I2C_Init+0x274>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d807      	bhi.n	8004c98 <HAL_I2C_Init+0x84>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a80      	ldr	r2, [pc, #512]	@ (8004e8c <HAL_I2C_Init+0x278>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	bf94      	ite	ls
 8004c90:	2301      	movls	r3, #1
 8004c92:	2300      	movhi	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	e006      	b.n	8004ca6 <HAL_I2C_Init+0x92>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4a7d      	ldr	r2, [pc, #500]	@ (8004e90 <HAL_I2C_Init+0x27c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	bf94      	ite	ls
 8004ca0:	2301      	movls	r3, #1
 8004ca2:	2300      	movhi	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e0e7      	b.n	8004e7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4a78      	ldr	r2, [pc, #480]	@ (8004e94 <HAL_I2C_Init+0x280>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	0c9b      	lsrs	r3, r3, #18
 8004cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4a6a      	ldr	r2, [pc, #424]	@ (8004e88 <HAL_I2C_Init+0x274>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d802      	bhi.n	8004ce8 <HAL_I2C_Init+0xd4>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	e009      	b.n	8004cfc <HAL_I2C_Init+0xe8>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004cee:	fb02 f303 	mul.w	r3, r2, r3
 8004cf2:	4a69      	ldr	r2, [pc, #420]	@ (8004e98 <HAL_I2C_Init+0x284>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	099b      	lsrs	r3, r3, #6
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	430b      	orrs	r3, r1
 8004d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	495c      	ldr	r1, [pc, #368]	@ (8004e88 <HAL_I2C_Init+0x274>)
 8004d18:	428b      	cmp	r3, r1
 8004d1a:	d819      	bhi.n	8004d50 <HAL_I2C_Init+0x13c>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	1e59      	subs	r1, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d2a:	1c59      	adds	r1, r3, #1
 8004d2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d30:	400b      	ands	r3, r1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_I2C_Init+0x138>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	1e59      	subs	r1, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d44:	3301      	adds	r3, #1
 8004d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4a:	e051      	b.n	8004df0 <HAL_I2C_Init+0x1dc>
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	e04f      	b.n	8004df0 <HAL_I2C_Init+0x1dc>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d111      	bne.n	8004d7c <HAL_I2C_Init+0x168>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	1e58      	subs	r0, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6859      	ldr	r1, [r3, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	440b      	add	r3, r1
 8004d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	e012      	b.n	8004da2 <HAL_I2C_Init+0x18e>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1e58      	subs	r0, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6859      	ldr	r1, [r3, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	0099      	lsls	r1, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d92:	3301      	adds	r3, #1
 8004d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bf0c      	ite	eq
 8004d9c:	2301      	moveq	r3, #1
 8004d9e:	2300      	movne	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_I2C_Init+0x196>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e022      	b.n	8004df0 <HAL_I2C_Init+0x1dc>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10e      	bne.n	8004dd0 <HAL_I2C_Init+0x1bc>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1e58      	subs	r0, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6859      	ldr	r1, [r3, #4]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	440b      	add	r3, r1
 8004dc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dce:	e00f      	b.n	8004df0 <HAL_I2C_Init+0x1dc>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1e58      	subs	r0, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6859      	ldr	r1, [r3, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	0099      	lsls	r1, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de6:	3301      	adds	r3, #1
 8004de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	6809      	ldr	r1, [r1, #0]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69da      	ldr	r2, [r3, #28]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6911      	ldr	r1, [r2, #16]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68d2      	ldr	r2, [r2, #12]
 8004e2a:	4311      	orrs	r1, r2
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	430b      	orrs	r3, r1
 8004e32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	000186a0 	.word	0x000186a0
 8004e8c:	001e847f 	.word	0x001e847f
 8004e90:	003d08ff 	.word	0x003d08ff
 8004e94:	431bde83 	.word	0x431bde83
 8004e98:	10624dd3 	.word	0x10624dd3

08004e9c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e021      	b.n	8004ef2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2224      	movs	r2, #36	@ 0x24
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0201 	bic.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f821 	bl	8004f0e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	4611      	mov	r1, r2
 8004f30:	461a      	mov	r2, r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	817b      	strh	r3, [r7, #10]
 8004f36:	460b      	mov	r3, r1
 8004f38:	813b      	strh	r3, [r7, #8]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f3e:	f7ff fa5f 	bl	8004400 <HAL_GetTick>
 8004f42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	f040 80d9 	bne.w	8005104 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	2319      	movs	r3, #25
 8004f58:	2201      	movs	r2, #1
 8004f5a:	496d      	ldr	r1, [pc, #436]	@ (8005110 <HAL_I2C_Mem_Write+0x1ec>)
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 fca5 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e0cc      	b.n	8005106 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_I2C_Mem_Write+0x56>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e0c5      	b.n	8005106 <HAL_I2C_Mem_Write+0x1e2>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d007      	beq.n	8004fa0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2221      	movs	r2, #33	@ 0x21
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2240      	movs	r2, #64	@ 0x40
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a3a      	ldr	r2, [r7, #32]
 8004fca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a4d      	ldr	r2, [pc, #308]	@ (8005114 <HAL_I2C_Mem_Write+0x1f0>)
 8004fe0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fe2:	88f8      	ldrh	r0, [r7, #6]
 8004fe4:	893a      	ldrh	r2, [r7, #8]
 8004fe6:	8979      	ldrh	r1, [r7, #10]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	9301      	str	r3, [sp, #4]
 8004fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fadc 	bl	80055b0 <I2C_RequestMemoryWrite>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d052      	beq.n	80050a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e081      	b.n	8005106 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fd6a 	bl	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00d      	beq.n	800502e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005016:	2b04      	cmp	r3, #4
 8005018:	d107      	bne.n	800502a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005028:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e06b      	b.n	8005106 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005032:	781a      	ldrb	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b04      	cmp	r3, #4
 800506a:	d11b      	bne.n	80050a4 <HAL_I2C_Mem_Write+0x180>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005070:	2b00      	cmp	r3, #0
 8005072:	d017      	beq.n	80050a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	781a      	ldrb	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1aa      	bne.n	8005002 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 fd5d 	bl	8005b70 <I2C_WaitOnBTFFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00d      	beq.n	80050d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d107      	bne.n	80050d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e016      	b.n	8005106 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	e000      	b.n	8005106 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	00100002 	.word	0x00100002
 8005114:	ffff0000 	.word	0xffff0000

08005118 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08c      	sub	sp, #48	@ 0x30
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	4608      	mov	r0, r1
 8005122:	4611      	mov	r1, r2
 8005124:	461a      	mov	r2, r3
 8005126:	4603      	mov	r3, r0
 8005128:	817b      	strh	r3, [r7, #10]
 800512a:	460b      	mov	r3, r1
 800512c:	813b      	strh	r3, [r7, #8]
 800512e:	4613      	mov	r3, r2
 8005130:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005132:	f7ff f965 	bl	8004400 <HAL_GetTick>
 8005136:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b20      	cmp	r3, #32
 8005142:	f040 8214 	bne.w	800556e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	2319      	movs	r3, #25
 800514c:	2201      	movs	r2, #1
 800514e:	497b      	ldr	r1, [pc, #492]	@ (800533c <HAL_I2C_Mem_Read+0x224>)
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 fbab 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800515c:	2302      	movs	r3, #2
 800515e:	e207      	b.n	8005570 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_I2C_Mem_Read+0x56>
 800516a:	2302      	movs	r3, #2
 800516c:	e200      	b.n	8005570 <HAL_I2C_Mem_Read+0x458>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b01      	cmp	r3, #1
 8005182:	d007      	beq.n	8005194 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2222      	movs	r2, #34	@ 0x22
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2240      	movs	r2, #64	@ 0x40
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80051c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4a5b      	ldr	r2, [pc, #364]	@ (8005340 <HAL_I2C_Mem_Read+0x228>)
 80051d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051d6:	88f8      	ldrh	r0, [r7, #6]
 80051d8:	893a      	ldrh	r2, [r7, #8]
 80051da:	8979      	ldrh	r1, [r7, #10]
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	4603      	mov	r3, r0
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 fa78 	bl	80056dc <I2C_RequestMemoryRead>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e1bc      	b.n	8005570 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d113      	bne.n	8005226 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051fe:	2300      	movs	r3, #0
 8005200:	623b      	str	r3, [r7, #32]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	623b      	str	r3, [r7, #32]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	623b      	str	r3, [r7, #32]
 8005212:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e190      	b.n	8005548 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800522a:	2b01      	cmp	r3, #1
 800522c:	d11b      	bne.n	8005266 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800523c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523e:	2300      	movs	r3, #0
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	61fb      	str	r3, [r7, #28]
 8005252:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	e170      	b.n	8005548 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800526a:	2b02      	cmp	r3, #2
 800526c:	d11b      	bne.n	80052a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800527c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800528c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528e:	2300      	movs	r3, #0
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	e150      	b.n	8005548 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80052bc:	e144      	b.n	8005548 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	f200 80f1 	bhi.w	80054aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d123      	bne.n	8005318 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 fc93 	bl	8005c00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e145      	b.n	8005570 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005316:	e117      	b.n	8005548 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800531c:	2b02      	cmp	r3, #2
 800531e:	d14e      	bne.n	80053be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005326:	2200      	movs	r2, #0
 8005328:	4906      	ldr	r1, [pc, #24]	@ (8005344 <HAL_I2C_Mem_Read+0x22c>)
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 fabe 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d008      	beq.n	8005348 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e11a      	b.n	8005570 <HAL_I2C_Mem_Read+0x458>
 800533a:	bf00      	nop
 800533c:	00100002 	.word	0x00100002
 8005340:	ffff0000 	.word	0xffff0000
 8005344:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691a      	ldr	r2, [r3, #16]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005380:	b29b      	uxth	r3, r3
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80053bc:	e0c4      	b.n	8005548 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c4:	2200      	movs	r2, #0
 80053c6:	496c      	ldr	r1, [pc, #432]	@ (8005578 <HAL_I2C_Mem_Read+0x460>)
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 fa6f 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e0cb      	b.n	8005570 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691a      	ldr	r2, [r3, #16]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005420:	2200      	movs	r2, #0
 8005422:	4955      	ldr	r1, [pc, #340]	@ (8005578 <HAL_I2C_Mem_Read+0x460>)
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 fa41 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e09d      	b.n	8005570 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005442:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800546c:	b29b      	uxth	r3, r3
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80054a8:	e04e      	b.n	8005548 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fba6 	bl	8005c00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e058      	b.n	8005570 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d124      	bne.n	8005548 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005502:	2b03      	cmp	r3, #3
 8005504:	d107      	bne.n	8005516 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005514:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800554c:	2b00      	cmp	r3, #0
 800554e:	f47f aeb6 	bne.w	80052be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	e000      	b.n	8005570 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800556e:	2302      	movs	r3, #2
  }
}
 8005570:	4618      	mov	r0, r3
 8005572:	3728      	adds	r7, #40	@ 0x28
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	00010004 	.word	0x00010004

0800557c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800558a:	b2db      	uxtb	r3, r3
}
 800558c:	4618      	mov	r0, r3
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af02      	add	r7, sp, #8
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	4608      	mov	r0, r1
 80055ba:	4611      	mov	r1, r2
 80055bc:	461a      	mov	r2, r3
 80055be:	4603      	mov	r3, r0
 80055c0:	817b      	strh	r3, [r7, #10]
 80055c2:	460b      	mov	r3, r1
 80055c4:	813b      	strh	r3, [r7, #8]
 80055c6:	4613      	mov	r3, r2
 80055c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 f960 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00d      	beq.n	800560e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005600:	d103      	bne.n	800560a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005608:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e05f      	b.n	80056ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800560e:	897b      	ldrh	r3, [r7, #10]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800561c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	6a3a      	ldr	r2, [r7, #32]
 8005622:	492d      	ldr	r1, [pc, #180]	@ (80056d8 <I2C_RequestMemoryWrite+0x128>)
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f9bb 	bl	80059a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e04c      	b.n	80056ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800564a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564c:	6a39      	ldr	r1, [r7, #32]
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fa46 	bl	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00d      	beq.n	8005676 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	2b04      	cmp	r3, #4
 8005660:	d107      	bne.n	8005672 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005670:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e02b      	b.n	80056ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005676:	88fb      	ldrh	r3, [r7, #6]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d105      	bne.n	8005688 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800567c:	893b      	ldrh	r3, [r7, #8]
 800567e:	b2da      	uxtb	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	611a      	str	r2, [r3, #16]
 8005686:	e021      	b.n	80056cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005688:	893b      	ldrh	r3, [r7, #8]
 800568a:	0a1b      	lsrs	r3, r3, #8
 800568c:	b29b      	uxth	r3, r3
 800568e:	b2da      	uxtb	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005698:	6a39      	ldr	r1, [r7, #32]
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 fa20 	bl	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00d      	beq.n	80056c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d107      	bne.n	80056be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e005      	b.n	80056ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056c2:	893b      	ldrh	r3, [r7, #8]
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	00010002 	.word	0x00010002

080056dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	4608      	mov	r0, r1
 80056e6:	4611      	mov	r1, r2
 80056e8:	461a      	mov	r2, r3
 80056ea:	4603      	mov	r3, r0
 80056ec:	817b      	strh	r3, [r7, #10]
 80056ee:	460b      	mov	r3, r1
 80056f0:	813b      	strh	r3, [r7, #8]
 80056f2:	4613      	mov	r3, r2
 80056f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005704:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005714:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	2200      	movs	r2, #0
 800571e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f8c2 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00d      	beq.n	800574a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800573c:	d103      	bne.n	8005746 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005744:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e0aa      	b.n	80058a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800574a:	897b      	ldrh	r3, [r7, #10]
 800574c:	b2db      	uxtb	r3, r3
 800574e:	461a      	mov	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005758:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	6a3a      	ldr	r2, [r7, #32]
 800575e:	4952      	ldr	r1, [pc, #328]	@ (80058a8 <I2C_RequestMemoryRead+0x1cc>)
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f91d 	bl	80059a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e097      	b.n	80058a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005770:	2300      	movs	r3, #0
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005788:	6a39      	ldr	r1, [r7, #32]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 f9a8 	bl	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00d      	beq.n	80057b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	2b04      	cmp	r3, #4
 800579c:	d107      	bne.n	80057ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e076      	b.n	80058a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d105      	bne.n	80057c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057b8:	893b      	ldrh	r3, [r7, #8]
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	611a      	str	r2, [r3, #16]
 80057c2:	e021      	b.n	8005808 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057c4:	893b      	ldrh	r3, [r7, #8]
 80057c6:	0a1b      	lsrs	r3, r3, #8
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d4:	6a39      	ldr	r1, [r7, #32]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f982 	bl	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00d      	beq.n	80057fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d107      	bne.n	80057fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e050      	b.n	80058a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057fe:	893b      	ldrh	r3, [r7, #8]
 8005800:	b2da      	uxtb	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800580a:	6a39      	ldr	r1, [r7, #32]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 f967 	bl	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00d      	beq.n	8005834 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581c:	2b04      	cmp	r3, #4
 800581e:	d107      	bne.n	8005830 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800582e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e035      	b.n	80058a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005842:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	2200      	movs	r2, #0
 800584c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f82b 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00d      	beq.n	8005878 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800586a:	d103      	bne.n	8005874 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005872:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e013      	b.n	80058a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005878:	897b      	ldrh	r3, [r7, #10]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f043 0301 	orr.w	r3, r3, #1
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	4906      	ldr	r1, [pc, #24]	@ (80058a8 <I2C_RequestMemoryRead+0x1cc>)
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 f886 	bl	80059a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	00010002 	.word	0x00010002

080058ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058bc:	e048      	b.n	8005950 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c4:	d044      	beq.n	8005950 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c6:	f7fe fd9b 	bl	8004400 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d302      	bcc.n	80058dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d139      	bne.n	8005950 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	0c1b      	lsrs	r3, r3, #16
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d10d      	bne.n	8005902 <I2C_WaitOnFlagUntilTimeout+0x56>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	43da      	mvns	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	4013      	ands	r3, r2
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	bf0c      	ite	eq
 80058f8:	2301      	moveq	r3, #1
 80058fa:	2300      	movne	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	e00c      	b.n	800591c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	43da      	mvns	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4013      	ands	r3, r2
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	bf0c      	ite	eq
 8005914:	2301      	moveq	r3, #1
 8005916:	2300      	movne	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	429a      	cmp	r2, r3
 8005920:	d116      	bne.n	8005950 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593c:	f043 0220 	orr.w	r2, r3, #32
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e023      	b.n	8005998 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	0c1b      	lsrs	r3, r3, #16
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b01      	cmp	r3, #1
 8005958:	d10d      	bne.n	8005976 <I2C_WaitOnFlagUntilTimeout+0xca>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	43da      	mvns	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	4013      	ands	r3, r2
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	bf0c      	ite	eq
 800596c:	2301      	moveq	r3, #1
 800596e:	2300      	movne	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	461a      	mov	r2, r3
 8005974:	e00c      	b.n	8005990 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	43da      	mvns	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4013      	ands	r3, r2
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	bf0c      	ite	eq
 8005988:	2301      	moveq	r3, #1
 800598a:	2300      	movne	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	429a      	cmp	r2, r3
 8005994:	d093      	beq.n	80058be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059ae:	e071      	b.n	8005a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059be:	d123      	bne.n	8005a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f4:	f043 0204 	orr.w	r2, r3, #4
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e067      	b.n	8005ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d041      	beq.n	8005a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a10:	f7fe fcf6 	bl	8004400 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d302      	bcc.n	8005a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d136      	bne.n	8005a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	0c1b      	lsrs	r3, r3, #16
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d10c      	bne.n	8005a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	43da      	mvns	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bf14      	ite	ne
 8005a42:	2301      	movne	r3, #1
 8005a44:	2300      	moveq	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	e00b      	b.n	8005a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	43da      	mvns	r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	4013      	ands	r3, r2
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	bf14      	ite	ne
 8005a5c:	2301      	movne	r3, #1
 8005a5e:	2300      	moveq	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d016      	beq.n	8005a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a80:	f043 0220 	orr.w	r2, r3, #32
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e021      	b.n	8005ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	0c1b      	lsrs	r3, r3, #16
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d10c      	bne.n	8005ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	43da      	mvns	r2, r3
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	bf14      	ite	ne
 8005ab0:	2301      	movne	r3, #1
 8005ab2:	2300      	moveq	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	e00b      	b.n	8005ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	43da      	mvns	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bf14      	ite	ne
 8005aca:	2301      	movne	r3, #1
 8005acc:	2300      	moveq	r3, #0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f47f af6d 	bne.w	80059b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005aec:	e034      	b.n	8005b58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 f8e3 	bl	8005cba <I2C_IsAcknowledgeFailed>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e034      	b.n	8005b68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b04:	d028      	beq.n	8005b58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b06:	f7fe fc7b 	bl	8004400 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d302      	bcc.n	8005b1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d11d      	bne.n	8005b58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b26:	2b80      	cmp	r3, #128	@ 0x80
 8005b28:	d016      	beq.n	8005b58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b44:	f043 0220 	orr.w	r2, r3, #32
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e007      	b.n	8005b68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b62:	2b80      	cmp	r3, #128	@ 0x80
 8005b64:	d1c3      	bne.n	8005aee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b7c:	e034      	b.n	8005be8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 f89b 	bl	8005cba <I2C_IsAcknowledgeFailed>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e034      	b.n	8005bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d028      	beq.n	8005be8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b96:	f7fe fc33 	bl	8004400 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d302      	bcc.n	8005bac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d11d      	bne.n	8005be8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d016      	beq.n	8005be8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd4:	f043 0220 	orr.w	r2, r3, #32
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e007      	b.n	8005bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d1c3      	bne.n	8005b7e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c0c:	e049      	b.n	8005ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	d119      	bne.n	8005c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0210 	mvn.w	r2, #16
 8005c24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e030      	b.n	8005cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c50:	f7fe fbd6 	bl	8004400 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d302      	bcc.n	8005c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d11d      	bne.n	8005ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c70:	2b40      	cmp	r3, #64	@ 0x40
 8005c72:	d016      	beq.n	8005ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	f043 0220 	orr.w	r2, r3, #32
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e007      	b.n	8005cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b40      	cmp	r3, #64	@ 0x40
 8005cae:	d1ae      	bne.n	8005c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cd0:	d11b      	bne.n	8005d0a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cda:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf6:	f043 0204 	orr.w	r2, r3, #4
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e267      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d075      	beq.n	8005e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d36:	4b88      	ldr	r3, [pc, #544]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 030c 	and.w	r3, r3, #12
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d00c      	beq.n	8005d5c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d42:	4b85      	ldr	r3, [pc, #532]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d4a:	2b08      	cmp	r3, #8
 8005d4c:	d112      	bne.n	8005d74 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d4e:	4b82      	ldr	r3, [pc, #520]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d5a:	d10b      	bne.n	8005d74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d05b      	beq.n	8005e20 <HAL_RCC_OscConfig+0x108>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d157      	bne.n	8005e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e242      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d7c:	d106      	bne.n	8005d8c <HAL_RCC_OscConfig+0x74>
 8005d7e:	4b76      	ldr	r3, [pc, #472]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a75      	ldr	r2, [pc, #468]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	e01d      	b.n	8005dc8 <HAL_RCC_OscConfig+0xb0>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d94:	d10c      	bne.n	8005db0 <HAL_RCC_OscConfig+0x98>
 8005d96:	4b70      	ldr	r3, [pc, #448]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a6f      	ldr	r2, [pc, #444]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	4b6d      	ldr	r3, [pc, #436]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a6c      	ldr	r2, [pc, #432]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	e00b      	b.n	8005dc8 <HAL_RCC_OscConfig+0xb0>
 8005db0:	4b69      	ldr	r3, [pc, #420]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a68      	ldr	r2, [pc, #416]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	4b66      	ldr	r3, [pc, #408]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a65      	ldr	r2, [pc, #404]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d013      	beq.n	8005df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd0:	f7fe fb16 	bl	8004400 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dd8:	f7fe fb12 	bl	8004400 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b64      	cmp	r3, #100	@ 0x64
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e207      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dea:	4b5b      	ldr	r3, [pc, #364]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0f0      	beq.n	8005dd8 <HAL_RCC_OscConfig+0xc0>
 8005df6:	e014      	b.n	8005e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df8:	f7fe fb02 	bl	8004400 <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e00:	f7fe fafe 	bl	8004400 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b64      	cmp	r3, #100	@ 0x64
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e1f3      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e12:	4b51      	ldr	r3, [pc, #324]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1f0      	bne.n	8005e00 <HAL_RCC_OscConfig+0xe8>
 8005e1e:	e000      	b.n	8005e22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d063      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 030c 	and.w	r3, r3, #12
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e3a:	4b47      	ldr	r3, [pc, #284]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d11c      	bne.n	8005e80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e46:	4b44      	ldr	r3, [pc, #272]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d116      	bne.n	8005e80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e52:	4b41      	ldr	r3, [pc, #260]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d005      	beq.n	8005e6a <HAL_RCC_OscConfig+0x152>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d001      	beq.n	8005e6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e1c7      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	4937      	ldr	r1, [pc, #220]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e7e:	e03a      	b.n	8005ef6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d020      	beq.n	8005eca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e88:	4b34      	ldr	r3, [pc, #208]	@ (8005f5c <HAL_RCC_OscConfig+0x244>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8e:	f7fe fab7 	bl	8004400 <HAL_GetTick>
 8005e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e94:	e008      	b.n	8005ea8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e96:	f7fe fab3 	bl	8004400 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e1a8      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0f0      	beq.n	8005e96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb4:	4b28      	ldr	r3, [pc, #160]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	4925      	ldr	r1, [pc, #148]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	600b      	str	r3, [r1, #0]
 8005ec8:	e015      	b.n	8005ef6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eca:	4b24      	ldr	r3, [pc, #144]	@ (8005f5c <HAL_RCC_OscConfig+0x244>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed0:	f7fe fa96 	bl	8004400 <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ed8:	f7fe fa92 	bl	8004400 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e187      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eea:	4b1b      	ldr	r3, [pc, #108]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f0      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d036      	beq.n	8005f70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d016      	beq.n	8005f38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f0a:	4b15      	ldr	r3, [pc, #84]	@ (8005f60 <HAL_RCC_OscConfig+0x248>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f10:	f7fe fa76 	bl	8004400 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f18:	f7fe fa72 	bl	8004400 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e167      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f58 <HAL_RCC_OscConfig+0x240>)
 8005f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f0      	beq.n	8005f18 <HAL_RCC_OscConfig+0x200>
 8005f36:	e01b      	b.n	8005f70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f38:	4b09      	ldr	r3, [pc, #36]	@ (8005f60 <HAL_RCC_OscConfig+0x248>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f3e:	f7fe fa5f 	bl	8004400 <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f44:	e00e      	b.n	8005f64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f46:	f7fe fa5b 	bl	8004400 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d907      	bls.n	8005f64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e150      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	42470000 	.word	0x42470000
 8005f60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f64:	4b88      	ldr	r3, [pc, #544]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8005f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1ea      	bne.n	8005f46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8097 	beq.w	80060ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f82:	4b81      	ldr	r3, [pc, #516]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10f      	bne.n	8005fae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	4b7d      	ldr	r3, [pc, #500]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8005f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f96:	4a7c      	ldr	r2, [pc, #496]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8005f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f9e:	4b7a      	ldr	r3, [pc, #488]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fa6:	60bb      	str	r3, [r7, #8]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005faa:	2301      	movs	r3, #1
 8005fac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fae:	4b77      	ldr	r3, [pc, #476]	@ (800618c <HAL_RCC_OscConfig+0x474>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d118      	bne.n	8005fec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fba:	4b74      	ldr	r3, [pc, #464]	@ (800618c <HAL_RCC_OscConfig+0x474>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a73      	ldr	r2, [pc, #460]	@ (800618c <HAL_RCC_OscConfig+0x474>)
 8005fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fc6:	f7fe fa1b 	bl	8004400 <HAL_GetTick>
 8005fca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fce:	f7fe fa17 	bl	8004400 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e10c      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe0:	4b6a      	ldr	r3, [pc, #424]	@ (800618c <HAL_RCC_OscConfig+0x474>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0f0      	beq.n	8005fce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d106      	bne.n	8006002 <HAL_RCC_OscConfig+0x2ea>
 8005ff4:	4b64      	ldr	r3, [pc, #400]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8005ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff8:	4a63      	ldr	r2, [pc, #396]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006000:	e01c      	b.n	800603c <HAL_RCC_OscConfig+0x324>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2b05      	cmp	r3, #5
 8006008:	d10c      	bne.n	8006024 <HAL_RCC_OscConfig+0x30c>
 800600a:	4b5f      	ldr	r3, [pc, #380]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 800600c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600e:	4a5e      	ldr	r2, [pc, #376]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8006010:	f043 0304 	orr.w	r3, r3, #4
 8006014:	6713      	str	r3, [r2, #112]	@ 0x70
 8006016:	4b5c      	ldr	r3, [pc, #368]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8006018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800601a:	4a5b      	ldr	r2, [pc, #364]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 800601c:	f043 0301 	orr.w	r3, r3, #1
 8006020:	6713      	str	r3, [r2, #112]	@ 0x70
 8006022:	e00b      	b.n	800603c <HAL_RCC_OscConfig+0x324>
 8006024:	4b58      	ldr	r3, [pc, #352]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8006026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006028:	4a57      	ldr	r2, [pc, #348]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 800602a:	f023 0301 	bic.w	r3, r3, #1
 800602e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006030:	4b55      	ldr	r3, [pc, #340]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8006032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006034:	4a54      	ldr	r2, [pc, #336]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8006036:	f023 0304 	bic.w	r3, r3, #4
 800603a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d015      	beq.n	8006070 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006044:	f7fe f9dc 	bl	8004400 <HAL_GetTick>
 8006048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800604a:	e00a      	b.n	8006062 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800604c:	f7fe f9d8 	bl	8004400 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800605a:	4293      	cmp	r3, r2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e0cb      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006062:	4b49      	ldr	r3, [pc, #292]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8006064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0ee      	beq.n	800604c <HAL_RCC_OscConfig+0x334>
 800606e:	e014      	b.n	800609a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006070:	f7fe f9c6 	bl	8004400 <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006076:	e00a      	b.n	800608e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006078:	f7fe f9c2 	bl	8004400 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006086:	4293      	cmp	r3, r2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e0b5      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800608e:	4b3e      	ldr	r3, [pc, #248]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8006090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1ee      	bne.n	8006078 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d105      	bne.n	80060ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a0:	4b39      	ldr	r3, [pc, #228]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 80060a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a4:	4a38      	ldr	r2, [pc, #224]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 80060a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 80a1 	beq.w	80061f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060b6:	4b34      	ldr	r3, [pc, #208]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 030c 	and.w	r3, r3, #12
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d05c      	beq.n	800617c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d141      	bne.n	800614e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ca:	4b31      	ldr	r3, [pc, #196]	@ (8006190 <HAL_RCC_OscConfig+0x478>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d0:	f7fe f996 	bl	8004400 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d8:	f7fe f992 	bl	8004400 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e087      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ea:	4b27      	ldr	r3, [pc, #156]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f0      	bne.n	80060d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69da      	ldr	r2, [r3, #28]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006104:	019b      	lsls	r3, r3, #6
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	3b01      	subs	r3, #1
 8006110:	041b      	lsls	r3, r3, #16
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006118:	061b      	lsls	r3, r3, #24
 800611a:	491b      	ldr	r1, [pc, #108]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 800611c:	4313      	orrs	r3, r2
 800611e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006120:	4b1b      	ldr	r3, [pc, #108]	@ (8006190 <HAL_RCC_OscConfig+0x478>)
 8006122:	2201      	movs	r2, #1
 8006124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006126:	f7fe f96b 	bl	8004400 <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800612c:	e008      	b.n	8006140 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800612e:	f7fe f967 	bl	8004400 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e05c      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006140:	4b11      	ldr	r3, [pc, #68]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0f0      	beq.n	800612e <HAL_RCC_OscConfig+0x416>
 800614c:	e054      	b.n	80061f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800614e:	4b10      	ldr	r3, [pc, #64]	@ (8006190 <HAL_RCC_OscConfig+0x478>)
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006154:	f7fe f954 	bl	8004400 <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800615c:	f7fe f950 	bl	8004400 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e045      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800616e:	4b06      	ldr	r3, [pc, #24]	@ (8006188 <HAL_RCC_OscConfig+0x470>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f0      	bne.n	800615c <HAL_RCC_OscConfig+0x444>
 800617a:	e03d      	b.n	80061f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d107      	bne.n	8006194 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e038      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
 8006188:	40023800 	.word	0x40023800
 800618c:	40007000 	.word	0x40007000
 8006190:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006194:	4b1b      	ldr	r3, [pc, #108]	@ (8006204 <HAL_RCC_OscConfig+0x4ec>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d028      	beq.n	80061f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d121      	bne.n	80061f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d11a      	bne.n	80061f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80061c4:	4013      	ands	r3, r2
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d111      	bne.n	80061f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	3b01      	subs	r3, #1
 80061de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d107      	bne.n	80061f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d001      	beq.n	80061f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40023800 	.word	0x40023800

08006208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0cc      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800621c:	4b68      	ldr	r3, [pc, #416]	@ (80063c0 <HAL_RCC_ClockConfig+0x1b8>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d90c      	bls.n	8006244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622a:	4b65      	ldr	r3, [pc, #404]	@ (80063c0 <HAL_RCC_ClockConfig+0x1b8>)
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006232:	4b63      	ldr	r3, [pc, #396]	@ (80063c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d001      	beq.n	8006244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e0b8      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d020      	beq.n	8006292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	d005      	beq.n	8006268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800625c:	4b59      	ldr	r3, [pc, #356]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	4a58      	ldr	r2, [pc, #352]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006262:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006266:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0308 	and.w	r3, r3, #8
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006274:	4b53      	ldr	r3, [pc, #332]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	4a52      	ldr	r2, [pc, #328]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 800627a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800627e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006280:	4b50      	ldr	r3, [pc, #320]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	494d      	ldr	r1, [pc, #308]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 800628e:	4313      	orrs	r3, r2
 8006290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d044      	beq.n	8006328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d107      	bne.n	80062b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062a6:	4b47      	ldr	r3, [pc, #284]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d119      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e07f      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d003      	beq.n	80062c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d107      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062c6:	4b3f      	ldr	r3, [pc, #252]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d109      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e06f      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062d6:	4b3b      	ldr	r3, [pc, #236]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e067      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062e6:	4b37      	ldr	r3, [pc, #220]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f023 0203 	bic.w	r2, r3, #3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	4934      	ldr	r1, [pc, #208]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062f8:	f7fe f882 	bl	8004400 <HAL_GetTick>
 80062fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fe:	e00a      	b.n	8006316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006300:	f7fe f87e 	bl	8004400 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e04f      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006316:	4b2b      	ldr	r3, [pc, #172]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 020c 	and.w	r2, r3, #12
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	429a      	cmp	r2, r3
 8006326:	d1eb      	bne.n	8006300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006328:	4b25      	ldr	r3, [pc, #148]	@ (80063c0 <HAL_RCC_ClockConfig+0x1b8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d20c      	bcs.n	8006350 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006336:	4b22      	ldr	r3, [pc, #136]	@ (80063c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800633e:	4b20      	ldr	r3, [pc, #128]	@ (80063c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d001      	beq.n	8006350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e032      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800635c:	4b19      	ldr	r3, [pc, #100]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	4916      	ldr	r1, [pc, #88]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	4313      	orrs	r3, r2
 800636c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800637a:	4b12      	ldr	r3, [pc, #72]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	490e      	ldr	r1, [pc, #56]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	4313      	orrs	r3, r2
 800638c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800638e:	f000 f821 	bl	80063d4 <HAL_RCC_GetSysClockFreq>
 8006392:	4602      	mov	r2, r0
 8006394:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	091b      	lsrs	r3, r3, #4
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	490a      	ldr	r1, [pc, #40]	@ (80063c8 <HAL_RCC_ClockConfig+0x1c0>)
 80063a0:	5ccb      	ldrb	r3, [r1, r3]
 80063a2:	fa22 f303 	lsr.w	r3, r2, r3
 80063a6:	4a09      	ldr	r2, [pc, #36]	@ (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 80063a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80063aa:	4b09      	ldr	r3, [pc, #36]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fd ffe2 	bl	8004378 <HAL_InitTick>

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40023c00 	.word	0x40023c00
 80063c4:	40023800 	.word	0x40023800
 80063c8:	0800876c 	.word	0x0800876c
 80063cc:	20000000 	.word	0x20000000
 80063d0:	20000048 	.word	0x20000048

080063d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063d8:	b094      	sub	sp, #80	@ 0x50
 80063da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063ec:	4b79      	ldr	r3, [pc, #484]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f003 030c 	and.w	r3, r3, #12
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d00d      	beq.n	8006414 <HAL_RCC_GetSysClockFreq+0x40>
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	f200 80e1 	bhi.w	80065c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <HAL_RCC_GetSysClockFreq+0x34>
 8006402:	2b04      	cmp	r3, #4
 8006404:	d003      	beq.n	800640e <HAL_RCC_GetSysClockFreq+0x3a>
 8006406:	e0db      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006408:	4b73      	ldr	r3, [pc, #460]	@ (80065d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800640a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800640c:	e0db      	b.n	80065c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800640e:	4b73      	ldr	r3, [pc, #460]	@ (80065dc <HAL_RCC_GetSysClockFreq+0x208>)
 8006410:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006412:	e0d8      	b.n	80065c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006414:	4b6f      	ldr	r3, [pc, #444]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800641c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800641e:	4b6d      	ldr	r3, [pc, #436]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d063      	beq.n	80064f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800642a:	4b6a      	ldr	r3, [pc, #424]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	099b      	lsrs	r3, r3, #6
 8006430:	2200      	movs	r2, #0
 8006432:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006434:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643c:	633b      	str	r3, [r7, #48]	@ 0x30
 800643e:	2300      	movs	r3, #0
 8006440:	637b      	str	r3, [r7, #52]	@ 0x34
 8006442:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006446:	4622      	mov	r2, r4
 8006448:	462b      	mov	r3, r5
 800644a:	f04f 0000 	mov.w	r0, #0
 800644e:	f04f 0100 	mov.w	r1, #0
 8006452:	0159      	lsls	r1, r3, #5
 8006454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006458:	0150      	lsls	r0, r2, #5
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4621      	mov	r1, r4
 8006460:	1a51      	subs	r1, r2, r1
 8006462:	6139      	str	r1, [r7, #16]
 8006464:	4629      	mov	r1, r5
 8006466:	eb63 0301 	sbc.w	r3, r3, r1
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006478:	4659      	mov	r1, fp
 800647a:	018b      	lsls	r3, r1, #6
 800647c:	4651      	mov	r1, sl
 800647e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006482:	4651      	mov	r1, sl
 8006484:	018a      	lsls	r2, r1, #6
 8006486:	4651      	mov	r1, sl
 8006488:	ebb2 0801 	subs.w	r8, r2, r1
 800648c:	4659      	mov	r1, fp
 800648e:	eb63 0901 	sbc.w	r9, r3, r1
 8006492:	f04f 0200 	mov.w	r2, #0
 8006496:	f04f 0300 	mov.w	r3, #0
 800649a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800649e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064a6:	4690      	mov	r8, r2
 80064a8:	4699      	mov	r9, r3
 80064aa:	4623      	mov	r3, r4
 80064ac:	eb18 0303 	adds.w	r3, r8, r3
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	462b      	mov	r3, r5
 80064b4:	eb49 0303 	adc.w	r3, r9, r3
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	f04f 0200 	mov.w	r2, #0
 80064be:	f04f 0300 	mov.w	r3, #0
 80064c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064c6:	4629      	mov	r1, r5
 80064c8:	024b      	lsls	r3, r1, #9
 80064ca:	4621      	mov	r1, r4
 80064cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064d0:	4621      	mov	r1, r4
 80064d2:	024a      	lsls	r2, r1, #9
 80064d4:	4610      	mov	r0, r2
 80064d6:	4619      	mov	r1, r3
 80064d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064da:	2200      	movs	r2, #0
 80064dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064e4:	f7f9 fecc 	bl	8000280 <__aeabi_uldivmod>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4613      	mov	r3, r2
 80064ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064f0:	e058      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064f2:	4b38      	ldr	r3, [pc, #224]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	099b      	lsrs	r3, r3, #6
 80064f8:	2200      	movs	r2, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	4611      	mov	r1, r2
 80064fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006502:	623b      	str	r3, [r7, #32]
 8006504:	2300      	movs	r3, #0
 8006506:	627b      	str	r3, [r7, #36]	@ 0x24
 8006508:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800650c:	4642      	mov	r2, r8
 800650e:	464b      	mov	r3, r9
 8006510:	f04f 0000 	mov.w	r0, #0
 8006514:	f04f 0100 	mov.w	r1, #0
 8006518:	0159      	lsls	r1, r3, #5
 800651a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800651e:	0150      	lsls	r0, r2, #5
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4641      	mov	r1, r8
 8006526:	ebb2 0a01 	subs.w	sl, r2, r1
 800652a:	4649      	mov	r1, r9
 800652c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800653c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006540:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006544:	ebb2 040a 	subs.w	r4, r2, sl
 8006548:	eb63 050b 	sbc.w	r5, r3, fp
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	f04f 0300 	mov.w	r3, #0
 8006554:	00eb      	lsls	r3, r5, #3
 8006556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800655a:	00e2      	lsls	r2, r4, #3
 800655c:	4614      	mov	r4, r2
 800655e:	461d      	mov	r5, r3
 8006560:	4643      	mov	r3, r8
 8006562:	18e3      	adds	r3, r4, r3
 8006564:	603b      	str	r3, [r7, #0]
 8006566:	464b      	mov	r3, r9
 8006568:	eb45 0303 	adc.w	r3, r5, r3
 800656c:	607b      	str	r3, [r7, #4]
 800656e:	f04f 0200 	mov.w	r2, #0
 8006572:	f04f 0300 	mov.w	r3, #0
 8006576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800657a:	4629      	mov	r1, r5
 800657c:	028b      	lsls	r3, r1, #10
 800657e:	4621      	mov	r1, r4
 8006580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006584:	4621      	mov	r1, r4
 8006586:	028a      	lsls	r2, r1, #10
 8006588:	4610      	mov	r0, r2
 800658a:	4619      	mov	r1, r3
 800658c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800658e:	2200      	movs	r2, #0
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	61fa      	str	r2, [r7, #28]
 8006594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006598:	f7f9 fe72 	bl	8000280 <__aeabi_uldivmod>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4613      	mov	r3, r2
 80065a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80065a4:	4b0b      	ldr	r3, [pc, #44]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	0c1b      	lsrs	r3, r3, #16
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	3301      	adds	r3, #1
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80065b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065be:	e002      	b.n	80065c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065c0:	4b05      	ldr	r3, [pc, #20]	@ (80065d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80065c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3750      	adds	r7, #80	@ 0x50
 80065cc:	46bd      	mov	sp, r7
 80065ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065d2:	bf00      	nop
 80065d4:	40023800 	.word	0x40023800
 80065d8:	00f42400 	.word	0x00f42400
 80065dc:	007a1200 	.word	0x007a1200

080065e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065e0:	b480      	push	{r7}
 80065e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065e4:	4b03      	ldr	r3, [pc, #12]	@ (80065f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80065e6:	681b      	ldr	r3, [r3, #0]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	20000000 	.word	0x20000000

080065f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065fc:	f7ff fff0 	bl	80065e0 <HAL_RCC_GetHCLKFreq>
 8006600:	4602      	mov	r2, r0
 8006602:	4b05      	ldr	r3, [pc, #20]	@ (8006618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	0a9b      	lsrs	r3, r3, #10
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	4903      	ldr	r1, [pc, #12]	@ (800661c <HAL_RCC_GetPCLK1Freq+0x24>)
 800660e:	5ccb      	ldrb	r3, [r1, r3]
 8006610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006614:	4618      	mov	r0, r3
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40023800 	.word	0x40023800
 800661c:	0800877c 	.word	0x0800877c

08006620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006624:	f7ff ffdc 	bl	80065e0 <HAL_RCC_GetHCLKFreq>
 8006628:	4602      	mov	r2, r0
 800662a:	4b05      	ldr	r3, [pc, #20]	@ (8006640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	0b5b      	lsrs	r3, r3, #13
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	4903      	ldr	r1, [pc, #12]	@ (8006644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006636:	5ccb      	ldrb	r3, [r1, r3]
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800663c:	4618      	mov	r0, r3
 800663e:	bd80      	pop	{r7, pc}
 8006640:	40023800 	.word	0x40023800
 8006644:	0800877c 	.word	0x0800877c

08006648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e042      	b.n	80066e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f83a 	bl	80066e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2224      	movs	r2, #36	@ 0x24
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800668a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fa13 	bl	8006ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695a      	ldr	r2, [r3, #20]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	@ 0x28
 8006700:	af02      	add	r7, sp, #8
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	4613      	mov	r3, r2
 800670a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b20      	cmp	r3, #32
 800671a:	d175      	bne.n	8006808 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <HAL_UART_Transmit+0x2c>
 8006722:	88fb      	ldrh	r3, [r7, #6]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e06e      	b.n	800680a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2221      	movs	r2, #33	@ 0x21
 8006736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800673a:	f7fd fe61 	bl	8004400 <HAL_GetTick>
 800673e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	88fa      	ldrh	r2, [r7, #6]
 8006744:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	88fa      	ldrh	r2, [r7, #6]
 800674a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006754:	d108      	bne.n	8006768 <HAL_UART_Transmit+0x6c>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800675e:	2300      	movs	r3, #0
 8006760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	e003      	b.n	8006770 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006770:	e02e      	b.n	80067d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2200      	movs	r2, #0
 800677a:	2180      	movs	r1, #128	@ 0x80
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 f8df 	bl	8006940 <UART_WaitOnFlagUntilTimeout>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e03a      	b.n	800680a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10b      	bne.n	80067b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	3302      	adds	r3, #2
 80067ae:	61bb      	str	r3, [r7, #24]
 80067b0:	e007      	b.n	80067c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	781a      	ldrb	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3301      	adds	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1cb      	bne.n	8006772 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2200      	movs	r2, #0
 80067e2:	2140      	movs	r1, #64	@ 0x40
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 f8ab 	bl	8006940 <UART_WaitOnFlagUntilTimeout>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d005      	beq.n	80067fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e006      	b.n	800680a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	e000      	b.n	800680a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006808:	2302      	movs	r3, #2
  }
}
 800680a:	4618      	mov	r0, r3
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b08a      	sub	sp, #40	@ 0x28
 8006816:	af02      	add	r7, sp, #8
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	603b      	str	r3, [r7, #0]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b20      	cmp	r3, #32
 8006830:	f040 8081 	bne.w	8006936 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <HAL_UART_Receive+0x2e>
 800683a:	88fb      	ldrh	r3, [r7, #6]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e079      	b.n	8006938 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2222      	movs	r2, #34	@ 0x22
 800684e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006858:	f7fd fdd2 	bl	8004400 <HAL_GetTick>
 800685c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	88fa      	ldrh	r2, [r7, #6]
 8006862:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	88fa      	ldrh	r2, [r7, #6]
 8006868:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006872:	d108      	bne.n	8006886 <HAL_UART_Receive+0x74>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d104      	bne.n	8006886 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800687c:	2300      	movs	r3, #0
 800687e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	61bb      	str	r3, [r7, #24]
 8006884:	e003      	b.n	800688e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800688e:	e047      	b.n	8006920 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	2200      	movs	r2, #0
 8006898:	2120      	movs	r1, #32
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 f850 	bl	8006940 <UART_WaitOnFlagUntilTimeout>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d005      	beq.n	80068b2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e042      	b.n	8006938 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10c      	bne.n	80068d2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	3302      	adds	r3, #2
 80068ce:	61bb      	str	r3, [r7, #24]
 80068d0:	e01f      	b.n	8006912 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068da:	d007      	beq.n	80068ec <HAL_UART_Receive+0xda>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10a      	bne.n	80068fa <HAL_UART_Receive+0xe8>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d106      	bne.n	80068fa <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	e008      	b.n	800690c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006906:	b2da      	uxtb	r2, r3
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	3301      	adds	r3, #1
 8006910:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006916:	b29b      	uxth	r3, r3
 8006918:	3b01      	subs	r3, #1
 800691a:	b29a      	uxth	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1b2      	bne.n	8006890 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2220      	movs	r2, #32
 800692e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	e000      	b.n	8006938 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006936:	2302      	movs	r3, #2
  }
}
 8006938:	4618      	mov	r0, r3
 800693a:	3720      	adds	r7, #32
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	603b      	str	r3, [r7, #0]
 800694c:	4613      	mov	r3, r2
 800694e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006950:	e03b      	b.n	80069ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d037      	beq.n	80069ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695a:	f7fd fd51 	bl	8004400 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	6a3a      	ldr	r2, [r7, #32]
 8006966:	429a      	cmp	r2, r3
 8006968:	d302      	bcc.n	8006970 <UART_WaitOnFlagUntilTimeout+0x30>
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e03a      	b.n	80069ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	d023      	beq.n	80069ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b80      	cmp	r3, #128	@ 0x80
 8006986:	d020      	beq.n	80069ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b40      	cmp	r3, #64	@ 0x40
 800698c:	d01d      	beq.n	80069ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b08      	cmp	r3, #8
 800699a:	d116      	bne.n	80069ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f81d 	bl	80069f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2208      	movs	r2, #8
 80069bc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e00f      	b.n	80069ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	4013      	ands	r3, r2
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	bf0c      	ite	eq
 80069da:	2301      	moveq	r3, #1
 80069dc:	2300      	movne	r3, #0
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	461a      	mov	r2, r3
 80069e2:	79fb      	ldrb	r3, [r7, #7]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d0b4      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b095      	sub	sp, #84	@ 0x54
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	330c      	adds	r3, #12
 8006a00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	330c      	adds	r3, #12
 8006a18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e5      	bne.n	80069fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3314      	adds	r3, #20
 8006a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	f023 0301 	bic.w	r3, r3, #1
 8006a44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3314      	adds	r3, #20
 8006a4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e5      	bne.n	8006a2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d119      	bne.n	8006a9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	330c      	adds	r3, #12
 8006a70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f023 0310 	bic.w	r3, r3, #16
 8006a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	330c      	adds	r3, #12
 8006a88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a8a:	61ba      	str	r2, [r7, #24]
 8006a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6979      	ldr	r1, [r7, #20]
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	613b      	str	r3, [r7, #16]
   return(result);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e5      	bne.n	8006a6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006aac:	bf00      	nop
 8006aae:	3754      	adds	r7, #84	@ 0x54
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006abc:	b0c0      	sub	sp, #256	@ 0x100
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ad4:	68d9      	ldr	r1, [r3, #12]
 8006ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	ea40 0301 	orr.w	r3, r0, r1
 8006ae0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	431a      	orrs	r2, r3
 8006af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b10:	f021 010c 	bic.w	r1, r1, #12
 8006b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b1e:	430b      	orrs	r3, r1
 8006b20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b32:	6999      	ldr	r1, [r3, #24]
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	ea40 0301 	orr.w	r3, r0, r1
 8006b3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	4b8f      	ldr	r3, [pc, #572]	@ (8006d84 <UART_SetConfig+0x2cc>)
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d005      	beq.n	8006b58 <UART_SetConfig+0xa0>
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	4b8d      	ldr	r3, [pc, #564]	@ (8006d88 <UART_SetConfig+0x2d0>)
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d104      	bne.n	8006b62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b58:	f7ff fd62 	bl	8006620 <HAL_RCC_GetPCLK2Freq>
 8006b5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006b60:	e003      	b.n	8006b6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b62:	f7ff fd49 	bl	80065f8 <HAL_RCC_GetPCLK1Freq>
 8006b66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b74:	f040 810c 	bne.w	8006d90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006b86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	1891      	adds	r1, r2, r2
 8006b90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006b92:	415b      	adcs	r3, r3
 8006b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	eb12 0801 	adds.w	r8, r2, r1
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	eb43 0901 	adc.w	r9, r3, r1
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	f04f 0300 	mov.w	r3, #0
 8006bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bba:	4690      	mov	r8, r2
 8006bbc:	4699      	mov	r9, r3
 8006bbe:	4623      	mov	r3, r4
 8006bc0:	eb18 0303 	adds.w	r3, r8, r3
 8006bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006bc8:	462b      	mov	r3, r5
 8006bca:	eb49 0303 	adc.w	r3, r9, r3
 8006bce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006bde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006be6:	460b      	mov	r3, r1
 8006be8:	18db      	adds	r3, r3, r3
 8006bea:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bec:	4613      	mov	r3, r2
 8006bee:	eb42 0303 	adc.w	r3, r2, r3
 8006bf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006bf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006bfc:	f7f9 fb40 	bl	8000280 <__aeabi_uldivmod>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4b61      	ldr	r3, [pc, #388]	@ (8006d8c <UART_SetConfig+0x2d4>)
 8006c06:	fba3 2302 	umull	r2, r3, r3, r2
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	011c      	lsls	r4, r3, #4
 8006c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c20:	4642      	mov	r2, r8
 8006c22:	464b      	mov	r3, r9
 8006c24:	1891      	adds	r1, r2, r2
 8006c26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c28:	415b      	adcs	r3, r3
 8006c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c30:	4641      	mov	r1, r8
 8006c32:	eb12 0a01 	adds.w	sl, r2, r1
 8006c36:	4649      	mov	r1, r9
 8006c38:	eb43 0b01 	adc.w	fp, r3, r1
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c50:	4692      	mov	sl, r2
 8006c52:	469b      	mov	fp, r3
 8006c54:	4643      	mov	r3, r8
 8006c56:	eb1a 0303 	adds.w	r3, sl, r3
 8006c5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c5e:	464b      	mov	r3, r9
 8006c60:	eb4b 0303 	adc.w	r3, fp, r3
 8006c64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006c78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	18db      	adds	r3, r3, r3
 8006c80:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c82:	4613      	mov	r3, r2
 8006c84:	eb42 0303 	adc.w	r3, r2, r3
 8006c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006c92:	f7f9 faf5 	bl	8000280 <__aeabi_uldivmod>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8006d8c <UART_SetConfig+0x2d4>)
 8006c9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006ca2:	095b      	lsrs	r3, r3, #5
 8006ca4:	2264      	movs	r2, #100	@ 0x64
 8006ca6:	fb02 f303 	mul.w	r3, r2, r3
 8006caa:	1acb      	subs	r3, r1, r3
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006cb2:	4b36      	ldr	r3, [pc, #216]	@ (8006d8c <UART_SetConfig+0x2d4>)
 8006cb4:	fba3 2302 	umull	r2, r3, r3, r2
 8006cb8:	095b      	lsrs	r3, r3, #5
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006cc0:	441c      	add	r4, r3
 8006cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ccc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006cd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006cd4:	4642      	mov	r2, r8
 8006cd6:	464b      	mov	r3, r9
 8006cd8:	1891      	adds	r1, r2, r2
 8006cda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006cdc:	415b      	adcs	r3, r3
 8006cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ce0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ce4:	4641      	mov	r1, r8
 8006ce6:	1851      	adds	r1, r2, r1
 8006ce8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006cea:	4649      	mov	r1, r9
 8006cec:	414b      	adcs	r3, r1
 8006cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf0:	f04f 0200 	mov.w	r2, #0
 8006cf4:	f04f 0300 	mov.w	r3, #0
 8006cf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006cfc:	4659      	mov	r1, fp
 8006cfe:	00cb      	lsls	r3, r1, #3
 8006d00:	4651      	mov	r1, sl
 8006d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d06:	4651      	mov	r1, sl
 8006d08:	00ca      	lsls	r2, r1, #3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4603      	mov	r3, r0
 8006d10:	4642      	mov	r2, r8
 8006d12:	189b      	adds	r3, r3, r2
 8006d14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d18:	464b      	mov	r3, r9
 8006d1a:	460a      	mov	r2, r1
 8006d1c:	eb42 0303 	adc.w	r3, r2, r3
 8006d20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d38:	460b      	mov	r3, r1
 8006d3a:	18db      	adds	r3, r3, r3
 8006d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d3e:	4613      	mov	r3, r2
 8006d40:	eb42 0303 	adc.w	r3, r2, r3
 8006d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d4e:	f7f9 fa97 	bl	8000280 <__aeabi_uldivmod>
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	4b0d      	ldr	r3, [pc, #52]	@ (8006d8c <UART_SetConfig+0x2d4>)
 8006d58:	fba3 1302 	umull	r1, r3, r3, r2
 8006d5c:	095b      	lsrs	r3, r3, #5
 8006d5e:	2164      	movs	r1, #100	@ 0x64
 8006d60:	fb01 f303 	mul.w	r3, r1, r3
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	00db      	lsls	r3, r3, #3
 8006d68:	3332      	adds	r3, #50	@ 0x32
 8006d6a:	4a08      	ldr	r2, [pc, #32]	@ (8006d8c <UART_SetConfig+0x2d4>)
 8006d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d70:	095b      	lsrs	r3, r3, #5
 8006d72:	f003 0207 	and.w	r2, r3, #7
 8006d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4422      	add	r2, r4
 8006d7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d80:	e106      	b.n	8006f90 <UART_SetConfig+0x4d8>
 8006d82:	bf00      	nop
 8006d84:	40011000 	.word	0x40011000
 8006d88:	40011400 	.word	0x40011400
 8006d8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006d9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006da2:	4642      	mov	r2, r8
 8006da4:	464b      	mov	r3, r9
 8006da6:	1891      	adds	r1, r2, r2
 8006da8:	6239      	str	r1, [r7, #32]
 8006daa:	415b      	adcs	r3, r3
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006db2:	4641      	mov	r1, r8
 8006db4:	1854      	adds	r4, r2, r1
 8006db6:	4649      	mov	r1, r9
 8006db8:	eb43 0501 	adc.w	r5, r3, r1
 8006dbc:	f04f 0200 	mov.w	r2, #0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	00eb      	lsls	r3, r5, #3
 8006dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dca:	00e2      	lsls	r2, r4, #3
 8006dcc:	4614      	mov	r4, r2
 8006dce:	461d      	mov	r5, r3
 8006dd0:	4643      	mov	r3, r8
 8006dd2:	18e3      	adds	r3, r4, r3
 8006dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006dd8:	464b      	mov	r3, r9
 8006dda:	eb45 0303 	adc.w	r3, r5, r3
 8006dde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006dee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006df2:	f04f 0200 	mov.w	r2, #0
 8006df6:	f04f 0300 	mov.w	r3, #0
 8006dfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006dfe:	4629      	mov	r1, r5
 8006e00:	008b      	lsls	r3, r1, #2
 8006e02:	4621      	mov	r1, r4
 8006e04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e08:	4621      	mov	r1, r4
 8006e0a:	008a      	lsls	r2, r1, #2
 8006e0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e10:	f7f9 fa36 	bl	8000280 <__aeabi_uldivmod>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4b60      	ldr	r3, [pc, #384]	@ (8006f9c <UART_SetConfig+0x4e4>)
 8006e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e1e:	095b      	lsrs	r3, r3, #5
 8006e20:	011c      	lsls	r4, r3, #4
 8006e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e34:	4642      	mov	r2, r8
 8006e36:	464b      	mov	r3, r9
 8006e38:	1891      	adds	r1, r2, r2
 8006e3a:	61b9      	str	r1, [r7, #24]
 8006e3c:	415b      	adcs	r3, r3
 8006e3e:	61fb      	str	r3, [r7, #28]
 8006e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e44:	4641      	mov	r1, r8
 8006e46:	1851      	adds	r1, r2, r1
 8006e48:	6139      	str	r1, [r7, #16]
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	414b      	adcs	r3, r1
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	f04f 0200 	mov.w	r2, #0
 8006e54:	f04f 0300 	mov.w	r3, #0
 8006e58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e5c:	4659      	mov	r1, fp
 8006e5e:	00cb      	lsls	r3, r1, #3
 8006e60:	4651      	mov	r1, sl
 8006e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e66:	4651      	mov	r1, sl
 8006e68:	00ca      	lsls	r2, r1, #3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4642      	mov	r2, r8
 8006e72:	189b      	adds	r3, r3, r2
 8006e74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e78:	464b      	mov	r3, r9
 8006e7a:	460a      	mov	r2, r1
 8006e7c:	eb42 0303 	adc.w	r3, r2, r3
 8006e80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006e9c:	4649      	mov	r1, r9
 8006e9e:	008b      	lsls	r3, r1, #2
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ea6:	4641      	mov	r1, r8
 8006ea8:	008a      	lsls	r2, r1, #2
 8006eaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006eae:	f7f9 f9e7 	bl	8000280 <__aeabi_uldivmod>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	4b38      	ldr	r3, [pc, #224]	@ (8006f9c <UART_SetConfig+0x4e4>)
 8006eba:	fba3 2301 	umull	r2, r3, r3, r1
 8006ebe:	095b      	lsrs	r3, r3, #5
 8006ec0:	2264      	movs	r2, #100	@ 0x64
 8006ec2:	fb02 f303 	mul.w	r3, r2, r3
 8006ec6:	1acb      	subs	r3, r1, r3
 8006ec8:	011b      	lsls	r3, r3, #4
 8006eca:	3332      	adds	r3, #50	@ 0x32
 8006ecc:	4a33      	ldr	r2, [pc, #204]	@ (8006f9c <UART_SetConfig+0x4e4>)
 8006ece:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed2:	095b      	lsrs	r3, r3, #5
 8006ed4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ed8:	441c      	add	r4, r3
 8006eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ede:	2200      	movs	r2, #0
 8006ee0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ee2:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ee4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ee8:	4642      	mov	r2, r8
 8006eea:	464b      	mov	r3, r9
 8006eec:	1891      	adds	r1, r2, r2
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	415b      	adcs	r3, r3
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ef8:	4641      	mov	r1, r8
 8006efa:	1851      	adds	r1, r2, r1
 8006efc:	6039      	str	r1, [r7, #0]
 8006efe:	4649      	mov	r1, r9
 8006f00:	414b      	adcs	r3, r1
 8006f02:	607b      	str	r3, [r7, #4]
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f10:	4659      	mov	r1, fp
 8006f12:	00cb      	lsls	r3, r1, #3
 8006f14:	4651      	mov	r1, sl
 8006f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f1a:	4651      	mov	r1, sl
 8006f1c:	00ca      	lsls	r2, r1, #3
 8006f1e:	4610      	mov	r0, r2
 8006f20:	4619      	mov	r1, r3
 8006f22:	4603      	mov	r3, r0
 8006f24:	4642      	mov	r2, r8
 8006f26:	189b      	adds	r3, r3, r2
 8006f28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	460a      	mov	r2, r1
 8006f2e:	eb42 0303 	adc.w	r3, r2, r3
 8006f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	008b      	lsls	r3, r1, #2
 8006f50:	4641      	mov	r1, r8
 8006f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f56:	4641      	mov	r1, r8
 8006f58:	008a      	lsls	r2, r1, #2
 8006f5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006f5e:	f7f9 f98f 	bl	8000280 <__aeabi_uldivmod>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4b0d      	ldr	r3, [pc, #52]	@ (8006f9c <UART_SetConfig+0x4e4>)
 8006f68:	fba3 1302 	umull	r1, r3, r3, r2
 8006f6c:	095b      	lsrs	r3, r3, #5
 8006f6e:	2164      	movs	r1, #100	@ 0x64
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	3332      	adds	r3, #50	@ 0x32
 8006f7a:	4a08      	ldr	r2, [pc, #32]	@ (8006f9c <UART_SetConfig+0x4e4>)
 8006f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f80:	095b      	lsrs	r3, r3, #5
 8006f82:	f003 020f 	and.w	r2, r3, #15
 8006f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4422      	add	r2, r4
 8006f8e:	609a      	str	r2, [r3, #8]
}
 8006f90:	bf00      	nop
 8006f92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006f96:	46bd      	mov	sp, r7
 8006f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f9c:	51eb851f 	.word	0x51eb851f

08006fa0 <MX_TOF_Init>:
static void handle_cmd(uint8_t cmd);
static uint8_t get_key(void);
static uint32_t com_has_data(void);

void MX_TOF_Init(void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L5A1_SimpleRanging_Init();
 8006fa4:	f000 f808 	bl	8006fb8 <MX_53L5A1_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8006fa8:	bf00      	nop
 8006faa:	bd80      	pop	{r7, pc}

08006fac <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_53L5A1_SimpleRanging_Process();
 8006fb0:	f000 f852 	bl	8007058 <MX_53L5A1_SimpleRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 8006fb4:	bf00      	nop
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <MX_53L5A1_SimpleRanging_Init>:

static void MX_53L5A1_SimpleRanging_Init(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	f7fd f8e9 	bl	8004194 <BSP_COM_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	f7fd f84b 	bl	8004060 <BSP_PB_Init>

  /* Sensor reset */
  HAL_GPIO_WritePin(VL53L5A1_PWR_EN_C_PORT, VL53L5A1_PWR_EN_C_PIN, GPIO_PIN_RESET);
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2101      	movs	r1, #1
 8006fce:	481c      	ldr	r0, [pc, #112]	@ (8007040 <MX_53L5A1_SimpleRanging_Init+0x88>)
 8006fd0:	f7fd fdee 	bl	8004bb0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8006fd4:	2002      	movs	r0, #2
 8006fd6:	f7fd fa1f 	bl	8004418 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L5A1_PWR_EN_C_PORT, VL53L5A1_PWR_EN_C_PIN, GPIO_PIN_SET);
 8006fda:	2201      	movs	r2, #1
 8006fdc:	2101      	movs	r1, #1
 8006fde:	4818      	ldr	r0, [pc, #96]	@ (8007040 <MX_53L5A1_SimpleRanging_Init+0x88>)
 8006fe0:	f7fd fde6 	bl	8004bb0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8006fe4:	2002      	movs	r0, #2
 8006fe6:	f7fd fa17 	bl	8004418 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L5A1_LPn_C_PORT, VL53L5A1_LPn_C_PIN, GPIO_PIN_RESET);
 8006fea:	2200      	movs	r2, #0
 8006fec:	2110      	movs	r1, #16
 8006fee:	4814      	ldr	r0, [pc, #80]	@ (8007040 <MX_53L5A1_SimpleRanging_Init+0x88>)
 8006ff0:	f7fd fdde 	bl	8004bb0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8006ff4:	2002      	movs	r0, #2
 8006ff6:	f7fd fa0f 	bl	8004418 <HAL_Delay>
  HAL_GPIO_WritePin(VL53L5A1_LPn_C_PORT, VL53L5A1_LPn_C_PIN, GPIO_PIN_SET);
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	2110      	movs	r1, #16
 8006ffe:	4810      	ldr	r0, [pc, #64]	@ (8007040 <MX_53L5A1_SimpleRanging_Init+0x88>)
 8007000:	f7fd fdd6 	bl	8004bb0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8007004:	2002      	movs	r0, #2
 8007006:	f7fd fa07 	bl	8004418 <HAL_Delay>

  printf("\033[2H\033[2J");
 800700a:	480e      	ldr	r0, [pc, #56]	@ (8007044 <MX_53L5A1_SimpleRanging_Init+0x8c>)
 800700c:	f000 fb9a 	bl	8007744 <iprintf>
  printf("53L5A1 Simple Ranging demo application\n");
 8007010:	480d      	ldr	r0, [pc, #52]	@ (8007048 <MX_53L5A1_SimpleRanging_Init+0x90>)
 8007012:	f000 fc07 	bl	8007824 <puts>
  printf("Sensor initialization...\n");
 8007016:	480d      	ldr	r0, [pc, #52]	@ (800704c <MX_53L5A1_SimpleRanging_Init+0x94>)
 8007018:	f000 fc04 	bl	8007824 <puts>

  status = VL53L5A1_RANGING_SENSOR_Init(VL53L5A1_DEV_CENTER);
 800701c:	2001      	movs	r0, #1
 800701e:	f7f9 fe60 	bl	8000ce2 <VL53L5A1_RANGING_SENSOR_Init>
 8007022:	4603      	mov	r3, r0
 8007024:	4a0a      	ldr	r2, [pc, #40]	@ (8007050 <MX_53L5A1_SimpleRanging_Init+0x98>)
 8007026:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8007028:	4b09      	ldr	r3, [pc, #36]	@ (8007050 <MX_53L5A1_SimpleRanging_Init+0x98>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d004      	beq.n	800703a <MX_53L5A1_SimpleRanging_Init+0x82>
  {
    printf("VL53L5A1_RANGING_SENSOR_Init failed\n");
 8007030:	4808      	ldr	r0, [pc, #32]	@ (8007054 <MX_53L5A1_SimpleRanging_Init+0x9c>)
 8007032:	f000 fbf7 	bl	8007824 <puts>

    while (1);
 8007036:	bf00      	nop
 8007038:	e7fd      	b.n	8007036 <MX_53L5A1_SimpleRanging_Init+0x7e>
  }
}
 800703a:	bf00      	nop
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	40020400 	.word	0x40020400
 8007044:	080085fc 	.word	0x080085fc
 8007048:	08008608 	.word	0x08008608
 800704c:	08008630 	.word	0x08008630
 8007050:	20002fac 	.word	0x20002fac
 8007054:	0800864c 	.word	0x0800864c

08007058 <MX_53L5A1_SimpleRanging_Process>:

static void MX_53L5A1_SimpleRanging_Process(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
  uint32_t Id;

  VL53L5A1_RANGING_SENSOR_ReadID(VL53L5A1_DEV_CENTER, &Id);
 800705e:	1d3b      	adds	r3, r7, #4
 8007060:	4619      	mov	r1, r3
 8007062:	2001      	movs	r0, #1
 8007064:	f7f9 fe52 	bl	8000d0c <VL53L5A1_RANGING_SENSOR_ReadID>
  VL53L5A1_RANGING_SENSOR_GetCapabilities(VL53L5A1_DEV_CENTER, &Cap);
 8007068:	4921      	ldr	r1, [pc, #132]	@ (80070f0 <MX_53L5A1_SimpleRanging_Process+0x98>)
 800706a:	2001      	movs	r0, #1
 800706c:	f7f9 fe76 	bl	8000d5c <VL53L5A1_RANGING_SENSOR_GetCapabilities>

  Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 8007070:	4b20      	ldr	r3, [pc, #128]	@ (80070f4 <MX_53L5A1_SimpleRanging_Process+0x9c>)
 8007072:	2201      	movs	r2, #1
 8007074:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET;
 8007076:	4b1f      	ldr	r3, [pc, #124]	@ (80070f4 <MX_53L5A1_SimpleRanging_Process+0x9c>)
 8007078:	221e      	movs	r2, #30
 800707a:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 800707c:	4b1d      	ldr	r3, [pc, #116]	@ (80070f4 <MX_53L5A1_SimpleRanging_Process+0x9c>)
 800707e:	220a      	movs	r2, #10
 8007080:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 8007082:	4b1c      	ldr	r3, [pc, #112]	@ (80070f4 <MX_53L5A1_SimpleRanging_Process+0x9c>)
 8007084:	2200      	movs	r2, #0
 8007086:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 8007088:	4b1a      	ldr	r3, [pc, #104]	@ (80070f4 <MX_53L5A1_SimpleRanging_Process+0x9c>)
 800708a:	2200      	movs	r2, #0
 800708c:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  VL53L5A1_RANGING_SENSOR_ConfigProfile(VL53L5A1_DEV_CENTER, &Profile);
 800708e:	4919      	ldr	r1, [pc, #100]	@ (80070f4 <MX_53L5A1_SimpleRanging_Process+0x9c>)
 8007090:	2001      	movs	r0, #1
 8007092:	f7f9 fe8b 	bl	8000dac <VL53L5A1_RANGING_SENSOR_ConfigProfile>

  status = VL53L5A1_RANGING_SENSOR_Start(VL53L5A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8007096:	2101      	movs	r1, #1
 8007098:	2001      	movs	r0, #1
 800709a:	f7f9 fed7 	bl	8000e4c <VL53L5A1_RANGING_SENSOR_Start>
 800709e:	4603      	mov	r3, r0
 80070a0:	4a15      	ldr	r2, [pc, #84]	@ (80070f8 <MX_53L5A1_SimpleRanging_Process+0xa0>)
 80070a2:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 80070a4:	4b14      	ldr	r3, [pc, #80]	@ (80070f8 <MX_53L5A1_SimpleRanging_Process+0xa0>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <MX_53L5A1_SimpleRanging_Process+0x5e>
  {
    printf("VL53L5A1_RANGING_SENSOR_Start failed\n");
 80070ac:	4813      	ldr	r0, [pc, #76]	@ (80070fc <MX_53L5A1_SimpleRanging_Process+0xa4>)
 80070ae:	f000 fbb9 	bl	8007824 <puts>
    while (1);
 80070b2:	bf00      	nop
 80070b4:	e7fd      	b.n	80070b2 <MX_53L5A1_SimpleRanging_Process+0x5a>
  }

  while (1)
  {
    /* polling mode */
    status = VL53L5A1_RANGING_SENSOR_GetDistance(VL53L5A1_DEV_CENTER, &Result);
 80070b6:	4912      	ldr	r1, [pc, #72]	@ (8007100 <MX_53L5A1_SimpleRanging_Process+0xa8>)
 80070b8:	2001      	movs	r0, #1
 80070ba:	f7f9 fe9f 	bl	8000dfc <VL53L5A1_RANGING_SENSOR_GetDistance>
 80070be:	4603      	mov	r3, r0
 80070c0:	4a0d      	ldr	r2, [pc, #52]	@ (80070f8 <MX_53L5A1_SimpleRanging_Process+0xa0>)
 80070c2:	6013      	str	r3, [r2, #0]

    if (status == BSP_ERROR_NONE)
 80070c4:	4b0c      	ldr	r3, [pc, #48]	@ (80070f8 <MX_53L5A1_SimpleRanging_Process+0xa0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <MX_53L5A1_SimpleRanging_Process+0x7a>
    {
      print_result(&Result);
 80070cc:	480c      	ldr	r0, [pc, #48]	@ (8007100 <MX_53L5A1_SimpleRanging_Process+0xa8>)
 80070ce:	f000 f819 	bl	8007104 <print_result>
    }

    if (com_has_data())
 80070d2:	f000 fa3d 	bl	8007550 <com_has_data>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <MX_53L5A1_SimpleRanging_Process+0x90>
    {
      handle_cmd(get_key());
 80070dc:	f000 fa24 	bl	8007528 <get_key>
 80070e0:	4603      	mov	r3, r0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fa00 	bl	80074e8 <handle_cmd>
    }

    HAL_Delay(POLLING_PERIOD);
 80070e8:	2001      	movs	r0, #1
 80070ea:	f7fd f995 	bl	8004418 <HAL_Delay>
    status = VL53L5A1_RANGING_SENSOR_GetDistance(VL53L5A1_DEV_CENTER, &Result);
 80070ee:	e7e2      	b.n	80070b6 <MX_53L5A1_SimpleRanging_Process+0x5e>
 80070f0:	20002a84 	.word	0x20002a84
 80070f4:	20002a94 	.word	0x20002a94
 80070f8:	20002fac 	.word	0x20002fac
 80070fc:	08008670 	.word	0x08008670
 8007100:	20002aa8 	.word	0x20002aa8

08007104 <print_result>:
  }
}

//Function to print the results
static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8007104:	b590      	push	{r4, r7, lr}
 8007106:	b095      	sub	sp, #84	@ 0x54
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  int8_t l;
  uint8_t zones_per_line;
  //variable to save the distance data
  long int ourDistance[16];

  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 800710c:	4bb0      	ldr	r3, [pc, #704]	@ (80073d0 <print_result+0x2cc>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b04      	cmp	r3, #4
 8007112:	d003      	beq.n	800711c <print_result+0x18>
                    (Profile.RangingProfile == RS_PROFILE_8x8_CONTINUOUS)) ? 8 : 4;
 8007114:	4bae      	ldr	r3, [pc, #696]	@ (80073d0 <print_result+0x2cc>)
 8007116:	681b      	ldr	r3, [r3, #0]
  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 8007118:	2b03      	cmp	r3, #3
 800711a:	d101      	bne.n	8007120 <print_result+0x1c>
 800711c:	2308      	movs	r3, #8
 800711e:	e000      	b.n	8007122 <print_result+0x1e>
 8007120:	2304      	movs	r3, #4
 8007122:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

  display_commands_banner();
 8007126:	f000 f9d5 	bl	80074d4 <display_commands_banner>

  //printf("Cell Format :\n\n");
  for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 800712a:	2300      	movs	r3, #0
 800712c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8007130:	e013      	b.n	800715a <print_result+0x56>
  {
    //printf(" \033[38;5;10m%20s\033[0m : %20s\n", "Distance [mm]", "Status");
    if ((Profile.EnableAmbient != 0) || (Profile.EnableSignal != 0))
 8007132:	4ba7      	ldr	r3, [pc, #668]	@ (80073d0 <print_result+0x2cc>)
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d103      	bne.n	8007142 <print_result+0x3e>
 800713a:	4ba5      	ldr	r3, [pc, #660]	@ (80073d0 <print_result+0x2cc>)
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d004      	beq.n	800714c <print_result+0x48>
    {
      printf(" %20s : %20s\n", "Signal [kcps/spad]", "Ambient [kcps/spad]");
 8007142:	4aa4      	ldr	r2, [pc, #656]	@ (80073d4 <print_result+0x2d0>)
 8007144:	49a4      	ldr	r1, [pc, #656]	@ (80073d8 <print_result+0x2d4>)
 8007146:	48a5      	ldr	r0, [pc, #660]	@ (80073dc <print_result+0x2d8>)
 8007148:	f000 fafc 	bl	8007744 <iprintf>
  for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 800714c:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8007150:	b2db      	uxtb	r3, r3
 8007152:	3301      	adds	r3, #1
 8007154:	b2db      	uxtb	r3, r3
 8007156:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 800715a:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0e7      	beq.n	8007132 <print_result+0x2e>
    }
  }

  printf("\n\n");
 8007162:	489f      	ldr	r0, [pc, #636]	@ (80073e0 <print_result+0x2dc>)
 8007164:	f000 fb5e 	bl	8007824 <puts>

  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 8007168:	2300      	movs	r3, #0
 800716a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800716e:	e10a      	b.n	8007386 <print_result+0x282>
  {
    for (i = 0; i < zones_per_line; i++) /* number of zones per line */
 8007170:	2300      	movs	r3, #0
 8007172:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8007176:	e009      	b.n	800718c <print_result+0x88>
    {
      printf(" -----------------");
 8007178:	489a      	ldr	r0, [pc, #616]	@ (80073e4 <print_result+0x2e0>)
 800717a:	f000 fae3 	bl	8007744 <iprintf>
    for (i = 0; i < zones_per_line; i++) /* number of zones per line */
 800717e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8007182:	b2db      	uxtb	r3, r3
 8007184:	3301      	adds	r3, #1
 8007186:	b2db      	uxtb	r3, r3
 8007188:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800718c:	f997 204f 	ldrsb.w	r2, [r7, #79]	@ 0x4f
 8007190:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007194:	429a      	cmp	r2, r3
 8007196:	dbef      	blt.n	8007178 <print_result+0x74>
    }
    printf("\n");
 8007198:	200a      	movs	r0, #10
 800719a:	f000 fae5 	bl	8007768 <putchar>

    for (i = 0; i < zones_per_line; i++)
 800719e:	2300      	movs	r3, #0
 80071a0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80071a4:	e009      	b.n	80071ba <print_result+0xb6>
    {
      printf("|                 ");
 80071a6:	4890      	ldr	r0, [pc, #576]	@ (80073e8 <print_result+0x2e4>)
 80071a8:	f000 facc 	bl	8007744 <iprintf>
    for (i = 0; i < zones_per_line; i++)
 80071ac:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	3301      	adds	r3, #1
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80071ba:	f997 204f 	ldrsb.w	r2, [r7, #79]	@ 0x4f
 80071be:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80071c2:	429a      	cmp	r2, r3
 80071c4:	dbef      	blt.n	80071a6 <print_result+0xa2>
    }
    printf("|\n");
 80071c6:	4889      	ldr	r0, [pc, #548]	@ (80073ec <print_result+0x2e8>)
 80071c8:	f000 fb2c 	bl	8007824 <puts>

    for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 80071cc:	2300      	movs	r3, #0
 80071ce:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80071d2:	e0cb      	b.n	800736c <print_result+0x268>
    {
      /* Print distance and status */
      for (k = (zones_per_line - 1); k >= 0; k--)
 80071d4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80071d8:	3b01      	subs	r3, #1
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80071e0:	e040      	b.n	8007264 <print_result+0x160>
      {
        if (Result->ZoneResult[j + k].NumberOfTargets > 0)
 80071e2:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 80071e6:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80071ea:	441a      	add	r2, r3
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	440b      	add	r3, r1
 80071f8:	3304      	adds	r3, #4
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d025      	beq.n	800724c <print_result+0x148>
          printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
                 (long)Result->ZoneResult[j + k].Distance[l],
 8007200:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 8007204:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8007208:	441a      	add	r2, r3
 800720a:	f997 004c 	ldrsb.w	r0, [r7, #76]	@ 0x4c
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	4613      	mov	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	4403      	add	r3, r0
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	440b      	add	r3, r1
 800721c:	689b      	ldr	r3, [r3, #8]
          printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
 800721e:	461c      	mov	r4, r3
                 (long)Result->ZoneResult[j + k].Status[l]);
 8007220:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 8007224:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8007228:	441a      	add	r2, r3
 800722a:	f997 004c 	ldrsb.w	r0, [r7, #76]	@ 0x4c
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	4613      	mov	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	4403      	add	r3, r0
 8007238:	3302      	adds	r3, #2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	440b      	add	r3, r1
 800723e:	685b      	ldr	r3, [r3, #4]
          printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
 8007240:	461a      	mov	r2, r3
 8007242:	4621      	mov	r1, r4
 8007244:	486a      	ldr	r0, [pc, #424]	@ (80073f0 <print_result+0x2ec>)
 8007246:	f000 fa7d 	bl	8007744 <iprintf>
 800724a:	e004      	b.n	8007256 <print_result+0x152>
        else
          printf("| %5s  :  %5s ", "X", "X");
 800724c:	4a69      	ldr	r2, [pc, #420]	@ (80073f4 <print_result+0x2f0>)
 800724e:	4969      	ldr	r1, [pc, #420]	@ (80073f4 <print_result+0x2f0>)
 8007250:	4869      	ldr	r0, [pc, #420]	@ (80073f8 <print_result+0x2f4>)
 8007252:	f000 fa77 	bl	8007744 <iprintf>
      for (k = (zones_per_line - 1); k >= 0; k--)
 8007256:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800725a:	b2db      	uxtb	r3, r3
 800725c:	3b01      	subs	r3, #1
 800725e:	b2db      	uxtb	r3, r3
 8007260:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8007264:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8007268:	2b00      	cmp	r3, #0
 800726a:	daba      	bge.n	80071e2 <print_result+0xde>
      }
      printf("|\n");
 800726c:	485f      	ldr	r0, [pc, #380]	@ (80073ec <print_result+0x2e8>)
 800726e:	f000 fad9 	bl	8007824 <puts>

      if ((Profile.EnableAmbient != 0) || (Profile.EnableSignal != 0))
 8007272:	4b57      	ldr	r3, [pc, #348]	@ (80073d0 <print_result+0x2cc>)
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d103      	bne.n	8007282 <print_result+0x17e>
 800727a:	4b55      	ldr	r3, [pc, #340]	@ (80073d0 <print_result+0x2cc>)
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d06d      	beq.n	800735e <print_result+0x25a>
      {
        /* Print Signal and Ambient */
        for (k = (zones_per_line - 1); k >= 0; k--)
 8007282:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007286:	3b01      	subs	r3, #1
 8007288:	b2db      	uxtb	r3, r3
 800728a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800728e:	e05f      	b.n	8007350 <print_result+0x24c>
        {
          if (Result->ZoneResult[j + k].NumberOfTargets > 0)
 8007290:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 8007294:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8007298:	441a      	add	r2, r3
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	440b      	add	r3, r1
 80072a6:	3304      	adds	r3, #4
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d044      	beq.n	8007338 <print_result+0x234>
          {
            if (Profile.EnableSignal != 0)
 80072ae:	4b48      	ldr	r3, [pc, #288]	@ (80073d0 <print_result+0x2cc>)
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d019      	beq.n	80072ea <print_result+0x1e6>
            {
              printf("| %5ld  :  ", (long)Result->ZoneResult[j + k].Signal[l]);
 80072b6:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 80072ba:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80072be:	441a      	add	r2, r3
 80072c0:	f997 004c 	ldrsb.w	r0, [r7, #76]	@ 0x4c
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	4403      	add	r3, r0
 80072ce:	3304      	adds	r3, #4
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	440b      	add	r3, r1
 80072d4:	3304      	adds	r3, #4
 80072d6:	edd3 7a00 	vldr	s15, [r3]
 80072da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072de:	ee17 1a90 	vmov	r1, s15
 80072e2:	4846      	ldr	r0, [pc, #280]	@ (80073fc <print_result+0x2f8>)
 80072e4:	f000 fa2e 	bl	8007744 <iprintf>
 80072e8:	e003      	b.n	80072f2 <print_result+0x1ee>
            }
            else
              printf("| %5s  :  ", "X");
 80072ea:	4942      	ldr	r1, [pc, #264]	@ (80073f4 <print_result+0x2f0>)
 80072ec:	4844      	ldr	r0, [pc, #272]	@ (8007400 <print_result+0x2fc>)
 80072ee:	f000 fa29 	bl	8007744 <iprintf>

            if (Profile.EnableAmbient != 0)
 80072f2:	4b37      	ldr	r3, [pc, #220]	@ (80073d0 <print_result+0x2cc>)
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d019      	beq.n	800732e <print_result+0x22a>
            {
              printf("%5ld ", (long)Result->ZoneResult[j + k].Ambient[l]);
 80072fa:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 80072fe:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8007302:	441a      	add	r2, r3
 8007304:	f997 004c 	ldrsb.w	r0, [r7, #76]	@ 0x4c
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	4403      	add	r3, r0
 8007312:	3302      	adds	r3, #2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	3308      	adds	r3, #8
 800731a:	edd3 7a00 	vldr	s15, [r3]
 800731e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007322:	ee17 1a90 	vmov	r1, s15
 8007326:	4837      	ldr	r0, [pc, #220]	@ (8007404 <print_result+0x300>)
 8007328:	f000 fa0c 	bl	8007744 <iprintf>
 800732c:	e009      	b.n	8007342 <print_result+0x23e>
            }
            else
              printf("%5s ", "X");
 800732e:	4931      	ldr	r1, [pc, #196]	@ (80073f4 <print_result+0x2f0>)
 8007330:	4835      	ldr	r0, [pc, #212]	@ (8007408 <print_result+0x304>)
 8007332:	f000 fa07 	bl	8007744 <iprintf>
 8007336:	e004      	b.n	8007342 <print_result+0x23e>
          }
          else
            printf("| %5s  :  %5s ", "X", "X");
 8007338:	4a2e      	ldr	r2, [pc, #184]	@ (80073f4 <print_result+0x2f0>)
 800733a:	492e      	ldr	r1, [pc, #184]	@ (80073f4 <print_result+0x2f0>)
 800733c:	482e      	ldr	r0, [pc, #184]	@ (80073f8 <print_result+0x2f4>)
 800733e:	f000 fa01 	bl	8007744 <iprintf>
        for (k = (zones_per_line - 1); k >= 0; k--)
 8007342:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8007346:	b2db      	uxtb	r3, r3
 8007348:	3b01      	subs	r3, #1
 800734a:	b2db      	uxtb	r3, r3
 800734c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8007350:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8007354:	2b00      	cmp	r3, #0
 8007356:	da9b      	bge.n	8007290 <print_result+0x18c>
        }
        printf("|\n");
 8007358:	4824      	ldr	r0, [pc, #144]	@ (80073ec <print_result+0x2e8>)
 800735a:	f000 fa63 	bl	8007824 <puts>
    for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 800735e:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8007362:	b2db      	uxtb	r3, r3
 8007364:	3301      	adds	r3, #1
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 800736c:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8007370:	2b00      	cmp	r3, #0
 8007372:	f43f af2f 	beq.w	80071d4 <print_result+0xd0>
  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 8007376:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800737a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800737e:	4413      	add	r3, r2
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8007386:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	f4ff aeee 	bcc.w	8007170 <print_result+0x6c>
      }
    }
  }

  for (i = 0; i < zones_per_line; i++)
 8007394:	2300      	movs	r3, #0
 8007396:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800739a:	e009      	b.n	80073b0 <print_result+0x2ac>
  {
    printf(" -----------------");
 800739c:	4811      	ldr	r0, [pc, #68]	@ (80073e4 <print_result+0x2e0>)
 800739e:	f000 f9d1 	bl	8007744 <iprintf>
  for (i = 0; i < zones_per_line; i++)
 80073a2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	3301      	adds	r3, #1
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80073b0:	f997 204f 	ldrsb.w	r2, [r7, #79]	@ 0x4f
 80073b4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80073b8:	429a      	cmp	r2, r3
 80073ba:	dbef      	blt.n	800739c <print_result+0x298>
  }
  printf("\n");
 80073bc:	200a      	movs	r0, #10
 80073be:	f000 f9d3 	bl	8007768 <putchar>
  //Code to show the distance data:
  printf("\n");
 80073c2:	200a      	movs	r0, #10
 80073c4:	f000 f9d0 	bl	8007768 <putchar>

}
 80073c8:	bf00      	nop
 80073ca:	3754      	adds	r7, #84	@ 0x54
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd90      	pop	{r4, r7, pc}
 80073d0:	20002a94 	.word	0x20002a94
 80073d4:	08008698 	.word	0x08008698
 80073d8:	080086ac 	.word	0x080086ac
 80073dc:	080086c0 	.word	0x080086c0
 80073e0:	080086d0 	.word	0x080086d0
 80073e4:	080086d4 	.word	0x080086d4
 80073e8:	080086e8 	.word	0x080086e8
 80073ec:	080086fc 	.word	0x080086fc
 80073f0:	08008700 	.word	0x08008700
 80073f4:	08008720 	.word	0x08008720
 80073f8:	08008724 	.word	0x08008724
 80073fc:	08008734 	.word	0x08008734
 8007400:	08008740 	.word	0x08008740
 8007404:	0800874c 	.word	0x0800874c
 8007408:	08008754 	.word	0x08008754

0800740c <toggle_resolution>:

static void toggle_resolution(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
  VL53L5A1_RANGING_SENSOR_Stop(VL53L5A1_DEV_CENTER);
 8007410:	2001      	movs	r0, #1
 8007412:	f7f9 fd43 	bl	8000e9c <VL53L5A1_RANGING_SENSOR_Stop>

  switch (Profile.RangingProfile)
 8007416:	4b16      	ldr	r3, [pc, #88]	@ (8007470 <toggle_resolution+0x64>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3b01      	subs	r3, #1
 800741c:	2b03      	cmp	r3, #3
 800741e:	d81b      	bhi.n	8007458 <toggle_resolution+0x4c>
 8007420:	a201      	add	r2, pc, #4	@ (adr r2, 8007428 <toggle_resolution+0x1c>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	08007441 	.word	0x08007441
 800742c:	08007439 	.word	0x08007439
 8007430:	08007451 	.word	0x08007451
 8007434:	08007449 	.word	0x08007449
  {
    case RS_PROFILE_4x4_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_AUTONOMOUS;
 8007438:	4b0d      	ldr	r3, [pc, #52]	@ (8007470 <toggle_resolution+0x64>)
 800743a:	2204      	movs	r2, #4
 800743c:	601a      	str	r2, [r3, #0]
      break;
 800743e:	e00c      	b.n	800745a <toggle_resolution+0x4e>

    case RS_PROFILE_4x4_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 8007440:	4b0b      	ldr	r3, [pc, #44]	@ (8007470 <toggle_resolution+0x64>)
 8007442:	2203      	movs	r2, #3
 8007444:	601a      	str	r2, [r3, #0]
      break;
 8007446:	e008      	b.n	800745a <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_AUTONOMOUS;
 8007448:	4b09      	ldr	r3, [pc, #36]	@ (8007470 <toggle_resolution+0x64>)
 800744a:	2202      	movs	r2, #2
 800744c:	601a      	str	r2, [r3, #0]
      break;
 800744e:	e004      	b.n	800745a <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 8007450:	4b07      	ldr	r3, [pc, #28]	@ (8007470 <toggle_resolution+0x64>)
 8007452:	2201      	movs	r2, #1
 8007454:	601a      	str	r2, [r3, #0]
      break;
 8007456:	e000      	b.n	800745a <toggle_resolution+0x4e>

    default:
      break;
 8007458:	bf00      	nop
  }

  VL53L5A1_RANGING_SENSOR_ConfigProfile(VL53L5A1_DEV_CENTER, &Profile);
 800745a:	4905      	ldr	r1, [pc, #20]	@ (8007470 <toggle_resolution+0x64>)
 800745c:	2001      	movs	r0, #1
 800745e:	f7f9 fca5 	bl	8000dac <VL53L5A1_RANGING_SENSOR_ConfigProfile>
  VL53L5A1_RANGING_SENSOR_Start(VL53L5A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8007462:	2101      	movs	r1, #1
 8007464:	2001      	movs	r0, #1
 8007466:	f7f9 fcf1 	bl	8000e4c <VL53L5A1_RANGING_SENSOR_Start>
}
 800746a:	bf00      	nop
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	20002a94 	.word	0x20002a94

08007474 <toggle_signal_and_ambient>:

static void toggle_signal_and_ambient(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  VL53L5A1_RANGING_SENSOR_Stop(VL53L5A1_DEV_CENTER);
 8007478:	2001      	movs	r0, #1
 800747a:	f7f9 fd0f 	bl	8000e9c <VL53L5A1_RANGING_SENSOR_Stop>

  Profile.EnableAmbient = (Profile.EnableAmbient) ? 0U : 1U;
 800747e:	4b0f      	ldr	r3, [pc, #60]	@ (80074bc <toggle_signal_and_ambient+0x48>)
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	bf0c      	ite	eq
 8007486:	2301      	moveq	r3, #1
 8007488:	2300      	movne	r3, #0
 800748a:	b2db      	uxtb	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	4b0b      	ldr	r3, [pc, #44]	@ (80074bc <toggle_signal_and_ambient+0x48>)
 8007490:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = (Profile.EnableSignal) ? 0U : 1U;
 8007492:	4b0a      	ldr	r3, [pc, #40]	@ (80074bc <toggle_signal_and_ambient+0x48>)
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	bf0c      	ite	eq
 800749a:	2301      	moveq	r3, #1
 800749c:	2300      	movne	r3, #0
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	461a      	mov	r2, r3
 80074a2:	4b06      	ldr	r3, [pc, #24]	@ (80074bc <toggle_signal_and_ambient+0x48>)
 80074a4:	611a      	str	r2, [r3, #16]

  VL53L5A1_RANGING_SENSOR_ConfigProfile(VL53L5A1_DEV_CENTER, &Profile);
 80074a6:	4905      	ldr	r1, [pc, #20]	@ (80074bc <toggle_signal_and_ambient+0x48>)
 80074a8:	2001      	movs	r0, #1
 80074aa:	f7f9 fc7f 	bl	8000dac <VL53L5A1_RANGING_SENSOR_ConfigProfile>
  VL53L5A1_RANGING_SENSOR_Start(VL53L5A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 80074ae:	2101      	movs	r1, #1
 80074b0:	2001      	movs	r0, #1
 80074b2:	f7f9 fccb 	bl	8000e4c <VL53L5A1_RANGING_SENSOR_Start>
}
 80074b6:	bf00      	nop
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20002a94 	.word	0x20002a94

080074c0 <clear_screen>:

static void clear_screen(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  printf("%c[2J", 27); /* 27 is ESC command */
 80074c4:	211b      	movs	r1, #27
 80074c6:	4802      	ldr	r0, [pc, #8]	@ (80074d0 <clear_screen+0x10>)
 80074c8:	f000 f93c 	bl	8007744 <iprintf>
}
 80074cc:	bf00      	nop
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	0800875c 	.word	0x0800875c

080074d4 <display_commands_banner>:

static void display_commands_banner(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* clear screen */
  printf("%c[2H", 27);
 80074d8:	211b      	movs	r1, #27
 80074da:	4802      	ldr	r0, [pc, #8]	@ (80074e4 <display_commands_banner+0x10>)
 80074dc:	f000 f932 	bl	8007744 <iprintf>
  printf("Use the following keys to control application\n");
  printf(" 'r' : change resolution\n");
  printf(" 's' : enable signal and ambient\n");
  printf(" 'c' : clear screen\n");*/
  //printf("\n");
}
 80074e0:	bf00      	nop
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	08008764 	.word	0x08008764

080074e8 <handle_cmd>:

static void handle_cmd(uint8_t cmd)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4603      	mov	r3, r0
 80074f0:	71fb      	strb	r3, [r7, #7]
  switch (cmd)
 80074f2:	79fb      	ldrb	r3, [r7, #7]
 80074f4:	2b73      	cmp	r3, #115	@ 0x73
 80074f6:	d00a      	beq.n	800750e <handle_cmd+0x26>
 80074f8:	2b73      	cmp	r3, #115	@ 0x73
 80074fa:	dc10      	bgt.n	800751e <handle_cmd+0x36>
 80074fc:	2b63      	cmp	r3, #99	@ 0x63
 80074fe:	d00b      	beq.n	8007518 <handle_cmd+0x30>
 8007500:	2b72      	cmp	r3, #114	@ 0x72
 8007502:	d10c      	bne.n	800751e <handle_cmd+0x36>
  {
    case 'r':
      toggle_resolution();
 8007504:	f7ff ff82 	bl	800740c <toggle_resolution>
      clear_screen();
 8007508:	f7ff ffda 	bl	80074c0 <clear_screen>
      break;
 800750c:	e008      	b.n	8007520 <handle_cmd+0x38>

    case 's':
      toggle_signal_and_ambient();
 800750e:	f7ff ffb1 	bl	8007474 <toggle_signal_and_ambient>
      clear_screen();
 8007512:	f7ff ffd5 	bl	80074c0 <clear_screen>
      break;
 8007516:	e003      	b.n	8007520 <handle_cmd+0x38>

    case 'c':
      clear_screen();
 8007518:	f7ff ffd2 	bl	80074c0 <clear_screen>
      break;
 800751c:	e000      	b.n	8007520 <handle_cmd+0x38>

    default:
      break;
 800751e:	bf00      	nop
  }
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <get_key>:

static uint8_t get_key(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
  uint8_t cmd = 0;
 800752e:	2300      	movs	r3, #0
 8007530:	71fb      	strb	r3, [r7, #7]

  HAL_UART_Receive(&hcom_uart[COM1], &cmd, 1, HAL_MAX_DELAY);
 8007532:	1df9      	adds	r1, r7, #7
 8007534:	f04f 33ff 	mov.w	r3, #4294967295
 8007538:	2201      	movs	r2, #1
 800753a:	4804      	ldr	r0, [pc, #16]	@ (800754c <get_key+0x24>)
 800753c:	f7ff f969 	bl	8006812 <HAL_UART_Receive>

  return cmd;
 8007540:	79fb      	ldrb	r3, [r7, #7]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20002a34 	.word	0x20002a34

08007550 <com_has_data>:

static uint32_t com_has_data(void)
{
 8007550:	b480      	push	{r7}
 8007552:	af00      	add	r7, sp, #0
  return __HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_RXNE);;
 8007554:	4b07      	ldr	r3, [pc, #28]	@ (8007574 <com_has_data+0x24>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b20      	cmp	r3, #32
 8007560:	bf0c      	ite	eq
 8007562:	2301      	moveq	r3, #1
 8007564:	2300      	movne	r3, #0
 8007566:	b2db      	uxtb	r3, r3
}
 8007568:	4618      	mov	r0, r3
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20002a34 	.word	0x20002a34

08007578 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8007582:	4b04      	ldr	r3, [pc, #16]	@ (8007594 <BSP_PB_Callback+0x1c>)
 8007584:	2201      	movs	r2, #1
 8007586:	701a      	strb	r2, [r3, #0]
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	20002fb0 	.word	0x20002fb0

08007598 <HAL_GPIO_EXTI_Callback>:
    ToF_EventDetected = 1;
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 80075a2:	88fb      	ldrh	r3, [r7, #6]
 80075a4:	2b10      	cmp	r3, #16
 80075a6:	d102      	bne.n	80075ae <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 80075a8:	4b04      	ldr	r3, [pc, #16]	@ (80075bc <HAL_GPIO_EXTI_Callback+0x24>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	701a      	strb	r2, [r3, #0]
  }
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	20002fb1 	.word	0x20002fb1

080075c0 <std>:
 80075c0:	2300      	movs	r3, #0
 80075c2:	b510      	push	{r4, lr}
 80075c4:	4604      	mov	r4, r0
 80075c6:	e9c0 3300 	strd	r3, r3, [r0]
 80075ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075ce:	6083      	str	r3, [r0, #8]
 80075d0:	8181      	strh	r1, [r0, #12]
 80075d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80075d4:	81c2      	strh	r2, [r0, #14]
 80075d6:	6183      	str	r3, [r0, #24]
 80075d8:	4619      	mov	r1, r3
 80075da:	2208      	movs	r2, #8
 80075dc:	305c      	adds	r0, #92	@ 0x5c
 80075de:	f000 fa01 	bl	80079e4 <memset>
 80075e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007618 <std+0x58>)
 80075e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80075e6:	4b0d      	ldr	r3, [pc, #52]	@ (800761c <std+0x5c>)
 80075e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80075ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007620 <std+0x60>)
 80075ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007624 <std+0x64>)
 80075f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80075f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007628 <std+0x68>)
 80075f4:	6224      	str	r4, [r4, #32]
 80075f6:	429c      	cmp	r4, r3
 80075f8:	d006      	beq.n	8007608 <std+0x48>
 80075fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80075fe:	4294      	cmp	r4, r2
 8007600:	d002      	beq.n	8007608 <std+0x48>
 8007602:	33d0      	adds	r3, #208	@ 0xd0
 8007604:	429c      	cmp	r4, r3
 8007606:	d105      	bne.n	8007614 <std+0x54>
 8007608:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800760c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007610:	f000 ba60 	b.w	8007ad4 <__retarget_lock_init_recursive>
 8007614:	bd10      	pop	{r4, pc}
 8007616:	bf00      	nop
 8007618:	08007835 	.word	0x08007835
 800761c:	08007857 	.word	0x08007857
 8007620:	0800788f 	.word	0x0800788f
 8007624:	080078b3 	.word	0x080078b3
 8007628:	20002fb4 	.word	0x20002fb4

0800762c <stdio_exit_handler>:
 800762c:	4a02      	ldr	r2, [pc, #8]	@ (8007638 <stdio_exit_handler+0xc>)
 800762e:	4903      	ldr	r1, [pc, #12]	@ (800763c <stdio_exit_handler+0x10>)
 8007630:	4803      	ldr	r0, [pc, #12]	@ (8007640 <stdio_exit_handler+0x14>)
 8007632:	f000 b869 	b.w	8007708 <_fwalk_sglue>
 8007636:	bf00      	nop
 8007638:	20000050 	.word	0x20000050
 800763c:	08008391 	.word	0x08008391
 8007640:	20000060 	.word	0x20000060

08007644 <cleanup_stdio>:
 8007644:	6841      	ldr	r1, [r0, #4]
 8007646:	4b0c      	ldr	r3, [pc, #48]	@ (8007678 <cleanup_stdio+0x34>)
 8007648:	4299      	cmp	r1, r3
 800764a:	b510      	push	{r4, lr}
 800764c:	4604      	mov	r4, r0
 800764e:	d001      	beq.n	8007654 <cleanup_stdio+0x10>
 8007650:	f000 fe9e 	bl	8008390 <_fflush_r>
 8007654:	68a1      	ldr	r1, [r4, #8]
 8007656:	4b09      	ldr	r3, [pc, #36]	@ (800767c <cleanup_stdio+0x38>)
 8007658:	4299      	cmp	r1, r3
 800765a:	d002      	beq.n	8007662 <cleanup_stdio+0x1e>
 800765c:	4620      	mov	r0, r4
 800765e:	f000 fe97 	bl	8008390 <_fflush_r>
 8007662:	68e1      	ldr	r1, [r4, #12]
 8007664:	4b06      	ldr	r3, [pc, #24]	@ (8007680 <cleanup_stdio+0x3c>)
 8007666:	4299      	cmp	r1, r3
 8007668:	d004      	beq.n	8007674 <cleanup_stdio+0x30>
 800766a:	4620      	mov	r0, r4
 800766c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007670:	f000 be8e 	b.w	8008390 <_fflush_r>
 8007674:	bd10      	pop	{r4, pc}
 8007676:	bf00      	nop
 8007678:	20002fb4 	.word	0x20002fb4
 800767c:	2000301c 	.word	0x2000301c
 8007680:	20003084 	.word	0x20003084

08007684 <global_stdio_init.part.0>:
 8007684:	b510      	push	{r4, lr}
 8007686:	4b0b      	ldr	r3, [pc, #44]	@ (80076b4 <global_stdio_init.part.0+0x30>)
 8007688:	4c0b      	ldr	r4, [pc, #44]	@ (80076b8 <global_stdio_init.part.0+0x34>)
 800768a:	4a0c      	ldr	r2, [pc, #48]	@ (80076bc <global_stdio_init.part.0+0x38>)
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	4620      	mov	r0, r4
 8007690:	2200      	movs	r2, #0
 8007692:	2104      	movs	r1, #4
 8007694:	f7ff ff94 	bl	80075c0 <std>
 8007698:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800769c:	2201      	movs	r2, #1
 800769e:	2109      	movs	r1, #9
 80076a0:	f7ff ff8e 	bl	80075c0 <std>
 80076a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076a8:	2202      	movs	r2, #2
 80076aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ae:	2112      	movs	r1, #18
 80076b0:	f7ff bf86 	b.w	80075c0 <std>
 80076b4:	200030ec 	.word	0x200030ec
 80076b8:	20002fb4 	.word	0x20002fb4
 80076bc:	0800762d 	.word	0x0800762d

080076c0 <__sfp_lock_acquire>:
 80076c0:	4801      	ldr	r0, [pc, #4]	@ (80076c8 <__sfp_lock_acquire+0x8>)
 80076c2:	f000 ba08 	b.w	8007ad6 <__retarget_lock_acquire_recursive>
 80076c6:	bf00      	nop
 80076c8:	200030f5 	.word	0x200030f5

080076cc <__sfp_lock_release>:
 80076cc:	4801      	ldr	r0, [pc, #4]	@ (80076d4 <__sfp_lock_release+0x8>)
 80076ce:	f000 ba03 	b.w	8007ad8 <__retarget_lock_release_recursive>
 80076d2:	bf00      	nop
 80076d4:	200030f5 	.word	0x200030f5

080076d8 <__sinit>:
 80076d8:	b510      	push	{r4, lr}
 80076da:	4604      	mov	r4, r0
 80076dc:	f7ff fff0 	bl	80076c0 <__sfp_lock_acquire>
 80076e0:	6a23      	ldr	r3, [r4, #32]
 80076e2:	b11b      	cbz	r3, 80076ec <__sinit+0x14>
 80076e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e8:	f7ff bff0 	b.w	80076cc <__sfp_lock_release>
 80076ec:	4b04      	ldr	r3, [pc, #16]	@ (8007700 <__sinit+0x28>)
 80076ee:	6223      	str	r3, [r4, #32]
 80076f0:	4b04      	ldr	r3, [pc, #16]	@ (8007704 <__sinit+0x2c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1f5      	bne.n	80076e4 <__sinit+0xc>
 80076f8:	f7ff ffc4 	bl	8007684 <global_stdio_init.part.0>
 80076fc:	e7f2      	b.n	80076e4 <__sinit+0xc>
 80076fe:	bf00      	nop
 8007700:	08007645 	.word	0x08007645
 8007704:	200030ec 	.word	0x200030ec

08007708 <_fwalk_sglue>:
 8007708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800770c:	4607      	mov	r7, r0
 800770e:	4688      	mov	r8, r1
 8007710:	4614      	mov	r4, r2
 8007712:	2600      	movs	r6, #0
 8007714:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007718:	f1b9 0901 	subs.w	r9, r9, #1
 800771c:	d505      	bpl.n	800772a <_fwalk_sglue+0x22>
 800771e:	6824      	ldr	r4, [r4, #0]
 8007720:	2c00      	cmp	r4, #0
 8007722:	d1f7      	bne.n	8007714 <_fwalk_sglue+0xc>
 8007724:	4630      	mov	r0, r6
 8007726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772a:	89ab      	ldrh	r3, [r5, #12]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d907      	bls.n	8007740 <_fwalk_sglue+0x38>
 8007730:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007734:	3301      	adds	r3, #1
 8007736:	d003      	beq.n	8007740 <_fwalk_sglue+0x38>
 8007738:	4629      	mov	r1, r5
 800773a:	4638      	mov	r0, r7
 800773c:	47c0      	blx	r8
 800773e:	4306      	orrs	r6, r0
 8007740:	3568      	adds	r5, #104	@ 0x68
 8007742:	e7e9      	b.n	8007718 <_fwalk_sglue+0x10>

08007744 <iprintf>:
 8007744:	b40f      	push	{r0, r1, r2, r3}
 8007746:	b507      	push	{r0, r1, r2, lr}
 8007748:	4906      	ldr	r1, [pc, #24]	@ (8007764 <iprintf+0x20>)
 800774a:	ab04      	add	r3, sp, #16
 800774c:	6808      	ldr	r0, [r1, #0]
 800774e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007752:	6881      	ldr	r1, [r0, #8]
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	f000 faf1 	bl	8007d3c <_vfiprintf_r>
 800775a:	b003      	add	sp, #12
 800775c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007760:	b004      	add	sp, #16
 8007762:	4770      	bx	lr
 8007764:	2000005c 	.word	0x2000005c

08007768 <putchar>:
 8007768:	4b02      	ldr	r3, [pc, #8]	@ (8007774 <putchar+0xc>)
 800776a:	4601      	mov	r1, r0
 800776c:	6818      	ldr	r0, [r3, #0]
 800776e:	6882      	ldr	r2, [r0, #8]
 8007770:	f000 be98 	b.w	80084a4 <_putc_r>
 8007774:	2000005c 	.word	0x2000005c

08007778 <_puts_r>:
 8007778:	6a03      	ldr	r3, [r0, #32]
 800777a:	b570      	push	{r4, r5, r6, lr}
 800777c:	6884      	ldr	r4, [r0, #8]
 800777e:	4605      	mov	r5, r0
 8007780:	460e      	mov	r6, r1
 8007782:	b90b      	cbnz	r3, 8007788 <_puts_r+0x10>
 8007784:	f7ff ffa8 	bl	80076d8 <__sinit>
 8007788:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800778a:	07db      	lsls	r3, r3, #31
 800778c:	d405      	bmi.n	800779a <_puts_r+0x22>
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	0598      	lsls	r0, r3, #22
 8007792:	d402      	bmi.n	800779a <_puts_r+0x22>
 8007794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007796:	f000 f99e 	bl	8007ad6 <__retarget_lock_acquire_recursive>
 800779a:	89a3      	ldrh	r3, [r4, #12]
 800779c:	0719      	lsls	r1, r3, #28
 800779e:	d502      	bpl.n	80077a6 <_puts_r+0x2e>
 80077a0:	6923      	ldr	r3, [r4, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d135      	bne.n	8007812 <_puts_r+0x9a>
 80077a6:	4621      	mov	r1, r4
 80077a8:	4628      	mov	r0, r5
 80077aa:	f000 f8c5 	bl	8007938 <__swsetup_r>
 80077ae:	b380      	cbz	r0, 8007812 <_puts_r+0x9a>
 80077b0:	f04f 35ff 	mov.w	r5, #4294967295
 80077b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077b6:	07da      	lsls	r2, r3, #31
 80077b8:	d405      	bmi.n	80077c6 <_puts_r+0x4e>
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	059b      	lsls	r3, r3, #22
 80077be:	d402      	bmi.n	80077c6 <_puts_r+0x4e>
 80077c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077c2:	f000 f989 	bl	8007ad8 <__retarget_lock_release_recursive>
 80077c6:	4628      	mov	r0, r5
 80077c8:	bd70      	pop	{r4, r5, r6, pc}
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	da04      	bge.n	80077d8 <_puts_r+0x60>
 80077ce:	69a2      	ldr	r2, [r4, #24]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	dc17      	bgt.n	8007804 <_puts_r+0x8c>
 80077d4:	290a      	cmp	r1, #10
 80077d6:	d015      	beq.n	8007804 <_puts_r+0x8c>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	6022      	str	r2, [r4, #0]
 80077de:	7019      	strb	r1, [r3, #0]
 80077e0:	68a3      	ldr	r3, [r4, #8]
 80077e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077e6:	3b01      	subs	r3, #1
 80077e8:	60a3      	str	r3, [r4, #8]
 80077ea:	2900      	cmp	r1, #0
 80077ec:	d1ed      	bne.n	80077ca <_puts_r+0x52>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	da11      	bge.n	8007816 <_puts_r+0x9e>
 80077f2:	4622      	mov	r2, r4
 80077f4:	210a      	movs	r1, #10
 80077f6:	4628      	mov	r0, r5
 80077f8:	f000 f85f 	bl	80078ba <__swbuf_r>
 80077fc:	3001      	adds	r0, #1
 80077fe:	d0d7      	beq.n	80077b0 <_puts_r+0x38>
 8007800:	250a      	movs	r5, #10
 8007802:	e7d7      	b.n	80077b4 <_puts_r+0x3c>
 8007804:	4622      	mov	r2, r4
 8007806:	4628      	mov	r0, r5
 8007808:	f000 f857 	bl	80078ba <__swbuf_r>
 800780c:	3001      	adds	r0, #1
 800780e:	d1e7      	bne.n	80077e0 <_puts_r+0x68>
 8007810:	e7ce      	b.n	80077b0 <_puts_r+0x38>
 8007812:	3e01      	subs	r6, #1
 8007814:	e7e4      	b.n	80077e0 <_puts_r+0x68>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	1c5a      	adds	r2, r3, #1
 800781a:	6022      	str	r2, [r4, #0]
 800781c:	220a      	movs	r2, #10
 800781e:	701a      	strb	r2, [r3, #0]
 8007820:	e7ee      	b.n	8007800 <_puts_r+0x88>
	...

08007824 <puts>:
 8007824:	4b02      	ldr	r3, [pc, #8]	@ (8007830 <puts+0xc>)
 8007826:	4601      	mov	r1, r0
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	f7ff bfa5 	b.w	8007778 <_puts_r>
 800782e:	bf00      	nop
 8007830:	2000005c 	.word	0x2000005c

08007834 <__sread>:
 8007834:	b510      	push	{r4, lr}
 8007836:	460c      	mov	r4, r1
 8007838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783c:	f000 f8fc 	bl	8007a38 <_read_r>
 8007840:	2800      	cmp	r0, #0
 8007842:	bfab      	itete	ge
 8007844:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007846:	89a3      	ldrhlt	r3, [r4, #12]
 8007848:	181b      	addge	r3, r3, r0
 800784a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800784e:	bfac      	ite	ge
 8007850:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007852:	81a3      	strhlt	r3, [r4, #12]
 8007854:	bd10      	pop	{r4, pc}

08007856 <__swrite>:
 8007856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800785a:	461f      	mov	r7, r3
 800785c:	898b      	ldrh	r3, [r1, #12]
 800785e:	05db      	lsls	r3, r3, #23
 8007860:	4605      	mov	r5, r0
 8007862:	460c      	mov	r4, r1
 8007864:	4616      	mov	r6, r2
 8007866:	d505      	bpl.n	8007874 <__swrite+0x1e>
 8007868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800786c:	2302      	movs	r3, #2
 800786e:	2200      	movs	r2, #0
 8007870:	f000 f8d0 	bl	8007a14 <_lseek_r>
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800787e:	81a3      	strh	r3, [r4, #12]
 8007880:	4632      	mov	r2, r6
 8007882:	463b      	mov	r3, r7
 8007884:	4628      	mov	r0, r5
 8007886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800788a:	f000 b8e7 	b.w	8007a5c <_write_r>

0800788e <__sseek>:
 800788e:	b510      	push	{r4, lr}
 8007890:	460c      	mov	r4, r1
 8007892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007896:	f000 f8bd 	bl	8007a14 <_lseek_r>
 800789a:	1c43      	adds	r3, r0, #1
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	bf15      	itete	ne
 80078a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078aa:	81a3      	strheq	r3, [r4, #12]
 80078ac:	bf18      	it	ne
 80078ae:	81a3      	strhne	r3, [r4, #12]
 80078b0:	bd10      	pop	{r4, pc}

080078b2 <__sclose>:
 80078b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b6:	f000 b89d 	b.w	80079f4 <_close_r>

080078ba <__swbuf_r>:
 80078ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078bc:	460e      	mov	r6, r1
 80078be:	4614      	mov	r4, r2
 80078c0:	4605      	mov	r5, r0
 80078c2:	b118      	cbz	r0, 80078cc <__swbuf_r+0x12>
 80078c4:	6a03      	ldr	r3, [r0, #32]
 80078c6:	b90b      	cbnz	r3, 80078cc <__swbuf_r+0x12>
 80078c8:	f7ff ff06 	bl	80076d8 <__sinit>
 80078cc:	69a3      	ldr	r3, [r4, #24]
 80078ce:	60a3      	str	r3, [r4, #8]
 80078d0:	89a3      	ldrh	r3, [r4, #12]
 80078d2:	071a      	lsls	r2, r3, #28
 80078d4:	d501      	bpl.n	80078da <__swbuf_r+0x20>
 80078d6:	6923      	ldr	r3, [r4, #16]
 80078d8:	b943      	cbnz	r3, 80078ec <__swbuf_r+0x32>
 80078da:	4621      	mov	r1, r4
 80078dc:	4628      	mov	r0, r5
 80078de:	f000 f82b 	bl	8007938 <__swsetup_r>
 80078e2:	b118      	cbz	r0, 80078ec <__swbuf_r+0x32>
 80078e4:	f04f 37ff 	mov.w	r7, #4294967295
 80078e8:	4638      	mov	r0, r7
 80078ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	6922      	ldr	r2, [r4, #16]
 80078f0:	1a98      	subs	r0, r3, r2
 80078f2:	6963      	ldr	r3, [r4, #20]
 80078f4:	b2f6      	uxtb	r6, r6
 80078f6:	4283      	cmp	r3, r0
 80078f8:	4637      	mov	r7, r6
 80078fa:	dc05      	bgt.n	8007908 <__swbuf_r+0x4e>
 80078fc:	4621      	mov	r1, r4
 80078fe:	4628      	mov	r0, r5
 8007900:	f000 fd46 	bl	8008390 <_fflush_r>
 8007904:	2800      	cmp	r0, #0
 8007906:	d1ed      	bne.n	80078e4 <__swbuf_r+0x2a>
 8007908:	68a3      	ldr	r3, [r4, #8]
 800790a:	3b01      	subs	r3, #1
 800790c:	60a3      	str	r3, [r4, #8]
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	6022      	str	r2, [r4, #0]
 8007914:	701e      	strb	r6, [r3, #0]
 8007916:	6962      	ldr	r2, [r4, #20]
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	429a      	cmp	r2, r3
 800791c:	d004      	beq.n	8007928 <__swbuf_r+0x6e>
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	07db      	lsls	r3, r3, #31
 8007922:	d5e1      	bpl.n	80078e8 <__swbuf_r+0x2e>
 8007924:	2e0a      	cmp	r6, #10
 8007926:	d1df      	bne.n	80078e8 <__swbuf_r+0x2e>
 8007928:	4621      	mov	r1, r4
 800792a:	4628      	mov	r0, r5
 800792c:	f000 fd30 	bl	8008390 <_fflush_r>
 8007930:	2800      	cmp	r0, #0
 8007932:	d0d9      	beq.n	80078e8 <__swbuf_r+0x2e>
 8007934:	e7d6      	b.n	80078e4 <__swbuf_r+0x2a>
	...

08007938 <__swsetup_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4b29      	ldr	r3, [pc, #164]	@ (80079e0 <__swsetup_r+0xa8>)
 800793c:	4605      	mov	r5, r0
 800793e:	6818      	ldr	r0, [r3, #0]
 8007940:	460c      	mov	r4, r1
 8007942:	b118      	cbz	r0, 800794c <__swsetup_r+0x14>
 8007944:	6a03      	ldr	r3, [r0, #32]
 8007946:	b90b      	cbnz	r3, 800794c <__swsetup_r+0x14>
 8007948:	f7ff fec6 	bl	80076d8 <__sinit>
 800794c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007950:	0719      	lsls	r1, r3, #28
 8007952:	d422      	bmi.n	800799a <__swsetup_r+0x62>
 8007954:	06da      	lsls	r2, r3, #27
 8007956:	d407      	bmi.n	8007968 <__swsetup_r+0x30>
 8007958:	2209      	movs	r2, #9
 800795a:	602a      	str	r2, [r5, #0]
 800795c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007960:	81a3      	strh	r3, [r4, #12]
 8007962:	f04f 30ff 	mov.w	r0, #4294967295
 8007966:	e033      	b.n	80079d0 <__swsetup_r+0x98>
 8007968:	0758      	lsls	r0, r3, #29
 800796a:	d512      	bpl.n	8007992 <__swsetup_r+0x5a>
 800796c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800796e:	b141      	cbz	r1, 8007982 <__swsetup_r+0x4a>
 8007970:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007974:	4299      	cmp	r1, r3
 8007976:	d002      	beq.n	800797e <__swsetup_r+0x46>
 8007978:	4628      	mov	r0, r5
 800797a:	f000 f8bd 	bl	8007af8 <_free_r>
 800797e:	2300      	movs	r3, #0
 8007980:	6363      	str	r3, [r4, #52]	@ 0x34
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007988:	81a3      	strh	r3, [r4, #12]
 800798a:	2300      	movs	r3, #0
 800798c:	6063      	str	r3, [r4, #4]
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	89a3      	ldrh	r3, [r4, #12]
 8007994:	f043 0308 	orr.w	r3, r3, #8
 8007998:	81a3      	strh	r3, [r4, #12]
 800799a:	6923      	ldr	r3, [r4, #16]
 800799c:	b94b      	cbnz	r3, 80079b2 <__swsetup_r+0x7a>
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80079a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079a8:	d003      	beq.n	80079b2 <__swsetup_r+0x7a>
 80079aa:	4621      	mov	r1, r4
 80079ac:	4628      	mov	r0, r5
 80079ae:	f000 fd3d 	bl	800842c <__smakebuf_r>
 80079b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b6:	f013 0201 	ands.w	r2, r3, #1
 80079ba:	d00a      	beq.n	80079d2 <__swsetup_r+0x9a>
 80079bc:	2200      	movs	r2, #0
 80079be:	60a2      	str	r2, [r4, #8]
 80079c0:	6962      	ldr	r2, [r4, #20]
 80079c2:	4252      	negs	r2, r2
 80079c4:	61a2      	str	r2, [r4, #24]
 80079c6:	6922      	ldr	r2, [r4, #16]
 80079c8:	b942      	cbnz	r2, 80079dc <__swsetup_r+0xa4>
 80079ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80079ce:	d1c5      	bne.n	800795c <__swsetup_r+0x24>
 80079d0:	bd38      	pop	{r3, r4, r5, pc}
 80079d2:	0799      	lsls	r1, r3, #30
 80079d4:	bf58      	it	pl
 80079d6:	6962      	ldrpl	r2, [r4, #20]
 80079d8:	60a2      	str	r2, [r4, #8]
 80079da:	e7f4      	b.n	80079c6 <__swsetup_r+0x8e>
 80079dc:	2000      	movs	r0, #0
 80079de:	e7f7      	b.n	80079d0 <__swsetup_r+0x98>
 80079e0:	2000005c 	.word	0x2000005c

080079e4 <memset>:
 80079e4:	4402      	add	r2, r0
 80079e6:	4603      	mov	r3, r0
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d100      	bne.n	80079ee <memset+0xa>
 80079ec:	4770      	bx	lr
 80079ee:	f803 1b01 	strb.w	r1, [r3], #1
 80079f2:	e7f9      	b.n	80079e8 <memset+0x4>

080079f4 <_close_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4d06      	ldr	r5, [pc, #24]	@ (8007a10 <_close_r+0x1c>)
 80079f8:	2300      	movs	r3, #0
 80079fa:	4604      	mov	r4, r0
 80079fc:	4608      	mov	r0, r1
 80079fe:	602b      	str	r3, [r5, #0]
 8007a00:	f7f9 f8c9 	bl	8000b96 <_close>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	d102      	bne.n	8007a0e <_close_r+0x1a>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	b103      	cbz	r3, 8007a0e <_close_r+0x1a>
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	bd38      	pop	{r3, r4, r5, pc}
 8007a10:	200030f0 	.word	0x200030f0

08007a14 <_lseek_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	4d07      	ldr	r5, [pc, #28]	@ (8007a34 <_lseek_r+0x20>)
 8007a18:	4604      	mov	r4, r0
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	2200      	movs	r2, #0
 8007a20:	602a      	str	r2, [r5, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f7f9 f8de 	bl	8000be4 <_lseek>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_lseek_r+0x1e>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_lseek_r+0x1e>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	200030f0 	.word	0x200030f0

08007a38 <_read_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4d07      	ldr	r5, [pc, #28]	@ (8007a58 <_read_r+0x20>)
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	4608      	mov	r0, r1
 8007a40:	4611      	mov	r1, r2
 8007a42:	2200      	movs	r2, #0
 8007a44:	602a      	str	r2, [r5, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	f7f9 f86c 	bl	8000b24 <_read>
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	d102      	bne.n	8007a56 <_read_r+0x1e>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	b103      	cbz	r3, 8007a56 <_read_r+0x1e>
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	200030f0 	.word	0x200030f0

08007a5c <_write_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d07      	ldr	r5, [pc, #28]	@ (8007a7c <_write_r+0x20>)
 8007a60:	4604      	mov	r4, r0
 8007a62:	4608      	mov	r0, r1
 8007a64:	4611      	mov	r1, r2
 8007a66:	2200      	movs	r2, #0
 8007a68:	602a      	str	r2, [r5, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f7f9 f877 	bl	8000b5e <_write>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_write_r+0x1e>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_write_r+0x1e>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	200030f0 	.word	0x200030f0

08007a80 <__errno>:
 8007a80:	4b01      	ldr	r3, [pc, #4]	@ (8007a88 <__errno+0x8>)
 8007a82:	6818      	ldr	r0, [r3, #0]
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	2000005c 	.word	0x2000005c

08007a8c <__libc_init_array>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8007ac4 <__libc_init_array+0x38>)
 8007a90:	4c0d      	ldr	r4, [pc, #52]	@ (8007ac8 <__libc_init_array+0x3c>)
 8007a92:	1b64      	subs	r4, r4, r5
 8007a94:	10a4      	asrs	r4, r4, #2
 8007a96:	2600      	movs	r6, #0
 8007a98:	42a6      	cmp	r6, r4
 8007a9a:	d109      	bne.n	8007ab0 <__libc_init_array+0x24>
 8007a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8007acc <__libc_init_array+0x40>)
 8007a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8007ad0 <__libc_init_array+0x44>)
 8007aa0:	f000 fd66 	bl	8008570 <_init>
 8007aa4:	1b64      	subs	r4, r4, r5
 8007aa6:	10a4      	asrs	r4, r4, #2
 8007aa8:	2600      	movs	r6, #0
 8007aaa:	42a6      	cmp	r6, r4
 8007aac:	d105      	bne.n	8007aba <__libc_init_array+0x2e>
 8007aae:	bd70      	pop	{r4, r5, r6, pc}
 8007ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab4:	4798      	blx	r3
 8007ab6:	3601      	adds	r6, #1
 8007ab8:	e7ee      	b.n	8007a98 <__libc_init_array+0xc>
 8007aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007abe:	4798      	blx	r3
 8007ac0:	3601      	adds	r6, #1
 8007ac2:	e7f2      	b.n	8007aaa <__libc_init_array+0x1e>
 8007ac4:	0801decc 	.word	0x0801decc
 8007ac8:	0801decc 	.word	0x0801decc
 8007acc:	0801decc 	.word	0x0801decc
 8007ad0:	0801ded0 	.word	0x0801ded0

08007ad4 <__retarget_lock_init_recursive>:
 8007ad4:	4770      	bx	lr

08007ad6 <__retarget_lock_acquire_recursive>:
 8007ad6:	4770      	bx	lr

08007ad8 <__retarget_lock_release_recursive>:
 8007ad8:	4770      	bx	lr

08007ada <memcpy>:
 8007ada:	440a      	add	r2, r1
 8007adc:	4291      	cmp	r1, r2
 8007ade:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ae2:	d100      	bne.n	8007ae6 <memcpy+0xc>
 8007ae4:	4770      	bx	lr
 8007ae6:	b510      	push	{r4, lr}
 8007ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007af0:	4291      	cmp	r1, r2
 8007af2:	d1f9      	bne.n	8007ae8 <memcpy+0xe>
 8007af4:	bd10      	pop	{r4, pc}
	...

08007af8 <_free_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4605      	mov	r5, r0
 8007afc:	2900      	cmp	r1, #0
 8007afe:	d041      	beq.n	8007b84 <_free_r+0x8c>
 8007b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b04:	1f0c      	subs	r4, r1, #4
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bfb8      	it	lt
 8007b0a:	18e4      	addlt	r4, r4, r3
 8007b0c:	f000 f8e0 	bl	8007cd0 <__malloc_lock>
 8007b10:	4a1d      	ldr	r2, [pc, #116]	@ (8007b88 <_free_r+0x90>)
 8007b12:	6813      	ldr	r3, [r2, #0]
 8007b14:	b933      	cbnz	r3, 8007b24 <_free_r+0x2c>
 8007b16:	6063      	str	r3, [r4, #4]
 8007b18:	6014      	str	r4, [r2, #0]
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b20:	f000 b8dc 	b.w	8007cdc <__malloc_unlock>
 8007b24:	42a3      	cmp	r3, r4
 8007b26:	d908      	bls.n	8007b3a <_free_r+0x42>
 8007b28:	6820      	ldr	r0, [r4, #0]
 8007b2a:	1821      	adds	r1, r4, r0
 8007b2c:	428b      	cmp	r3, r1
 8007b2e:	bf01      	itttt	eq
 8007b30:	6819      	ldreq	r1, [r3, #0]
 8007b32:	685b      	ldreq	r3, [r3, #4]
 8007b34:	1809      	addeq	r1, r1, r0
 8007b36:	6021      	streq	r1, [r4, #0]
 8007b38:	e7ed      	b.n	8007b16 <_free_r+0x1e>
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	b10b      	cbz	r3, 8007b44 <_free_r+0x4c>
 8007b40:	42a3      	cmp	r3, r4
 8007b42:	d9fa      	bls.n	8007b3a <_free_r+0x42>
 8007b44:	6811      	ldr	r1, [r2, #0]
 8007b46:	1850      	adds	r0, r2, r1
 8007b48:	42a0      	cmp	r0, r4
 8007b4a:	d10b      	bne.n	8007b64 <_free_r+0x6c>
 8007b4c:	6820      	ldr	r0, [r4, #0]
 8007b4e:	4401      	add	r1, r0
 8007b50:	1850      	adds	r0, r2, r1
 8007b52:	4283      	cmp	r3, r0
 8007b54:	6011      	str	r1, [r2, #0]
 8007b56:	d1e0      	bne.n	8007b1a <_free_r+0x22>
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	6053      	str	r3, [r2, #4]
 8007b5e:	4408      	add	r0, r1
 8007b60:	6010      	str	r0, [r2, #0]
 8007b62:	e7da      	b.n	8007b1a <_free_r+0x22>
 8007b64:	d902      	bls.n	8007b6c <_free_r+0x74>
 8007b66:	230c      	movs	r3, #12
 8007b68:	602b      	str	r3, [r5, #0]
 8007b6a:	e7d6      	b.n	8007b1a <_free_r+0x22>
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	1821      	adds	r1, r4, r0
 8007b70:	428b      	cmp	r3, r1
 8007b72:	bf04      	itt	eq
 8007b74:	6819      	ldreq	r1, [r3, #0]
 8007b76:	685b      	ldreq	r3, [r3, #4]
 8007b78:	6063      	str	r3, [r4, #4]
 8007b7a:	bf04      	itt	eq
 8007b7c:	1809      	addeq	r1, r1, r0
 8007b7e:	6021      	streq	r1, [r4, #0]
 8007b80:	6054      	str	r4, [r2, #4]
 8007b82:	e7ca      	b.n	8007b1a <_free_r+0x22>
 8007b84:	bd38      	pop	{r3, r4, r5, pc}
 8007b86:	bf00      	nop
 8007b88:	200030fc 	.word	0x200030fc

08007b8c <sbrk_aligned>:
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	4e0f      	ldr	r6, [pc, #60]	@ (8007bcc <sbrk_aligned+0x40>)
 8007b90:	460c      	mov	r4, r1
 8007b92:	6831      	ldr	r1, [r6, #0]
 8007b94:	4605      	mov	r5, r0
 8007b96:	b911      	cbnz	r1, 8007b9e <sbrk_aligned+0x12>
 8007b98:	f000 fcda 	bl	8008550 <_sbrk_r>
 8007b9c:	6030      	str	r0, [r6, #0]
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f000 fcd5 	bl	8008550 <_sbrk_r>
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	d103      	bne.n	8007bb2 <sbrk_aligned+0x26>
 8007baa:	f04f 34ff 	mov.w	r4, #4294967295
 8007bae:	4620      	mov	r0, r4
 8007bb0:	bd70      	pop	{r4, r5, r6, pc}
 8007bb2:	1cc4      	adds	r4, r0, #3
 8007bb4:	f024 0403 	bic.w	r4, r4, #3
 8007bb8:	42a0      	cmp	r0, r4
 8007bba:	d0f8      	beq.n	8007bae <sbrk_aligned+0x22>
 8007bbc:	1a21      	subs	r1, r4, r0
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f000 fcc6 	bl	8008550 <_sbrk_r>
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d1f2      	bne.n	8007bae <sbrk_aligned+0x22>
 8007bc8:	e7ef      	b.n	8007baa <sbrk_aligned+0x1e>
 8007bca:	bf00      	nop
 8007bcc:	200030f8 	.word	0x200030f8

08007bd0 <_malloc_r>:
 8007bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bd4:	1ccd      	adds	r5, r1, #3
 8007bd6:	f025 0503 	bic.w	r5, r5, #3
 8007bda:	3508      	adds	r5, #8
 8007bdc:	2d0c      	cmp	r5, #12
 8007bde:	bf38      	it	cc
 8007be0:	250c      	movcc	r5, #12
 8007be2:	2d00      	cmp	r5, #0
 8007be4:	4606      	mov	r6, r0
 8007be6:	db01      	blt.n	8007bec <_malloc_r+0x1c>
 8007be8:	42a9      	cmp	r1, r5
 8007bea:	d904      	bls.n	8007bf6 <_malloc_r+0x26>
 8007bec:	230c      	movs	r3, #12
 8007bee:	6033      	str	r3, [r6, #0]
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ccc <_malloc_r+0xfc>
 8007bfa:	f000 f869 	bl	8007cd0 <__malloc_lock>
 8007bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8007c02:	461c      	mov	r4, r3
 8007c04:	bb44      	cbnz	r4, 8007c58 <_malloc_r+0x88>
 8007c06:	4629      	mov	r1, r5
 8007c08:	4630      	mov	r0, r6
 8007c0a:	f7ff ffbf 	bl	8007b8c <sbrk_aligned>
 8007c0e:	1c43      	adds	r3, r0, #1
 8007c10:	4604      	mov	r4, r0
 8007c12:	d158      	bne.n	8007cc6 <_malloc_r+0xf6>
 8007c14:	f8d8 4000 	ldr.w	r4, [r8]
 8007c18:	4627      	mov	r7, r4
 8007c1a:	2f00      	cmp	r7, #0
 8007c1c:	d143      	bne.n	8007ca6 <_malloc_r+0xd6>
 8007c1e:	2c00      	cmp	r4, #0
 8007c20:	d04b      	beq.n	8007cba <_malloc_r+0xea>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	4639      	mov	r1, r7
 8007c26:	4630      	mov	r0, r6
 8007c28:	eb04 0903 	add.w	r9, r4, r3
 8007c2c:	f000 fc90 	bl	8008550 <_sbrk_r>
 8007c30:	4581      	cmp	r9, r0
 8007c32:	d142      	bne.n	8007cba <_malloc_r+0xea>
 8007c34:	6821      	ldr	r1, [r4, #0]
 8007c36:	1a6d      	subs	r5, r5, r1
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f7ff ffa6 	bl	8007b8c <sbrk_aligned>
 8007c40:	3001      	adds	r0, #1
 8007c42:	d03a      	beq.n	8007cba <_malloc_r+0xea>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	442b      	add	r3, r5
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	bb62      	cbnz	r2, 8007cac <_malloc_r+0xdc>
 8007c52:	f8c8 7000 	str.w	r7, [r8]
 8007c56:	e00f      	b.n	8007c78 <_malloc_r+0xa8>
 8007c58:	6822      	ldr	r2, [r4, #0]
 8007c5a:	1b52      	subs	r2, r2, r5
 8007c5c:	d420      	bmi.n	8007ca0 <_malloc_r+0xd0>
 8007c5e:	2a0b      	cmp	r2, #11
 8007c60:	d917      	bls.n	8007c92 <_malloc_r+0xc2>
 8007c62:	1961      	adds	r1, r4, r5
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	6025      	str	r5, [r4, #0]
 8007c68:	bf18      	it	ne
 8007c6a:	6059      	strne	r1, [r3, #4]
 8007c6c:	6863      	ldr	r3, [r4, #4]
 8007c6e:	bf08      	it	eq
 8007c70:	f8c8 1000 	streq.w	r1, [r8]
 8007c74:	5162      	str	r2, [r4, r5]
 8007c76:	604b      	str	r3, [r1, #4]
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f000 f82f 	bl	8007cdc <__malloc_unlock>
 8007c7e:	f104 000b 	add.w	r0, r4, #11
 8007c82:	1d23      	adds	r3, r4, #4
 8007c84:	f020 0007 	bic.w	r0, r0, #7
 8007c88:	1ac2      	subs	r2, r0, r3
 8007c8a:	bf1c      	itt	ne
 8007c8c:	1a1b      	subne	r3, r3, r0
 8007c8e:	50a3      	strne	r3, [r4, r2]
 8007c90:	e7af      	b.n	8007bf2 <_malloc_r+0x22>
 8007c92:	6862      	ldr	r2, [r4, #4]
 8007c94:	42a3      	cmp	r3, r4
 8007c96:	bf0c      	ite	eq
 8007c98:	f8c8 2000 	streq.w	r2, [r8]
 8007c9c:	605a      	strne	r2, [r3, #4]
 8007c9e:	e7eb      	b.n	8007c78 <_malloc_r+0xa8>
 8007ca0:	4623      	mov	r3, r4
 8007ca2:	6864      	ldr	r4, [r4, #4]
 8007ca4:	e7ae      	b.n	8007c04 <_malloc_r+0x34>
 8007ca6:	463c      	mov	r4, r7
 8007ca8:	687f      	ldr	r7, [r7, #4]
 8007caa:	e7b6      	b.n	8007c1a <_malloc_r+0x4a>
 8007cac:	461a      	mov	r2, r3
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	42a3      	cmp	r3, r4
 8007cb2:	d1fb      	bne.n	8007cac <_malloc_r+0xdc>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	6053      	str	r3, [r2, #4]
 8007cb8:	e7de      	b.n	8007c78 <_malloc_r+0xa8>
 8007cba:	230c      	movs	r3, #12
 8007cbc:	6033      	str	r3, [r6, #0]
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f000 f80c 	bl	8007cdc <__malloc_unlock>
 8007cc4:	e794      	b.n	8007bf0 <_malloc_r+0x20>
 8007cc6:	6005      	str	r5, [r0, #0]
 8007cc8:	e7d6      	b.n	8007c78 <_malloc_r+0xa8>
 8007cca:	bf00      	nop
 8007ccc:	200030fc 	.word	0x200030fc

08007cd0 <__malloc_lock>:
 8007cd0:	4801      	ldr	r0, [pc, #4]	@ (8007cd8 <__malloc_lock+0x8>)
 8007cd2:	f7ff bf00 	b.w	8007ad6 <__retarget_lock_acquire_recursive>
 8007cd6:	bf00      	nop
 8007cd8:	200030f4 	.word	0x200030f4

08007cdc <__malloc_unlock>:
 8007cdc:	4801      	ldr	r0, [pc, #4]	@ (8007ce4 <__malloc_unlock+0x8>)
 8007cde:	f7ff befb 	b.w	8007ad8 <__retarget_lock_release_recursive>
 8007ce2:	bf00      	nop
 8007ce4:	200030f4 	.word	0x200030f4

08007ce8 <__sfputc_r>:
 8007ce8:	6893      	ldr	r3, [r2, #8]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	b410      	push	{r4}
 8007cf0:	6093      	str	r3, [r2, #8]
 8007cf2:	da08      	bge.n	8007d06 <__sfputc_r+0x1e>
 8007cf4:	6994      	ldr	r4, [r2, #24]
 8007cf6:	42a3      	cmp	r3, r4
 8007cf8:	db01      	blt.n	8007cfe <__sfputc_r+0x16>
 8007cfa:	290a      	cmp	r1, #10
 8007cfc:	d103      	bne.n	8007d06 <__sfputc_r+0x1e>
 8007cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d02:	f7ff bdda 	b.w	80078ba <__swbuf_r>
 8007d06:	6813      	ldr	r3, [r2, #0]
 8007d08:	1c58      	adds	r0, r3, #1
 8007d0a:	6010      	str	r0, [r2, #0]
 8007d0c:	7019      	strb	r1, [r3, #0]
 8007d0e:	4608      	mov	r0, r1
 8007d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <__sfputs_r>:
 8007d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d18:	4606      	mov	r6, r0
 8007d1a:	460f      	mov	r7, r1
 8007d1c:	4614      	mov	r4, r2
 8007d1e:	18d5      	adds	r5, r2, r3
 8007d20:	42ac      	cmp	r4, r5
 8007d22:	d101      	bne.n	8007d28 <__sfputs_r+0x12>
 8007d24:	2000      	movs	r0, #0
 8007d26:	e007      	b.n	8007d38 <__sfputs_r+0x22>
 8007d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d2c:	463a      	mov	r2, r7
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f7ff ffda 	bl	8007ce8 <__sfputc_r>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d1f3      	bne.n	8007d20 <__sfputs_r+0xa>
 8007d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d3c <_vfiprintf_r>:
 8007d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	460d      	mov	r5, r1
 8007d42:	b09d      	sub	sp, #116	@ 0x74
 8007d44:	4614      	mov	r4, r2
 8007d46:	4698      	mov	r8, r3
 8007d48:	4606      	mov	r6, r0
 8007d4a:	b118      	cbz	r0, 8007d54 <_vfiprintf_r+0x18>
 8007d4c:	6a03      	ldr	r3, [r0, #32]
 8007d4e:	b90b      	cbnz	r3, 8007d54 <_vfiprintf_r+0x18>
 8007d50:	f7ff fcc2 	bl	80076d8 <__sinit>
 8007d54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d56:	07d9      	lsls	r1, r3, #31
 8007d58:	d405      	bmi.n	8007d66 <_vfiprintf_r+0x2a>
 8007d5a:	89ab      	ldrh	r3, [r5, #12]
 8007d5c:	059a      	lsls	r2, r3, #22
 8007d5e:	d402      	bmi.n	8007d66 <_vfiprintf_r+0x2a>
 8007d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d62:	f7ff feb8 	bl	8007ad6 <__retarget_lock_acquire_recursive>
 8007d66:	89ab      	ldrh	r3, [r5, #12]
 8007d68:	071b      	lsls	r3, r3, #28
 8007d6a:	d501      	bpl.n	8007d70 <_vfiprintf_r+0x34>
 8007d6c:	692b      	ldr	r3, [r5, #16]
 8007d6e:	b99b      	cbnz	r3, 8007d98 <_vfiprintf_r+0x5c>
 8007d70:	4629      	mov	r1, r5
 8007d72:	4630      	mov	r0, r6
 8007d74:	f7ff fde0 	bl	8007938 <__swsetup_r>
 8007d78:	b170      	cbz	r0, 8007d98 <_vfiprintf_r+0x5c>
 8007d7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d7c:	07dc      	lsls	r4, r3, #31
 8007d7e:	d504      	bpl.n	8007d8a <_vfiprintf_r+0x4e>
 8007d80:	f04f 30ff 	mov.w	r0, #4294967295
 8007d84:	b01d      	add	sp, #116	@ 0x74
 8007d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8a:	89ab      	ldrh	r3, [r5, #12]
 8007d8c:	0598      	lsls	r0, r3, #22
 8007d8e:	d4f7      	bmi.n	8007d80 <_vfiprintf_r+0x44>
 8007d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d92:	f7ff fea1 	bl	8007ad8 <__retarget_lock_release_recursive>
 8007d96:	e7f3      	b.n	8007d80 <_vfiprintf_r+0x44>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d9c:	2320      	movs	r3, #32
 8007d9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007da2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007da6:	2330      	movs	r3, #48	@ 0x30
 8007da8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f58 <_vfiprintf_r+0x21c>
 8007dac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007db0:	f04f 0901 	mov.w	r9, #1
 8007db4:	4623      	mov	r3, r4
 8007db6:	469a      	mov	sl, r3
 8007db8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dbc:	b10a      	cbz	r2, 8007dc2 <_vfiprintf_r+0x86>
 8007dbe:	2a25      	cmp	r2, #37	@ 0x25
 8007dc0:	d1f9      	bne.n	8007db6 <_vfiprintf_r+0x7a>
 8007dc2:	ebba 0b04 	subs.w	fp, sl, r4
 8007dc6:	d00b      	beq.n	8007de0 <_vfiprintf_r+0xa4>
 8007dc8:	465b      	mov	r3, fp
 8007dca:	4622      	mov	r2, r4
 8007dcc:	4629      	mov	r1, r5
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f7ff ffa1 	bl	8007d16 <__sfputs_r>
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	f000 80a7 	beq.w	8007f28 <_vfiprintf_r+0x1ec>
 8007dda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ddc:	445a      	add	r2, fp
 8007dde:	9209      	str	r2, [sp, #36]	@ 0x24
 8007de0:	f89a 3000 	ldrb.w	r3, [sl]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 809f 	beq.w	8007f28 <_vfiprintf_r+0x1ec>
 8007dea:	2300      	movs	r3, #0
 8007dec:	f04f 32ff 	mov.w	r2, #4294967295
 8007df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007df4:	f10a 0a01 	add.w	sl, sl, #1
 8007df8:	9304      	str	r3, [sp, #16]
 8007dfa:	9307      	str	r3, [sp, #28]
 8007dfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e00:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e02:	4654      	mov	r4, sl
 8007e04:	2205      	movs	r2, #5
 8007e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e0a:	4853      	ldr	r0, [pc, #332]	@ (8007f58 <_vfiprintf_r+0x21c>)
 8007e0c:	f7f8 f9e8 	bl	80001e0 <memchr>
 8007e10:	9a04      	ldr	r2, [sp, #16]
 8007e12:	b9d8      	cbnz	r0, 8007e4c <_vfiprintf_r+0x110>
 8007e14:	06d1      	lsls	r1, r2, #27
 8007e16:	bf44      	itt	mi
 8007e18:	2320      	movmi	r3, #32
 8007e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e1e:	0713      	lsls	r3, r2, #28
 8007e20:	bf44      	itt	mi
 8007e22:	232b      	movmi	r3, #43	@ 0x2b
 8007e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e28:	f89a 3000 	ldrb.w	r3, [sl]
 8007e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e2e:	d015      	beq.n	8007e5c <_vfiprintf_r+0x120>
 8007e30:	9a07      	ldr	r2, [sp, #28]
 8007e32:	4654      	mov	r4, sl
 8007e34:	2000      	movs	r0, #0
 8007e36:	f04f 0c0a 	mov.w	ip, #10
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e40:	3b30      	subs	r3, #48	@ 0x30
 8007e42:	2b09      	cmp	r3, #9
 8007e44:	d94b      	bls.n	8007ede <_vfiprintf_r+0x1a2>
 8007e46:	b1b0      	cbz	r0, 8007e76 <_vfiprintf_r+0x13a>
 8007e48:	9207      	str	r2, [sp, #28]
 8007e4a:	e014      	b.n	8007e76 <_vfiprintf_r+0x13a>
 8007e4c:	eba0 0308 	sub.w	r3, r0, r8
 8007e50:	fa09 f303 	lsl.w	r3, r9, r3
 8007e54:	4313      	orrs	r3, r2
 8007e56:	9304      	str	r3, [sp, #16]
 8007e58:	46a2      	mov	sl, r4
 8007e5a:	e7d2      	b.n	8007e02 <_vfiprintf_r+0xc6>
 8007e5c:	9b03      	ldr	r3, [sp, #12]
 8007e5e:	1d19      	adds	r1, r3, #4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	9103      	str	r1, [sp, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	bfbb      	ittet	lt
 8007e68:	425b      	neglt	r3, r3
 8007e6a:	f042 0202 	orrlt.w	r2, r2, #2
 8007e6e:	9307      	strge	r3, [sp, #28]
 8007e70:	9307      	strlt	r3, [sp, #28]
 8007e72:	bfb8      	it	lt
 8007e74:	9204      	strlt	r2, [sp, #16]
 8007e76:	7823      	ldrb	r3, [r4, #0]
 8007e78:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e7a:	d10a      	bne.n	8007e92 <_vfiprintf_r+0x156>
 8007e7c:	7863      	ldrb	r3, [r4, #1]
 8007e7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e80:	d132      	bne.n	8007ee8 <_vfiprintf_r+0x1ac>
 8007e82:	9b03      	ldr	r3, [sp, #12]
 8007e84:	1d1a      	adds	r2, r3, #4
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	9203      	str	r2, [sp, #12]
 8007e8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e8e:	3402      	adds	r4, #2
 8007e90:	9305      	str	r3, [sp, #20]
 8007e92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007f68 <_vfiprintf_r+0x22c>
 8007e96:	7821      	ldrb	r1, [r4, #0]
 8007e98:	2203      	movs	r2, #3
 8007e9a:	4650      	mov	r0, sl
 8007e9c:	f7f8 f9a0 	bl	80001e0 <memchr>
 8007ea0:	b138      	cbz	r0, 8007eb2 <_vfiprintf_r+0x176>
 8007ea2:	9b04      	ldr	r3, [sp, #16]
 8007ea4:	eba0 000a 	sub.w	r0, r0, sl
 8007ea8:	2240      	movs	r2, #64	@ 0x40
 8007eaa:	4082      	lsls	r2, r0
 8007eac:	4313      	orrs	r3, r2
 8007eae:	3401      	adds	r4, #1
 8007eb0:	9304      	str	r3, [sp, #16]
 8007eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb6:	4829      	ldr	r0, [pc, #164]	@ (8007f5c <_vfiprintf_r+0x220>)
 8007eb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ebc:	2206      	movs	r2, #6
 8007ebe:	f7f8 f98f 	bl	80001e0 <memchr>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d03f      	beq.n	8007f46 <_vfiprintf_r+0x20a>
 8007ec6:	4b26      	ldr	r3, [pc, #152]	@ (8007f60 <_vfiprintf_r+0x224>)
 8007ec8:	bb1b      	cbnz	r3, 8007f12 <_vfiprintf_r+0x1d6>
 8007eca:	9b03      	ldr	r3, [sp, #12]
 8007ecc:	3307      	adds	r3, #7
 8007ece:	f023 0307 	bic.w	r3, r3, #7
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	9303      	str	r3, [sp, #12]
 8007ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed8:	443b      	add	r3, r7
 8007eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8007edc:	e76a      	b.n	8007db4 <_vfiprintf_r+0x78>
 8007ede:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	2001      	movs	r0, #1
 8007ee6:	e7a8      	b.n	8007e3a <_vfiprintf_r+0xfe>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	3401      	adds	r4, #1
 8007eec:	9305      	str	r3, [sp, #20]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	f04f 0c0a 	mov.w	ip, #10
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007efa:	3a30      	subs	r2, #48	@ 0x30
 8007efc:	2a09      	cmp	r2, #9
 8007efe:	d903      	bls.n	8007f08 <_vfiprintf_r+0x1cc>
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d0c6      	beq.n	8007e92 <_vfiprintf_r+0x156>
 8007f04:	9105      	str	r1, [sp, #20]
 8007f06:	e7c4      	b.n	8007e92 <_vfiprintf_r+0x156>
 8007f08:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e7f0      	b.n	8007ef4 <_vfiprintf_r+0x1b8>
 8007f12:	ab03      	add	r3, sp, #12
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	462a      	mov	r2, r5
 8007f18:	4b12      	ldr	r3, [pc, #72]	@ (8007f64 <_vfiprintf_r+0x228>)
 8007f1a:	a904      	add	r1, sp, #16
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	f3af 8000 	nop.w
 8007f22:	4607      	mov	r7, r0
 8007f24:	1c78      	adds	r0, r7, #1
 8007f26:	d1d6      	bne.n	8007ed6 <_vfiprintf_r+0x19a>
 8007f28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f2a:	07d9      	lsls	r1, r3, #31
 8007f2c:	d405      	bmi.n	8007f3a <_vfiprintf_r+0x1fe>
 8007f2e:	89ab      	ldrh	r3, [r5, #12]
 8007f30:	059a      	lsls	r2, r3, #22
 8007f32:	d402      	bmi.n	8007f3a <_vfiprintf_r+0x1fe>
 8007f34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f36:	f7ff fdcf 	bl	8007ad8 <__retarget_lock_release_recursive>
 8007f3a:	89ab      	ldrh	r3, [r5, #12]
 8007f3c:	065b      	lsls	r3, r3, #25
 8007f3e:	f53f af1f 	bmi.w	8007d80 <_vfiprintf_r+0x44>
 8007f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f44:	e71e      	b.n	8007d84 <_vfiprintf_r+0x48>
 8007f46:	ab03      	add	r3, sp, #12
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	462a      	mov	r2, r5
 8007f4c:	4b05      	ldr	r3, [pc, #20]	@ (8007f64 <_vfiprintf_r+0x228>)
 8007f4e:	a904      	add	r1, sp, #16
 8007f50:	4630      	mov	r0, r6
 8007f52:	f000 f879 	bl	8008048 <_printf_i>
 8007f56:	e7e4      	b.n	8007f22 <_vfiprintf_r+0x1e6>
 8007f58:	0801de90 	.word	0x0801de90
 8007f5c:	0801de9a 	.word	0x0801de9a
 8007f60:	00000000 	.word	0x00000000
 8007f64:	08007d17 	.word	0x08007d17
 8007f68:	0801de96 	.word	0x0801de96

08007f6c <_printf_common>:
 8007f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f70:	4616      	mov	r6, r2
 8007f72:	4698      	mov	r8, r3
 8007f74:	688a      	ldr	r2, [r1, #8]
 8007f76:	690b      	ldr	r3, [r1, #16]
 8007f78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	bfb8      	it	lt
 8007f80:	4613      	movlt	r3, r2
 8007f82:	6033      	str	r3, [r6, #0]
 8007f84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f88:	4607      	mov	r7, r0
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	b10a      	cbz	r2, 8007f92 <_printf_common+0x26>
 8007f8e:	3301      	adds	r3, #1
 8007f90:	6033      	str	r3, [r6, #0]
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	0699      	lsls	r1, r3, #26
 8007f96:	bf42      	ittt	mi
 8007f98:	6833      	ldrmi	r3, [r6, #0]
 8007f9a:	3302      	addmi	r3, #2
 8007f9c:	6033      	strmi	r3, [r6, #0]
 8007f9e:	6825      	ldr	r5, [r4, #0]
 8007fa0:	f015 0506 	ands.w	r5, r5, #6
 8007fa4:	d106      	bne.n	8007fb4 <_printf_common+0x48>
 8007fa6:	f104 0a19 	add.w	sl, r4, #25
 8007faa:	68e3      	ldr	r3, [r4, #12]
 8007fac:	6832      	ldr	r2, [r6, #0]
 8007fae:	1a9b      	subs	r3, r3, r2
 8007fb0:	42ab      	cmp	r3, r5
 8007fb2:	dc26      	bgt.n	8008002 <_printf_common+0x96>
 8007fb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fb8:	6822      	ldr	r2, [r4, #0]
 8007fba:	3b00      	subs	r3, #0
 8007fbc:	bf18      	it	ne
 8007fbe:	2301      	movne	r3, #1
 8007fc0:	0692      	lsls	r2, r2, #26
 8007fc2:	d42b      	bmi.n	800801c <_printf_common+0xb0>
 8007fc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fc8:	4641      	mov	r1, r8
 8007fca:	4638      	mov	r0, r7
 8007fcc:	47c8      	blx	r9
 8007fce:	3001      	adds	r0, #1
 8007fd0:	d01e      	beq.n	8008010 <_printf_common+0xa4>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	6922      	ldr	r2, [r4, #16]
 8007fd6:	f003 0306 	and.w	r3, r3, #6
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	bf02      	ittt	eq
 8007fde:	68e5      	ldreq	r5, [r4, #12]
 8007fe0:	6833      	ldreq	r3, [r6, #0]
 8007fe2:	1aed      	subeq	r5, r5, r3
 8007fe4:	68a3      	ldr	r3, [r4, #8]
 8007fe6:	bf0c      	ite	eq
 8007fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fec:	2500      	movne	r5, #0
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	bfc4      	itt	gt
 8007ff2:	1a9b      	subgt	r3, r3, r2
 8007ff4:	18ed      	addgt	r5, r5, r3
 8007ff6:	2600      	movs	r6, #0
 8007ff8:	341a      	adds	r4, #26
 8007ffa:	42b5      	cmp	r5, r6
 8007ffc:	d11a      	bne.n	8008034 <_printf_common+0xc8>
 8007ffe:	2000      	movs	r0, #0
 8008000:	e008      	b.n	8008014 <_printf_common+0xa8>
 8008002:	2301      	movs	r3, #1
 8008004:	4652      	mov	r2, sl
 8008006:	4641      	mov	r1, r8
 8008008:	4638      	mov	r0, r7
 800800a:	47c8      	blx	r9
 800800c:	3001      	adds	r0, #1
 800800e:	d103      	bne.n	8008018 <_printf_common+0xac>
 8008010:	f04f 30ff 	mov.w	r0, #4294967295
 8008014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008018:	3501      	adds	r5, #1
 800801a:	e7c6      	b.n	8007faa <_printf_common+0x3e>
 800801c:	18e1      	adds	r1, r4, r3
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	2030      	movs	r0, #48	@ 0x30
 8008022:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008026:	4422      	add	r2, r4
 8008028:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800802c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008030:	3302      	adds	r3, #2
 8008032:	e7c7      	b.n	8007fc4 <_printf_common+0x58>
 8008034:	2301      	movs	r3, #1
 8008036:	4622      	mov	r2, r4
 8008038:	4641      	mov	r1, r8
 800803a:	4638      	mov	r0, r7
 800803c:	47c8      	blx	r9
 800803e:	3001      	adds	r0, #1
 8008040:	d0e6      	beq.n	8008010 <_printf_common+0xa4>
 8008042:	3601      	adds	r6, #1
 8008044:	e7d9      	b.n	8007ffa <_printf_common+0x8e>
	...

08008048 <_printf_i>:
 8008048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800804c:	7e0f      	ldrb	r7, [r1, #24]
 800804e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008050:	2f78      	cmp	r7, #120	@ 0x78
 8008052:	4691      	mov	r9, r2
 8008054:	4680      	mov	r8, r0
 8008056:	460c      	mov	r4, r1
 8008058:	469a      	mov	sl, r3
 800805a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800805e:	d807      	bhi.n	8008070 <_printf_i+0x28>
 8008060:	2f62      	cmp	r7, #98	@ 0x62
 8008062:	d80a      	bhi.n	800807a <_printf_i+0x32>
 8008064:	2f00      	cmp	r7, #0
 8008066:	f000 80d2 	beq.w	800820e <_printf_i+0x1c6>
 800806a:	2f58      	cmp	r7, #88	@ 0x58
 800806c:	f000 80b9 	beq.w	80081e2 <_printf_i+0x19a>
 8008070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008074:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008078:	e03a      	b.n	80080f0 <_printf_i+0xa8>
 800807a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800807e:	2b15      	cmp	r3, #21
 8008080:	d8f6      	bhi.n	8008070 <_printf_i+0x28>
 8008082:	a101      	add	r1, pc, #4	@ (adr r1, 8008088 <_printf_i+0x40>)
 8008084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008088:	080080e1 	.word	0x080080e1
 800808c:	080080f5 	.word	0x080080f5
 8008090:	08008071 	.word	0x08008071
 8008094:	08008071 	.word	0x08008071
 8008098:	08008071 	.word	0x08008071
 800809c:	08008071 	.word	0x08008071
 80080a0:	080080f5 	.word	0x080080f5
 80080a4:	08008071 	.word	0x08008071
 80080a8:	08008071 	.word	0x08008071
 80080ac:	08008071 	.word	0x08008071
 80080b0:	08008071 	.word	0x08008071
 80080b4:	080081f5 	.word	0x080081f5
 80080b8:	0800811f 	.word	0x0800811f
 80080bc:	080081af 	.word	0x080081af
 80080c0:	08008071 	.word	0x08008071
 80080c4:	08008071 	.word	0x08008071
 80080c8:	08008217 	.word	0x08008217
 80080cc:	08008071 	.word	0x08008071
 80080d0:	0800811f 	.word	0x0800811f
 80080d4:	08008071 	.word	0x08008071
 80080d8:	08008071 	.word	0x08008071
 80080dc:	080081b7 	.word	0x080081b7
 80080e0:	6833      	ldr	r3, [r6, #0]
 80080e2:	1d1a      	adds	r2, r3, #4
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6032      	str	r2, [r6, #0]
 80080e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080f0:	2301      	movs	r3, #1
 80080f2:	e09d      	b.n	8008230 <_printf_i+0x1e8>
 80080f4:	6833      	ldr	r3, [r6, #0]
 80080f6:	6820      	ldr	r0, [r4, #0]
 80080f8:	1d19      	adds	r1, r3, #4
 80080fa:	6031      	str	r1, [r6, #0]
 80080fc:	0606      	lsls	r6, r0, #24
 80080fe:	d501      	bpl.n	8008104 <_printf_i+0xbc>
 8008100:	681d      	ldr	r5, [r3, #0]
 8008102:	e003      	b.n	800810c <_printf_i+0xc4>
 8008104:	0645      	lsls	r5, r0, #25
 8008106:	d5fb      	bpl.n	8008100 <_printf_i+0xb8>
 8008108:	f9b3 5000 	ldrsh.w	r5, [r3]
 800810c:	2d00      	cmp	r5, #0
 800810e:	da03      	bge.n	8008118 <_printf_i+0xd0>
 8008110:	232d      	movs	r3, #45	@ 0x2d
 8008112:	426d      	negs	r5, r5
 8008114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008118:	4859      	ldr	r0, [pc, #356]	@ (8008280 <_printf_i+0x238>)
 800811a:	230a      	movs	r3, #10
 800811c:	e011      	b.n	8008142 <_printf_i+0xfa>
 800811e:	6821      	ldr	r1, [r4, #0]
 8008120:	6833      	ldr	r3, [r6, #0]
 8008122:	0608      	lsls	r0, r1, #24
 8008124:	f853 5b04 	ldr.w	r5, [r3], #4
 8008128:	d402      	bmi.n	8008130 <_printf_i+0xe8>
 800812a:	0649      	lsls	r1, r1, #25
 800812c:	bf48      	it	mi
 800812e:	b2ad      	uxthmi	r5, r5
 8008130:	2f6f      	cmp	r7, #111	@ 0x6f
 8008132:	4853      	ldr	r0, [pc, #332]	@ (8008280 <_printf_i+0x238>)
 8008134:	6033      	str	r3, [r6, #0]
 8008136:	bf14      	ite	ne
 8008138:	230a      	movne	r3, #10
 800813a:	2308      	moveq	r3, #8
 800813c:	2100      	movs	r1, #0
 800813e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008142:	6866      	ldr	r6, [r4, #4]
 8008144:	60a6      	str	r6, [r4, #8]
 8008146:	2e00      	cmp	r6, #0
 8008148:	bfa2      	ittt	ge
 800814a:	6821      	ldrge	r1, [r4, #0]
 800814c:	f021 0104 	bicge.w	r1, r1, #4
 8008150:	6021      	strge	r1, [r4, #0]
 8008152:	b90d      	cbnz	r5, 8008158 <_printf_i+0x110>
 8008154:	2e00      	cmp	r6, #0
 8008156:	d04b      	beq.n	80081f0 <_printf_i+0x1a8>
 8008158:	4616      	mov	r6, r2
 800815a:	fbb5 f1f3 	udiv	r1, r5, r3
 800815e:	fb03 5711 	mls	r7, r3, r1, r5
 8008162:	5dc7      	ldrb	r7, [r0, r7]
 8008164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008168:	462f      	mov	r7, r5
 800816a:	42bb      	cmp	r3, r7
 800816c:	460d      	mov	r5, r1
 800816e:	d9f4      	bls.n	800815a <_printf_i+0x112>
 8008170:	2b08      	cmp	r3, #8
 8008172:	d10b      	bne.n	800818c <_printf_i+0x144>
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	07df      	lsls	r7, r3, #31
 8008178:	d508      	bpl.n	800818c <_printf_i+0x144>
 800817a:	6923      	ldr	r3, [r4, #16]
 800817c:	6861      	ldr	r1, [r4, #4]
 800817e:	4299      	cmp	r1, r3
 8008180:	bfde      	ittt	le
 8008182:	2330      	movle	r3, #48	@ 0x30
 8008184:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008188:	f106 36ff 	addle.w	r6, r6, #4294967295
 800818c:	1b92      	subs	r2, r2, r6
 800818e:	6122      	str	r2, [r4, #16]
 8008190:	f8cd a000 	str.w	sl, [sp]
 8008194:	464b      	mov	r3, r9
 8008196:	aa03      	add	r2, sp, #12
 8008198:	4621      	mov	r1, r4
 800819a:	4640      	mov	r0, r8
 800819c:	f7ff fee6 	bl	8007f6c <_printf_common>
 80081a0:	3001      	adds	r0, #1
 80081a2:	d14a      	bne.n	800823a <_printf_i+0x1f2>
 80081a4:	f04f 30ff 	mov.w	r0, #4294967295
 80081a8:	b004      	add	sp, #16
 80081aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	f043 0320 	orr.w	r3, r3, #32
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	4833      	ldr	r0, [pc, #204]	@ (8008284 <_printf_i+0x23c>)
 80081b8:	2778      	movs	r7, #120	@ 0x78
 80081ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	6831      	ldr	r1, [r6, #0]
 80081c2:	061f      	lsls	r7, r3, #24
 80081c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80081c8:	d402      	bmi.n	80081d0 <_printf_i+0x188>
 80081ca:	065f      	lsls	r7, r3, #25
 80081cc:	bf48      	it	mi
 80081ce:	b2ad      	uxthmi	r5, r5
 80081d0:	6031      	str	r1, [r6, #0]
 80081d2:	07d9      	lsls	r1, r3, #31
 80081d4:	bf44      	itt	mi
 80081d6:	f043 0320 	orrmi.w	r3, r3, #32
 80081da:	6023      	strmi	r3, [r4, #0]
 80081dc:	b11d      	cbz	r5, 80081e6 <_printf_i+0x19e>
 80081de:	2310      	movs	r3, #16
 80081e0:	e7ac      	b.n	800813c <_printf_i+0xf4>
 80081e2:	4827      	ldr	r0, [pc, #156]	@ (8008280 <_printf_i+0x238>)
 80081e4:	e7e9      	b.n	80081ba <_printf_i+0x172>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	f023 0320 	bic.w	r3, r3, #32
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	e7f6      	b.n	80081de <_printf_i+0x196>
 80081f0:	4616      	mov	r6, r2
 80081f2:	e7bd      	b.n	8008170 <_printf_i+0x128>
 80081f4:	6833      	ldr	r3, [r6, #0]
 80081f6:	6825      	ldr	r5, [r4, #0]
 80081f8:	6961      	ldr	r1, [r4, #20]
 80081fa:	1d18      	adds	r0, r3, #4
 80081fc:	6030      	str	r0, [r6, #0]
 80081fe:	062e      	lsls	r6, r5, #24
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	d501      	bpl.n	8008208 <_printf_i+0x1c0>
 8008204:	6019      	str	r1, [r3, #0]
 8008206:	e002      	b.n	800820e <_printf_i+0x1c6>
 8008208:	0668      	lsls	r0, r5, #25
 800820a:	d5fb      	bpl.n	8008204 <_printf_i+0x1bc>
 800820c:	8019      	strh	r1, [r3, #0]
 800820e:	2300      	movs	r3, #0
 8008210:	6123      	str	r3, [r4, #16]
 8008212:	4616      	mov	r6, r2
 8008214:	e7bc      	b.n	8008190 <_printf_i+0x148>
 8008216:	6833      	ldr	r3, [r6, #0]
 8008218:	1d1a      	adds	r2, r3, #4
 800821a:	6032      	str	r2, [r6, #0]
 800821c:	681e      	ldr	r6, [r3, #0]
 800821e:	6862      	ldr	r2, [r4, #4]
 8008220:	2100      	movs	r1, #0
 8008222:	4630      	mov	r0, r6
 8008224:	f7f7 ffdc 	bl	80001e0 <memchr>
 8008228:	b108      	cbz	r0, 800822e <_printf_i+0x1e6>
 800822a:	1b80      	subs	r0, r0, r6
 800822c:	6060      	str	r0, [r4, #4]
 800822e:	6863      	ldr	r3, [r4, #4]
 8008230:	6123      	str	r3, [r4, #16]
 8008232:	2300      	movs	r3, #0
 8008234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008238:	e7aa      	b.n	8008190 <_printf_i+0x148>
 800823a:	6923      	ldr	r3, [r4, #16]
 800823c:	4632      	mov	r2, r6
 800823e:	4649      	mov	r1, r9
 8008240:	4640      	mov	r0, r8
 8008242:	47d0      	blx	sl
 8008244:	3001      	adds	r0, #1
 8008246:	d0ad      	beq.n	80081a4 <_printf_i+0x15c>
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	079b      	lsls	r3, r3, #30
 800824c:	d413      	bmi.n	8008276 <_printf_i+0x22e>
 800824e:	68e0      	ldr	r0, [r4, #12]
 8008250:	9b03      	ldr	r3, [sp, #12]
 8008252:	4298      	cmp	r0, r3
 8008254:	bfb8      	it	lt
 8008256:	4618      	movlt	r0, r3
 8008258:	e7a6      	b.n	80081a8 <_printf_i+0x160>
 800825a:	2301      	movs	r3, #1
 800825c:	4632      	mov	r2, r6
 800825e:	4649      	mov	r1, r9
 8008260:	4640      	mov	r0, r8
 8008262:	47d0      	blx	sl
 8008264:	3001      	adds	r0, #1
 8008266:	d09d      	beq.n	80081a4 <_printf_i+0x15c>
 8008268:	3501      	adds	r5, #1
 800826a:	68e3      	ldr	r3, [r4, #12]
 800826c:	9903      	ldr	r1, [sp, #12]
 800826e:	1a5b      	subs	r3, r3, r1
 8008270:	42ab      	cmp	r3, r5
 8008272:	dcf2      	bgt.n	800825a <_printf_i+0x212>
 8008274:	e7eb      	b.n	800824e <_printf_i+0x206>
 8008276:	2500      	movs	r5, #0
 8008278:	f104 0619 	add.w	r6, r4, #25
 800827c:	e7f5      	b.n	800826a <_printf_i+0x222>
 800827e:	bf00      	nop
 8008280:	0801dea1 	.word	0x0801dea1
 8008284:	0801deb2 	.word	0x0801deb2

08008288 <__sflush_r>:
 8008288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800828c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008290:	0716      	lsls	r6, r2, #28
 8008292:	4605      	mov	r5, r0
 8008294:	460c      	mov	r4, r1
 8008296:	d454      	bmi.n	8008342 <__sflush_r+0xba>
 8008298:	684b      	ldr	r3, [r1, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	dc02      	bgt.n	80082a4 <__sflush_r+0x1c>
 800829e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	dd48      	ble.n	8008336 <__sflush_r+0xae>
 80082a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082a6:	2e00      	cmp	r6, #0
 80082a8:	d045      	beq.n	8008336 <__sflush_r+0xae>
 80082aa:	2300      	movs	r3, #0
 80082ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082b0:	682f      	ldr	r7, [r5, #0]
 80082b2:	6a21      	ldr	r1, [r4, #32]
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	d030      	beq.n	800831a <__sflush_r+0x92>
 80082b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	0759      	lsls	r1, r3, #29
 80082be:	d505      	bpl.n	80082cc <__sflush_r+0x44>
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	1ad2      	subs	r2, r2, r3
 80082c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082c6:	b10b      	cbz	r3, 80082cc <__sflush_r+0x44>
 80082c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082ca:	1ad2      	subs	r2, r2, r3
 80082cc:	2300      	movs	r3, #0
 80082ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082d0:	6a21      	ldr	r1, [r4, #32]
 80082d2:	4628      	mov	r0, r5
 80082d4:	47b0      	blx	r6
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	d106      	bne.n	80082ea <__sflush_r+0x62>
 80082dc:	6829      	ldr	r1, [r5, #0]
 80082de:	291d      	cmp	r1, #29
 80082e0:	d82b      	bhi.n	800833a <__sflush_r+0xb2>
 80082e2:	4a2a      	ldr	r2, [pc, #168]	@ (800838c <__sflush_r+0x104>)
 80082e4:	410a      	asrs	r2, r1
 80082e6:	07d6      	lsls	r6, r2, #31
 80082e8:	d427      	bmi.n	800833a <__sflush_r+0xb2>
 80082ea:	2200      	movs	r2, #0
 80082ec:	6062      	str	r2, [r4, #4]
 80082ee:	04d9      	lsls	r1, r3, #19
 80082f0:	6922      	ldr	r2, [r4, #16]
 80082f2:	6022      	str	r2, [r4, #0]
 80082f4:	d504      	bpl.n	8008300 <__sflush_r+0x78>
 80082f6:	1c42      	adds	r2, r0, #1
 80082f8:	d101      	bne.n	80082fe <__sflush_r+0x76>
 80082fa:	682b      	ldr	r3, [r5, #0]
 80082fc:	b903      	cbnz	r3, 8008300 <__sflush_r+0x78>
 80082fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008300:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008302:	602f      	str	r7, [r5, #0]
 8008304:	b1b9      	cbz	r1, 8008336 <__sflush_r+0xae>
 8008306:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800830a:	4299      	cmp	r1, r3
 800830c:	d002      	beq.n	8008314 <__sflush_r+0x8c>
 800830e:	4628      	mov	r0, r5
 8008310:	f7ff fbf2 	bl	8007af8 <_free_r>
 8008314:	2300      	movs	r3, #0
 8008316:	6363      	str	r3, [r4, #52]	@ 0x34
 8008318:	e00d      	b.n	8008336 <__sflush_r+0xae>
 800831a:	2301      	movs	r3, #1
 800831c:	4628      	mov	r0, r5
 800831e:	47b0      	blx	r6
 8008320:	4602      	mov	r2, r0
 8008322:	1c50      	adds	r0, r2, #1
 8008324:	d1c9      	bne.n	80082ba <__sflush_r+0x32>
 8008326:	682b      	ldr	r3, [r5, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d0c6      	beq.n	80082ba <__sflush_r+0x32>
 800832c:	2b1d      	cmp	r3, #29
 800832e:	d001      	beq.n	8008334 <__sflush_r+0xac>
 8008330:	2b16      	cmp	r3, #22
 8008332:	d11e      	bne.n	8008372 <__sflush_r+0xea>
 8008334:	602f      	str	r7, [r5, #0]
 8008336:	2000      	movs	r0, #0
 8008338:	e022      	b.n	8008380 <__sflush_r+0xf8>
 800833a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800833e:	b21b      	sxth	r3, r3
 8008340:	e01b      	b.n	800837a <__sflush_r+0xf2>
 8008342:	690f      	ldr	r7, [r1, #16]
 8008344:	2f00      	cmp	r7, #0
 8008346:	d0f6      	beq.n	8008336 <__sflush_r+0xae>
 8008348:	0793      	lsls	r3, r2, #30
 800834a:	680e      	ldr	r6, [r1, #0]
 800834c:	bf08      	it	eq
 800834e:	694b      	ldreq	r3, [r1, #20]
 8008350:	600f      	str	r7, [r1, #0]
 8008352:	bf18      	it	ne
 8008354:	2300      	movne	r3, #0
 8008356:	eba6 0807 	sub.w	r8, r6, r7
 800835a:	608b      	str	r3, [r1, #8]
 800835c:	f1b8 0f00 	cmp.w	r8, #0
 8008360:	dde9      	ble.n	8008336 <__sflush_r+0xae>
 8008362:	6a21      	ldr	r1, [r4, #32]
 8008364:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008366:	4643      	mov	r3, r8
 8008368:	463a      	mov	r2, r7
 800836a:	4628      	mov	r0, r5
 800836c:	47b0      	blx	r6
 800836e:	2800      	cmp	r0, #0
 8008370:	dc08      	bgt.n	8008384 <__sflush_r+0xfc>
 8008372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008384:	4407      	add	r7, r0
 8008386:	eba8 0800 	sub.w	r8, r8, r0
 800838a:	e7e7      	b.n	800835c <__sflush_r+0xd4>
 800838c:	dfbffffe 	.word	0xdfbffffe

08008390 <_fflush_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	690b      	ldr	r3, [r1, #16]
 8008394:	4605      	mov	r5, r0
 8008396:	460c      	mov	r4, r1
 8008398:	b913      	cbnz	r3, 80083a0 <_fflush_r+0x10>
 800839a:	2500      	movs	r5, #0
 800839c:	4628      	mov	r0, r5
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	b118      	cbz	r0, 80083aa <_fflush_r+0x1a>
 80083a2:	6a03      	ldr	r3, [r0, #32]
 80083a4:	b90b      	cbnz	r3, 80083aa <_fflush_r+0x1a>
 80083a6:	f7ff f997 	bl	80076d8 <__sinit>
 80083aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0f3      	beq.n	800839a <_fflush_r+0xa>
 80083b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083b4:	07d0      	lsls	r0, r2, #31
 80083b6:	d404      	bmi.n	80083c2 <_fflush_r+0x32>
 80083b8:	0599      	lsls	r1, r3, #22
 80083ba:	d402      	bmi.n	80083c2 <_fflush_r+0x32>
 80083bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083be:	f7ff fb8a 	bl	8007ad6 <__retarget_lock_acquire_recursive>
 80083c2:	4628      	mov	r0, r5
 80083c4:	4621      	mov	r1, r4
 80083c6:	f7ff ff5f 	bl	8008288 <__sflush_r>
 80083ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083cc:	07da      	lsls	r2, r3, #31
 80083ce:	4605      	mov	r5, r0
 80083d0:	d4e4      	bmi.n	800839c <_fflush_r+0xc>
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	059b      	lsls	r3, r3, #22
 80083d6:	d4e1      	bmi.n	800839c <_fflush_r+0xc>
 80083d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083da:	f7ff fb7d 	bl	8007ad8 <__retarget_lock_release_recursive>
 80083de:	e7dd      	b.n	800839c <_fflush_r+0xc>

080083e0 <__swhatbuf_r>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	460c      	mov	r4, r1
 80083e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e8:	2900      	cmp	r1, #0
 80083ea:	b096      	sub	sp, #88	@ 0x58
 80083ec:	4615      	mov	r5, r2
 80083ee:	461e      	mov	r6, r3
 80083f0:	da0d      	bge.n	800840e <__swhatbuf_r+0x2e>
 80083f2:	89a3      	ldrh	r3, [r4, #12]
 80083f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083f8:	f04f 0100 	mov.w	r1, #0
 80083fc:	bf14      	ite	ne
 80083fe:	2340      	movne	r3, #64	@ 0x40
 8008400:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008404:	2000      	movs	r0, #0
 8008406:	6031      	str	r1, [r6, #0]
 8008408:	602b      	str	r3, [r5, #0]
 800840a:	b016      	add	sp, #88	@ 0x58
 800840c:	bd70      	pop	{r4, r5, r6, pc}
 800840e:	466a      	mov	r2, sp
 8008410:	f000 f87c 	bl	800850c <_fstat_r>
 8008414:	2800      	cmp	r0, #0
 8008416:	dbec      	blt.n	80083f2 <__swhatbuf_r+0x12>
 8008418:	9901      	ldr	r1, [sp, #4]
 800841a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800841e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008422:	4259      	negs	r1, r3
 8008424:	4159      	adcs	r1, r3
 8008426:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800842a:	e7eb      	b.n	8008404 <__swhatbuf_r+0x24>

0800842c <__smakebuf_r>:
 800842c:	898b      	ldrh	r3, [r1, #12]
 800842e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008430:	079d      	lsls	r5, r3, #30
 8008432:	4606      	mov	r6, r0
 8008434:	460c      	mov	r4, r1
 8008436:	d507      	bpl.n	8008448 <__smakebuf_r+0x1c>
 8008438:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	6123      	str	r3, [r4, #16]
 8008440:	2301      	movs	r3, #1
 8008442:	6163      	str	r3, [r4, #20]
 8008444:	b003      	add	sp, #12
 8008446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008448:	ab01      	add	r3, sp, #4
 800844a:	466a      	mov	r2, sp
 800844c:	f7ff ffc8 	bl	80083e0 <__swhatbuf_r>
 8008450:	9f00      	ldr	r7, [sp, #0]
 8008452:	4605      	mov	r5, r0
 8008454:	4639      	mov	r1, r7
 8008456:	4630      	mov	r0, r6
 8008458:	f7ff fbba 	bl	8007bd0 <_malloc_r>
 800845c:	b948      	cbnz	r0, 8008472 <__smakebuf_r+0x46>
 800845e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008462:	059a      	lsls	r2, r3, #22
 8008464:	d4ee      	bmi.n	8008444 <__smakebuf_r+0x18>
 8008466:	f023 0303 	bic.w	r3, r3, #3
 800846a:	f043 0302 	orr.w	r3, r3, #2
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	e7e2      	b.n	8008438 <__smakebuf_r+0xc>
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	6020      	str	r0, [r4, #0]
 8008476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800847a:	81a3      	strh	r3, [r4, #12]
 800847c:	9b01      	ldr	r3, [sp, #4]
 800847e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008482:	b15b      	cbz	r3, 800849c <__smakebuf_r+0x70>
 8008484:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008488:	4630      	mov	r0, r6
 800848a:	f000 f851 	bl	8008530 <_isatty_r>
 800848e:	b128      	cbz	r0, 800849c <__smakebuf_r+0x70>
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	f023 0303 	bic.w	r3, r3, #3
 8008496:	f043 0301 	orr.w	r3, r3, #1
 800849a:	81a3      	strh	r3, [r4, #12]
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	431d      	orrs	r5, r3
 80084a0:	81a5      	strh	r5, [r4, #12]
 80084a2:	e7cf      	b.n	8008444 <__smakebuf_r+0x18>

080084a4 <_putc_r>:
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	460d      	mov	r5, r1
 80084a8:	4614      	mov	r4, r2
 80084aa:	4606      	mov	r6, r0
 80084ac:	b118      	cbz	r0, 80084b6 <_putc_r+0x12>
 80084ae:	6a03      	ldr	r3, [r0, #32]
 80084b0:	b90b      	cbnz	r3, 80084b6 <_putc_r+0x12>
 80084b2:	f7ff f911 	bl	80076d8 <__sinit>
 80084b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084b8:	07d8      	lsls	r0, r3, #31
 80084ba:	d405      	bmi.n	80084c8 <_putc_r+0x24>
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	0599      	lsls	r1, r3, #22
 80084c0:	d402      	bmi.n	80084c8 <_putc_r+0x24>
 80084c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084c4:	f7ff fb07 	bl	8007ad6 <__retarget_lock_acquire_recursive>
 80084c8:	68a3      	ldr	r3, [r4, #8]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	60a3      	str	r3, [r4, #8]
 80084d0:	da05      	bge.n	80084de <_putc_r+0x3a>
 80084d2:	69a2      	ldr	r2, [r4, #24]
 80084d4:	4293      	cmp	r3, r2
 80084d6:	db12      	blt.n	80084fe <_putc_r+0x5a>
 80084d8:	b2eb      	uxtb	r3, r5
 80084da:	2b0a      	cmp	r3, #10
 80084dc:	d00f      	beq.n	80084fe <_putc_r+0x5a>
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	1c5a      	adds	r2, r3, #1
 80084e2:	6022      	str	r2, [r4, #0]
 80084e4:	701d      	strb	r5, [r3, #0]
 80084e6:	b2ed      	uxtb	r5, r5
 80084e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084ea:	07da      	lsls	r2, r3, #31
 80084ec:	d405      	bmi.n	80084fa <_putc_r+0x56>
 80084ee:	89a3      	ldrh	r3, [r4, #12]
 80084f0:	059b      	lsls	r3, r3, #22
 80084f2:	d402      	bmi.n	80084fa <_putc_r+0x56>
 80084f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084f6:	f7ff faef 	bl	8007ad8 <__retarget_lock_release_recursive>
 80084fa:	4628      	mov	r0, r5
 80084fc:	bd70      	pop	{r4, r5, r6, pc}
 80084fe:	4629      	mov	r1, r5
 8008500:	4622      	mov	r2, r4
 8008502:	4630      	mov	r0, r6
 8008504:	f7ff f9d9 	bl	80078ba <__swbuf_r>
 8008508:	4605      	mov	r5, r0
 800850a:	e7ed      	b.n	80084e8 <_putc_r+0x44>

0800850c <_fstat_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	4d07      	ldr	r5, [pc, #28]	@ (800852c <_fstat_r+0x20>)
 8008510:	2300      	movs	r3, #0
 8008512:	4604      	mov	r4, r0
 8008514:	4608      	mov	r0, r1
 8008516:	4611      	mov	r1, r2
 8008518:	602b      	str	r3, [r5, #0]
 800851a:	f7f8 fb48 	bl	8000bae <_fstat>
 800851e:	1c43      	adds	r3, r0, #1
 8008520:	d102      	bne.n	8008528 <_fstat_r+0x1c>
 8008522:	682b      	ldr	r3, [r5, #0]
 8008524:	b103      	cbz	r3, 8008528 <_fstat_r+0x1c>
 8008526:	6023      	str	r3, [r4, #0]
 8008528:	bd38      	pop	{r3, r4, r5, pc}
 800852a:	bf00      	nop
 800852c:	200030f0 	.word	0x200030f0

08008530 <_isatty_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4d06      	ldr	r5, [pc, #24]	@ (800854c <_isatty_r+0x1c>)
 8008534:	2300      	movs	r3, #0
 8008536:	4604      	mov	r4, r0
 8008538:	4608      	mov	r0, r1
 800853a:	602b      	str	r3, [r5, #0]
 800853c:	f7f8 fb47 	bl	8000bce <_isatty>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d102      	bne.n	800854a <_isatty_r+0x1a>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	b103      	cbz	r3, 800854a <_isatty_r+0x1a>
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	200030f0 	.word	0x200030f0

08008550 <_sbrk_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4d06      	ldr	r5, [pc, #24]	@ (800856c <_sbrk_r+0x1c>)
 8008554:	2300      	movs	r3, #0
 8008556:	4604      	mov	r4, r0
 8008558:	4608      	mov	r0, r1
 800855a:	602b      	str	r3, [r5, #0]
 800855c:	f7f8 fb50 	bl	8000c00 <_sbrk>
 8008560:	1c43      	adds	r3, r0, #1
 8008562:	d102      	bne.n	800856a <_sbrk_r+0x1a>
 8008564:	682b      	ldr	r3, [r5, #0]
 8008566:	b103      	cbz	r3, 800856a <_sbrk_r+0x1a>
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	bd38      	pop	{r3, r4, r5, pc}
 800856c:	200030f0 	.word	0x200030f0

08008570 <_init>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	bf00      	nop
 8008574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008576:	bc08      	pop	{r3}
 8008578:	469e      	mov	lr, r3
 800857a:	4770      	bx	lr

0800857c <_fini>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	bf00      	nop
 8008580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008582:	bc08      	pop	{r3}
 8008584:	469e      	mov	lr, r3
 8008586:	4770      	bx	lr
